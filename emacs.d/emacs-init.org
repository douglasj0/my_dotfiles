-*- mode: org; fill-column: 78; -*-
#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent
#+PROPERTY: header-args:emacs-lisp :tangle ./emacs-init.el :mkdirp yes

* Startup
** initialization
Transfered from original ~/.emacs.d/init.el
Moved use-package and org-plus-contrib back to init.el to fix org-version issue

#+begin_src emacs-lisp
;;; init.el --- -*- lexical-binding: t -*-
;;  Author: Douglas Jackson
;;; Commentary:
;;  My Emacs configuration
;;; Code:

;;; Note: Some Performance Advantages of Lexical Scope:
;;; https://nullprogram.com/blog/2016/12/22/

;; whoami?
(setq
 user-full-name "Douglas Jackson"
 user-mail-address "hpotter@hogworts.edu")

;; more useful frame title that shows either a file or a
;; buffer name (if the buffer isn't visiting a file)
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))

;;;; Load Customizations if they exist
;; https://lupan.pl/dotemacs/
(setq custom-file "~/Sync/elisp/custom.el")
(if (file-exists-p custom-file)
    (load custom-file))

;;;; Add 'info' and 'elisp' to load-path (C-h v load-path RET)
(add-to-list 'Info-default-directory-list "~/.emacs.d/info")
(add-to-list 'load-path "~/.emacs.d/elisp/") ;; elisp packages not in pkg manager

;;; Reload .emacs file with: M-x reload-config
(defun reload-config () "Reloads .emacs interactively."
  (interactive)
  (load "~/.emacs.d/emacs-init.el"))

;;;; Only start server if it is not currently running
;(require 'server) ;; Note: (start-server) is now mostly deprecated
(load "server")
(setq server-socket-dir "~/.emacs.d/var/tmp")
(unless (server-running-p) (server-start))
#+end_src

** enable disabled functions
#+begin_src emacs-lisp
;; Upcase and downcase regions
(put 'upcase-region 'disabled nil)  ; C-x C-u
(put 'downcase-region 'disabled nil)  ; C-x C-l

;; Sets the current horizontal position for C-n and C-p
(put 'set-goal-column 'disabled nil)

;; Restrict buffer editing to a region
;; Text Narrowing commands:
;;   Region: C-x n n, Page: C-x n p
;;   Funct: C-x n p, Widen: C-x n w
;;   Subtree in Org-Mode:   C-x n s
(put 'narrow-to-region 'disabled nil)

;; Goal Column, enter C-x C-n, at point to set column that C-n should go to
;; to clear enter C-u C-x C-n
(put 'set-goal-column 'disabled nil)

;; https://www.emacswiki.org/emacs/ZapUpToChar
(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR.")
(global-set-key (kbd "M-z") 'zap-up-to-char)

;; disable electric-indent if active, added in Emacs 24.4
(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
#+end_src

** global key bindings
#+begin_src emacs-lisp

;;; test out electric buffer mode - disabled, nice, but navigation highlighted every line
;;; also, buffer management (deleting, etc) wasn't as polisihed as iBuffer
(global-set-key (kbd "C-x C-b") 'electric-buffer-list)

;;; https://stackoverflow.com/questions/93058/emacs-switching-to-another-frame-mac-os-x
; Re-enable swap frames with M-`
;(global-set-key "\M-`" 'other-frame)

;; Open an Emacs eshell, shell, term, or ansi-term
(global-set-key (kbd "C-c te") 'eshell)
(global-set-key (kbd "C-c ts") 'shell)
(global-set-key (kbd "C-c tt") 'term)
(global-set-key (kbd "C-c ta") 'ansi-term)
;(global-set-key (kbd "C-c tv") 'vterm) ; moved to vterm

;; Show a summery of all registers with content
(global-set-key (kbd "C-x r v") 'list-registers)

;; Move through windows in reverse order of (other-window), C-x o
(global-set-key (kbd "C-x O") 'previous-multiframe-window)

;; Invoke M-x without the Alt key (from Steve Yegge's blog)
(global-set-key (kbd "C-x C-m") 'execute-extended-command)
(global-set-key (kbd "C-c C-m") 'execute-extended-command)
#+end_src

** global settings
#+begin_src emacs-lisp

;; set default shell to zsh
(setq explicit-shell-file-name "/bin/zsh")
(setq shell-file-name "zsh")
(setq explicit-bash.exe-args '("--noediting" "--login" "-i"))
(setenv "SHELL" shell-file-name)

;; Remove trailing whitespace on save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; automatically follow symlinks to files under version control without prompting
(setq vc-follow-symlinks t)

;;; Kill line backwards
;;; http://emacsredux.com/blog/2013/04/08/kill-line-backward/
(global-set-key (kbd "C-<backspace>") (lambda ()
                                        (interactive)
                                        (kill-line 0)
                                        (indent-according-to-mode)))

;;; Ping settings (from net-util.el)
;;; http://www.masteringemacs.org/articles/2011/03/02/network-utilities-emacs/
(defvar ping-program-options)
(setq ping-program-options '("-c" "4"))

;;; Enable whitespace-mode for diff buffers
;;; http://stackoverflow.com/questions/11805584/automatically-enable-whitespace-mode-in-diff-mode
(add-hook 'diff-mode-hook
          '(lambda ()
            (whitespace-mode 1)))

;;; Mouse wheel and keyboard scroll settings
;;; scroll one line at a time (less "jumpy" than defaults)
;(setq mouse-wheel-follow-mouse 't)     ;scroll window under mouse
;(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil))) ;1 line
;(setq mouse-wheel-progressive-speed 'nil) ;'nil disables accelerated scrolling
;;(setq scroll-step 1                    ;keyboard scroll one line at a time
;;      scroll-preserve-screen-position t
;;      scroll-conservatively 10000)     ;smooth scrolling

;;; Enable holidays in Calendar
(setq mark-holidays-in-calendar t)

;; w/o-man mode (elisp man page formater for systems without 'man')
(defvar woman-show-log)
(defvar woman-cache-filename)
(setq woman-show-log nil)
(autoload 'woman "woman"
  "Decode and browse a Unix man page." t)
(setq woman-cache-filename "~/.emacs.d/var/woman_cache.el")

;;; Make tooltips appear in the echo area (checks if function exists)
(tooltip-mode nil)

;; Use CUA mode for rectangles (C-RET to select, normal emacs keys to copy)
;;; http://emacs-fu.blogspot.com/2010/01/rectangles-and-cua.html
(setq cua-enable-cua-keys nil)  ;; only for rectangles, keeps (C-c, C-v, C-x).
(cua-mode t)

;;; Don't show the startup screen
(setq inhibit-startup-message t)

;;; Disable startup message in scratch buffer
(setq-default initial-scratch-message nil)
;;; Set scratch buffer initial mode to text instead of lisp eval
;(setq-default initial-major-mode 'text-mode)
;;; Don't create new lines when pressing 'arrow-down key' at end of the buffer
(setq next-line-add-newlines nil)

;;; Fix delete key working as backspace and not forward deleting
;;; (This only worked in window mode, not terminal. C-d works in both)
(when window-system (normal-erase-is-backspace-mode 1))

;;; Alias to change apropos to ap
(defalias 'ap 'apropos)

;;; hl-line: highlight the current line
(when (fboundp 'global-hl-line-mode)
  (global-hl-line-mode t)) ;; turn it on for all modes by default

;;; Make text mode default major mode with auto-fill enabled
(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode) ;replaces longlines in 23

;;; Auto-scroll in *Compilation* buffer
(setq compilation-scroll-output t)

;;; make Emacs always indent using SPC characters and never TABs
;;; i.e. use spaces instead of tabs
;;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Just-Spaces.html
(setq-default indent-tabs-mode nil)

;;; "y or n" instead of "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)

;;; Highlight regions and add special behaviors to regions.
;;; "C-h d transient" for more info.  transient-mark-mode is a toggle.
;;; also in Emacs 22 and greater, C-SPC twice to temp enable transient mark
;(setq transient-mark-mode nil)
(setq transient-mark-mode t)

;;; Display line and column numbers in the mode line
(setq line-number-mode    t
      column-number-mode  t)

;;; Stop blinking cursor
(blink-cursor-mode 0)

;;; Explicitly show the end of a buffer (indicated on left fringe of window)
(set-default 'indicate-empty-lines t)

;;; Line-wrapping
(set-default 'fill-column 78)

;; Don't truncate lines
(setq truncate-lines t
      truncate-partial-width-windows nil)

;; Create new scratch buffer if needed
(run-with-idle-timer 1 t
    '(lambda () (get-buffer-create "*scratch*")))

;; allow scroll-down/up-command to move point to buffer end/beginning
;(setq scroll-error-top-bottom 'true)

;; New json-mode
(setq auto-mode-alist (cons '("\\.json\\'" . js-mode) auto-mode-alist))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bookmarks
;;    ‘C-x r m’ – set a bookmark at the current location (e.g. in a file)
;;    ‘C-x r b’ – jump to a bookmark
;;    ‘C-x r l’ – list your bookmarks
;;    ‘M-x bookmark-delete’ – delete a bookmark by name
(setq
  bookmark-default-file "~/.emacs.d/var/bookmarks" ;; bookmark file location
  bookmark-save-flag 1)                   ;; autosave each change)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

** functions
#+begin_src emacs-lisp
;;; ---------------------------------------------------------------------------
;;; https://stackoverflow.com/questions/8881649/how-to-force-org-mode-to-open-a-link-in-another-frame
;;; Open link at point in new frame
(defun zin/org-open-other-frame ()
  "Jump to bookmark in another frame. See `bookmark-jump' for more."
  (interactive)
  (let ((org-link-frame-setup (acons 'file 'find-file-other-frame org-link-frame-setup)))
    (org-open-at-point)))
(global-set-key (kbd "C-c 5 C-o") 'zin/org-open-other-frame)

;;; ---------------------------------------------------------------------------
;;; https://gist.github.com/mwfogleman/95cc60c87a9323876c6c
;;; http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
(defun narrow-or-widen-dwim ()
  "If the buffer is narrowed, it widens. Otherwise, it narrows to region, or Org subtree."
  (interactive)
  (cond ((buffer-narrowed-p) (widen))
        ((region-active-p) (narrow-to-region (region-beginning) (region-end)))
        ((equal major-mode 'org-mode) (org-narrow-to-subtree))
        (t (error "Please select a region to narrow to"))))
(global-set-key (kbd "C-c n n") 'narrow-or-widen-dwim)  ; was: C-c n then C-c x

;; I bind this key to C-c n, using the bind-key function that comes with use-package.
;(bind-key "C-c n" 'narrow-or-widen-dwim)
;; I also bind it to C-x t n, using Artur Malabarba's toggle map idea:
;; http:://www.endlessparentheses.com/the-toggle-map-and-wizardry.html

;;; ---------------------------------------------------------------------------
;;; Move lines up or down (can't easily use C-S on MacOS)
;;; http://whattheemacsd.com//editing-defuns.el-02.html
(defun move-line-down ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines 1))
    (forward-line)
    (move-to-column col)))

(defun move-line-up ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines -1))
    (move-to-column col)))

;(global-set-key (kbd "<C-S-down>") 'move-line-down)
;(global-set-key (kbd "<C-S-up>") 'move-line-up)
(global-set-key (kbd "<M-S-down>") 'move-line-down)
(global-set-key (kbd "<M-S-up>") 'move-line-up)

;;; ---------------------------------------------------------------------------
;;; Match Paren / based on the vim command using %
;;; emacs for vi users: http://grok2.tripod.com
(defun match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
        (t (self-insert-command (or arg 1)))))
(global-set-key "%" 'match-paren)

;;; ---------------------------------------------------------------------------
(defun intelligent-close ()
  "quit a frame the same way no matter what kind of frame you are on.

This method, when bound to C-x C-c, allows you to close an emacs frame the
same way, whether it's the sole window you have open, or whether it's
a \"child\" frame of a \"parent\" frame.  If you're like me, and use emacs in
a windowing environment, you probably have lots of frames open at any given
time.  Well, it's a pain to remember to do Ctrl-x 5 0 to dispose of a child
frame, and to remember to do C-x C-x to close the main frame (and if you're
not careful, doing so will take all the child frames away with it).  This
is my solution to that: an intelligent close-frame operation that works in
all cases (even in an emacs -nw session).

Stolen from http://www.dotemacs.de/dotfiles/BenjaminRutt.emacs.html."
  (interactive)
  (if (eq (car (visible-frame-list)) (selected-frame))
      ;;for parent/master frame...
      (if (> (length (visible-frame-list)) 1)
          ;;close a parent with children present
          (delete-frame (selected-frame))
        ;;close a parent with no children present
        (save-buffers-kill-emacs))
    ;;close a child frame
    (delete-frame (selected-frame))))
(global-set-key "\C-x\C-c" 'intelligent-close) ;forward reference
#+end_src

* Utilities
** helpful
Helpful is an alternative to the built-in Emacs help that provides much more contextual information.
https://github.com/Wilfred/helpful

#+begin_src emacs-lisp
(use-package helpful
  :bind
  (("C-h f" . helpful-callable)
   ("C-h v" . helpful-variable)
   ("C-h k" . helpful-key)
  ;;
  ;; Lookup the current symbol at point. C-c C-d is a common keybinding
  ;; for this in lisp modes.
  ;("C-c C-d" . helpful-at-point)  # keys already bound to Cal Deadline

  ;; Look up *F*unctions (excludes macros).
  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
  ;; already links to the manual, if a function is referenced there.
  ("C-h F" . helpful-function)

  ;; Look up *C*ommands.
  ;;
  ;; By default, C-h C is bound to describe `describe-coding-system'. I
  ;; don't find this very useful, but it's frequently useful to only
  ;; look at interactive functions.
  ("C-h C" . helpful-command)
))
#+end_src

** su/sudo
read-only files will be writable but if you attempt to save your modifications, emacs will ask root user’s password if needed. Can save pw to ~/.authinfo.
https://github.com/PythonNut/su.el

NOTE: Installed in elisp, no package

#+begin_src emacs-lisp
(use-package su
  ;:straight (:host github :repo "PythonNut/su.el")
  :config (su-mode +1))
#+end_src

** recentf
a minor mode that builds a list of recently opened files
https://www.emacswiki.org/emacs/RecentFiles

#+begin_src emacs-lisp
(use-package recentf
  :straight (:type built-in)
  ;:bind ("\C-x\ \C-r" . recentf-open-files)
  :config
  (setq ;recentf-save-file "~/.emacs.d/var/cache/recentf"
        ;recentf-save-file (expand-file-name "recentf" "~/.emacs.d/var")
        recentf-max-saved-items 500
        recentf-max-menu-items 15
        ;; disable recentf-cleanup on Emacs start, because it can cause
        ;; problems with remote files
        recentf-auto-cleanup 'never)
  (add-to-list 'recentf-exclude '(".*-autoloads\\.el\\'"
                                  "[/\\]\\.elpa/"))
  (recentf-mode +1))
#+end_src

** ace-window
The [[https://github.com/abo-abo/ace-window][ace-window]] package provides functions to quickly switch between
windows. The main =ace-window= command will either switch to the one
other open window or let you select another window by typing the first
letters of the its label. Additionally, this package can swap and
delete windows.

#+begin_src emacs-lisp
(use-package ace-window
  :straight (:type built-in)
  :init (setq aw-scope 'frame)
  :bind (("M-o" . ace-window)))
#+end_src
** flycheck (program syntax)
Modern on-the-fly syntax checking extension for GNU Emacs
https://github.com/flycheck/flycheck
Homepage: https://www.flycheck.org/en/latest/

Install syntax checker for languages
python: pip install pylint

error on lsp-mode start: Error processing message: void-function flycheck-define-generic-checker

#+begin_src emacs-lisp
(use-package flycheck
  ;:init (global-flycheck-mode)
  :init (add-hook 'after-init-hook #'global-flycheck-mode)
  :config
  (setq-default flycheck-global-modes '(not org-mode))
)
#+end_src

** flyspell (spelling)
Correcting misspelled words with flyspell using favourite interface.
https://emacs.stackexchange.com/questions/31300/can-you-turn-on-flyspell-for-comments-but-not-strings

Mac: brew install aspell

#+begin_src emacs-lisp
(use-package flyspell
  :straight (:type built-in)
  :init
  ;(progn
  ;  (flyspell-mode 1))
  :hook ((prog-mode . flyspell-prog-mode)
         (org-mode  . turn-off-flyspell)
         (text-mode . flyspell-mode))
  :config
  (progn
    (setq ispell-program-name "aspell")
    (setq ispell-list-command "--list")
    (setq ispell-extra-args '("--sug-mode=fast" "--lang=en_US"))
  ) ;; run flyspell with aspell, not ispell
)

;; Correcting misspelled words with flyspell using favourite interface.
;; https://github.com/d12frosted/flyspell-correct
(use-package flyspell-correct
  :after flyspell)
#+end_src

* OS Settings
** MacOS
#+begin_src emacs-lisp
(cond ((eq system-type 'darwin)
;	(setq mac-command-modifier 'meta
;	      mac-option-modifier 'alt
;	      mac-right-option-modifier 'super)

;; set keys for Apple keyboard, for emacs in OS X
(setq mac-command-modifier 'meta) ; make cmd key do Meta
(setq mac-option-modifier 'super) ; make opt key do Super
(setq mac-control-modifier 'control) ; make Control key do Control
;(setq ns-function-modifier 'hyper)  ; make Fn key do Hyper

;; Use meta +/- to change text size
(bind-key "M-+" 'text-scale-increase)
(bind-key "M-=" 'text-scale-increase)
(bind-key "M--" 'text-scale-decrease)

;; This is copied from
;; https://zzamboni.org/post/my-emacs-configuration-with-commentary/
(defun my/text-scale-reset ()
  "Reset text-scale to 0."
  (interactive)
  (text-scale-set 0))
(bind-key "M-g 0" 'my/text-scale-reset)

;;; set font size to 15, overriding default 12
; M-x describe-font:
; Monaco:pixelsize=12:weight=normal:slant=normal:width=normal:spacing=100:scalable=true
;(set-face-attribute 'default (selected-frame) :height 150)
(set-face-attribute 'default nil :height 150)

;; Osx-trash
;; Make Emacs' delete-by-moving-to-trash do what you expect it to do on OS X.
;; https://github.com/lunaryorn/osx-trash.el
;(use-package osx-trash
;   :ensure t
;   :config
;   (setq delete-by-moving-to-trash t)
;   (osx-trash-setup)
;)

;A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell
;https://github.com/purcell/exec-path-from-shell
;
;Needed to find aspell and probably others
(use-package exec-path-from-shell
  :config
  (when (memq window-system '(mac ns x))
     (setq exec-path-from-shell-check-startup-files nil ;; don't warn about env
           exec-path-from-shell-variables '("PATH" "MANPATH")
           exec-path-from-shell-arguments nil  ; was '("-l")
           ;exec-path-from-shell-debug 1   ; enable debugging
           ;exec-path-from-shell--debug 1  ; print msg if debug enabled
     )
     (exec-path-from-shell-initialize)
  )
)

;; Disable railwaycat's tab bar
;; https://github.com/railwaycat/homebrew-emacsmacport/issues/123
(defvar mac-frame-tabbing)
(setq mac-frame-tabbing nil)

;; Don't open up new frames for files dropped on icon, use active frame
(defvar ns-pop-up-frames)
(setq ns-pop-up-frames nil)

;; Drag and drop on the emacs window opens the file in a new buffer instead of
;; appending it to the current buffer
;; http://stackoverflow.com/questions/3805658/how-to-configure-emacs-drag-and-drop-to-open-instead-of-append-on-osx
(if (fboundp 'ns-find-file)
    (global-set-key [ns-drag-file] 'ns-find-file))

;; Move deleted files to the System's trash can
;; set trash-directory otherwise uses freedesktop.org-style
(setq trash-directory "~/.Trash")
(setq delete-by-moving-to-trash t)

;; Macbook Pro has no insert key.
;; http://lists.gnu.org/archive/html/help-gnu-emacs/2006-07/msg00220.html
(global-set-key (kbd "C-c I") (function overwrite-mode))

;;; Open up URLs in mac browser
(setq browse-url-browser-function 'browse-url-default-macosx-browser)
; (setq browse-url-browser-function 'browse-url-default-windows-browser)

;;; Copy and paste into Emacs Terminal
;;; stack overflow, pasting text into emacs on Macintosh
;;; Copy - C-x M-w
;;; Paste - C-x C-y
(defun pt-pbpaste ()
  "Paste data from pasteboard."
  (interactive)
  (shell-command-on-region
    (point)
    (if mark-active (mark) (point))
    "pbpaste" nil t))

(defun pt-pbcopy ()
  "Copy region to pasteboard."
  (interactive)
  (print (mark))
  (when mark-active
    (shell-command-on-region
      (point) (mark) "pbcopy")
    (kill-buffer "*Shell Command Output*")))
(global-set-key [C-x C-y] 'pt-pbpaste)
(global-set-key [C-x M-w] 'pt-pbcopy)

;; add the missing man page path for woman
;; https://www.reddit.com/r/emacs/comments/ig7zzo/weekly_tipstricketc_thread/
;(add-to-list 'woman-manpath
;             "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/share/man")
;(add-to-list 'woman-manpath
;             "/Applications/Xcode.app/Contents/Developer/usr/share/man")
;(add-to-list 'woman-manpath
;             "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/share/man")

;; On a Mac: make Emacs detect if you have light or dark mode enabled system wide.
;;If you have two themes, a light one and a dark one, and you want the dark theme by default unless you have light mode enabled, add this to your init.el:

;; If we're on a Mac and the file "~/bin/get_dark.osascript" exists
;; and it outputs "false", activate light mode. Otherwise activate
;; dark mode.
;(cond ((and (file-exists-p "~/bin/get_dark.osascript")
;	     (string> (shell-command-to-string "command -v osascript") "")
;	     (equal "false\n"
;		    (shell-command-to-string "osascript ~/bin/get_dark.osascript")))
;	(mcj/theme-set-light))
;      (t (mcj/theme-set-dark)))

;; (mcj/theme-set-light and mcj/theme-set-light are functions that enable the light and the dark theme, respectively).

;;~/bin/get_dark.osascript contains the following:
;;
;;tell application "System Events"
;;	  tell appearance preferences
;;		get dark mode
;;	  end tell
;;end tell
))
#+end_src

** Linux
#+begin_src emacs-lisp
;; -=Linux specific settings
(cond ((eq system-type 'gnu/linux)
(defvar browse-url-browser-function)
(defvar browse-url-browser-program)
;;; http://stackoverflow.com/questions/15277172/how-to-make-emacs-open-all-buffers-in-one-window-debian-linux-gnome
;(setq pop-up-frames 'graphic-only)
(setq pop-up-frames nil)

;;; http://stackoverflow.com/questions/4506249/how-to-make-emacs-org-mode-open-links-to-sites-in-google-chrome
;;; Open up URLs in browser using gnome-open (errors on bytecompile)
;(setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "gnome-open")
(setq browse-url-browser-function 'browse-url-firefox)

;;; Problems with minibuffer font size display in KDE/Crunchbang/Unity(?), explictily set font
;;; List fonts with M-x descript-font
;(set-default-font "Monospace-10")
))
#+end_src
* Look and feel
** better defaults
A small number of better defaults for Emacs
Some taken from:
  https://github.com/technomancy/better-defaults
  https://git.sr.ht/~technomancy/better-defaults

#+begin_src emacs-lisp
(require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

;; When you visit a file, point goes to the last place where it was when you previously visited the same file.
;; https://www.emacswiki.org/emacs/SavePlace
(save-place-mode 1)
;(setq save-place-file (locate-user-emacs-file "places" ".emacs-places"))
(setq save-place-file (concat user-emacs-directory "var/places"))
(setq save-place-forget-unreadable-files nil)

(global-set-key (kbd "M-/") 'hippie-expand)

(show-paren-mode 1)
(setq-default indent-tabs-mode nil)
(savehist-mode 1)

(setq save-interprogram-paste-before-kill t
      apropos-do-all t
      ;mouse-yank-at-point t
      require-final-newline t
      visible-bell t
      load-prefer-newer t
      ediff-window-setup-function 'ediff-setup-windows-plain
      backup-directory-alist `(("." . ,(concat user-emacs-directory
                                               "var/backups"))))
#+end_src

** disable all themes
Disable all themes before loading a theme
#+begin_src emacs-lisp
(defadvice load-theme (before disable-themes-first activate)
  (fk/disable-all-themes))

(defun fk/disable-all-themes ()
  "Disable all active themes."
  (interactive)
  (dolist (theme custom-enabled-themes)
    (disable-theme theme)))
#+end_src

load-theme without annoying confirmation
#+begin_src emacs-lisp
(advice-add 'load-theme
            :around
            (lambda (fn theme &optional no-confirm no-enable)
              (funcall fn theme t)))
#+end_src

** dracula theme
dracula-theme with telephone line status bar
https://draculatheme.com/
https://github.com/dracula/dracula-theme
https://www.reddit.com/r/emacs/comments/he55jl/whats_the_funky_character_on_the_mode_line/

#+begin_src emacs-lisp
(use-package dracula-theme
  ;:init
  ;(setq dracula-enlarge-headings nil)
  :config
  ;; Don't change the font size for some headings and titles (default t)
  (setq dracula-enlarge-headings nil)
  (if (display-graphic-p)
      (load-theme 'dracula :no-confirm)	  ; Emacs in own window
    (load-theme 'wheatgrass :no-confirm)  ; Emacs in tty
  )
)
#+end_src

** zenburn theme
zenburn-theme
https://github.com/bbatsov/zenburn-emacs

#+begin_src emacs-lisp
(use-package zenburn-theme
  ;:config
  ;(if (display-graphic-p)
  ;   (load-theme 'zenburn :no-confirm)   ; Emacs in own window
  ; (load-theme 'wheatgrass :no-confirm)  ; Emacs in tty
  ;
)
#+end_src

** all-the-icons
All-the-icons
https://github.com/domtronn/all-the-icons.el
NOTE: Install the fonts as well: M-x all-the-icons-install-fonts

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** doom-modeline
A fancy and fast mode-line inspired by minimalism design.
https://seagle0128.github.io/doom-modeline/

#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :config
  ;; Fix? for Height below 25 not working anymore #187
  ;; https://github.com/seagle0128/doom-modeline/issues/187
  (defun my-doom-modeline--font-height ()
    "Calculate the actual char height of the mode-line."
    (+ (frame-char-height) 1))
  (advice-add #'doom-modeline--font-height :override #'my-doom-modeline--font-height)
)
#+end_src

* Productivity
** daily-log
#+begin_src emacs-lisp
;;; -- daily log -

(defun daily-log ()
  "Automatically opens my daily log file and positions cursor at end of
last sentence."
  (interactive)
  ;(diary)
  (find-file "~/org/DailyLogs/+current") ;symlink to current log
  (goto-char (point-max))  ;go to the maximum accessible value of point
  (search-backward "* Notes") ;search to Notes section first to bypass notes
  (if (re-search-backward "[.!?]") ;search for punctuation from end of file
      (forward-char 1))
  )
(global-set-key (kbd "<f9>") 'daily-log)

;;; ---------------------------------------------------------------------------
;(diary)

;; Email 1
;; I have been using a simple system for writing notes day by day.  Kind of
;; like a diary.  It's really very unsophisticated but helpful.  It will allow
;; you to make notes into a template file.  Weeks, Months (etc...) later, you
;; can refer to them.
;;
;; For those who have never seen it
;; http://aonws01/unix-admin/Daily_Logs/Jerry_Sievers/
;;
;; Many of you new guys' questions to me have been answered from these notes
;; (eg, license keys info, who's who and so forth).
;;
;; John Sconiers asked about this and I set him up with it.  Whole procedure
;; takes only a few minutes to install and probably about fifteen minutes per
;; day to keep up to date.  An investment in time that pays off later.  Other
;; admins who have left Aon used this and liked it too.
;;
;; It also comes with a CGI program which, if your home directory is
;; accessible to aonws01, can allow others to browse your diary (I hear
;; cheering and booing...)
;;
;; Please let me know.  It would be nice to have everyone using this thing at
;; least minimally.

;; Email 2
;; Chris, I have installed the package in your home directory.  Files are in
;; Aon/DailyLogs.  The current log has a symbolic link named +Current.  You
;; also have an alias 'diary' which you can type at the shell.  Doing so will
;; invoke vi on the +Current file and position the cursor on the very last '.'
;; character in the file.  I have added the $HOME/bin directory to your path
;; and created one cron job to stamp the 'monday' file weekly.
;;
;; You should run the command 'new-daily-log' once per week to start a new
;; file.  Optionally, the previous file can be emailed to the destination of
;; your choice.  See the Aon/DailyLogs/.config file for details.
;;
;; Please call if you have any questions.
#+end_src

** which-key
Emacs package that displays available keybindings in popup
https://github.com/justbur/emacs-which-key

Paging: C-h
    Cycle through the pages forward with n (or C-n)
    Cycle backwards with p (or C-p)
    Undo the last entered key (!) with u (or C-u)
    Call the default command bound to C-h, usually describe-prefix-bindings, with h (or C-h)

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :config
  (setq which-key-idle-delay 1)
  (setq which-key-setup-side-window-bottom t) ; Default
  (setq which-key-popup-type 'side-window) ;Default
)
#+end_src

** ibuffer
https://www.emacswiki.org/emacs/IbufferMode
ibuffer - *Nice* buffer switching

Search all marked buffers
  ‘M-s a C-s’ - Do incremental search in the marked buffers.
  ‘M-s a C-M-s’ - Isearch for regexp in the marked buffers.
  ‘U’ - Replace by regexp in each of the marked buffers.
  ‘Q’ - Query replace in each of the marked buffers.
  ‘I’ - As above, with a regular expression.

#+begin_src emacs-lisp
(use-package ibuffer
  :straight (:type built-in)
  :bind ("C-x C-b" . ibuffer) ; replaces electric-buffer-list
  :config
    ;; Don't show empty buffer groups
    (setq ibuffer-show-empty-filter-groups nil)

    ;; work groups for ibuffer
    (setq ibuffer-saved-filter-groups
          '(("default"
             ("version control" (or (mode . svn-status-mode)
                       (mode . svn-log-edit-mode)
                       (name . "^\\*svn-")
                       (name . "^\\*vc\\*$")
                       (name . "^\\*Annotate")
                       (name . "^\\*vc-")
                       (name . "^\\*git-")
                       (name . "^\\*magit")))
             ("emacs" (or (name . "^\\*scratch\\*$")
                          (name . "^\\*Messages\\*$")
                          (name . "^TAGS\\(<[0-9]+>\\)?$")
                          (name . "^\\*info\\*$")
                          (name . "^\\*Occur\\*$")
                          (name . "^\\*grep\\*$")
                          (name . "^\\*Compile-Log\\*$")
                          (name . "^\\*Backtrace\\*$")
                          (name . "^\\*Process List\\*$")
                          (name . "^\\*gud\\*$")
                          (name . "^\\*Man")
                          (name . "^\\*WoMan")
                          (name . "^\\*Kill Ring\\*$")
                          (name . "^\\*Completions\\*$")
                          (name . "^\\*tramp")
                          (name . "^\\*shell\\*$")
                          (name . "^\\*compilation\\*$")))
             ("Helm" (or (name . "\*helm\*")))
             ("Help" (or (name . "\*Help\*")
                         (name . "\*Apropos\*")
                         (name . "\*info\*")))
             ("emacs-source" (or (mode . emacs-lisp-mode)
                                 (filename . "/Applications/Emacs.app")
                                 (filename . "/bin/emacs")))
             ("emacs-config" (or (filename . ".emacs.d")
                                 (filename . "emacs-config")))
            ("org" (or (name . "^\\*org-")
                        (name . "^\\*Org")
                        (mode . org-mode)
                        (mode . muse-mode)
                        (name . "^\\*Calendar\\*$")
                        (name . "^+current$")
                        (name . "^diary$")
                        (name . "^\\*Agenda")))
             ("latex" (or (mode . latex-mode)
                          (mode . LaTeX-mode)
                          (mode . bibtex-mode)
                          (mode . reftex-mode)))
             ("dired" (or (mode . dired-mode)))
             ("perl" (mode . cperl-mode))
             ("erc" (mode . erc-mode))
             ("shell" (or (mode . shell-mode)
                            (name . "^\\*terminal\\*$")
                            (name . "^\\*ansi-term\\*$")
                            (name . "^\\*shell\\*$")
                            (name . "^\\*eshell\\*$")))
             ("gnus" (or (name . "^\\*gnus trace\\*$")
                            (mode . message-mode)
                            (mode . bbdb-mode)
                            (mode . mail-mode)
                            (mode . gnus-group-mode)
                            (mode . gnus-summary-mode)
                            (mode . gnus-article-mode)
                            (name . "^\\.bbdb$")
                            (name . "^\\.newsrc-dribble"))))))

    ;; Order the groups so the order is : [Default], [agenda], [emacs]
    (defadvice ibuffer-generate-filter-groups (after reverse-ibuffer-groups ()
                                                     activate)
      (setq ad-return-value (nreverse ad-return-value)))

    ;; Hide the following buffers
    ;;(setq ibuffer-never-show-predicates
    ;;      (list "\\*Completions\\*"
    ;;            "\\*vc\\*"))

    ;; Enable ibuffer expert mode, don't prompt on buffer deletes
    (setq ibuffer-expert t)

    ;; Load the 'work' group, can set to load groups by location
    ;; ibuffer-auto-mode is a minor mode that automatically keeps the buffer
    ;; list up to date. I turn it on in my ibuffer-mode-hook:
    (add-hook 'ibuffer-mode-hook
              '(lambda ()
                 (ibuffer-auto-mode 1)
                 (ibuffer-switch-to-saved-filter-groups "default")))
)
#+end_src

* File mananagement
** dired-x
https://www.gnu.org/software/emacs/manual/dired-x.html
https://www.emacswiki.org/emacs/DiredExtra#Dired_X
provides extra functionality for Dired Mode.

Hide file detail toggle `(`

OSX/BSD ls doesn't sort directories first, ls-lisp can
#+begin_src emacs-lisp
(use-package ls-lisp
  :straight (:type built-in)
  :custom
  ;(ls-lisp-emulation 'MacOS)
  (ls-lisp-ignore-case t)
  (ls-lisp-verbosity nil)
  (ls-lisp-dirs-first t)
  (ls-lisp-use-insert-directory-program nil)
)

(use-package dired-x
  :straight (:type built-in)
  :bind ("C-x C-j"   . dired-jump)
	("C-x 4 C-j" . dired-jump-other-window)
  :config
     ;; on macOS, ls doesn't support --dired option linux does
     (when (string= system-type "darwin")
       (setq dired-use-ls-dired nil))
     (setq-default dired-omit-files-p t)
     (setq dired-listing-switches "-alhv")
     ;(setq dired-use-ls-dired nil)
     ;(setq dired-listing-switches "-agho --group-directories-first") ; errors
     ;(define-key dired-mode-map (kbd "/") #'dired-narrow-fuzzy) ; requires dired-hacks
     (define-key dired-mode-map (kbd "e") #'read-only-mode)

     ;; omit-mode
     (setq dired-omit-files "^\\.\\|^#.#$\\|.~$") ; omit dot and backup files
     (define-key dired-mode-map (kbd "h") #'dired-omit-mode) ; overriding h:describe-mode
     (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1))) ; start in omit-mode

     ;; Auto-refresh dired on file change
     (add-hook 'dired-mode-hook 'auto-revert-mode)

     ;; disable line wrapping in dired mode
     (add-hook 'dired-mode-hook (lambda () (setq truncate-lines t)))

     ;; enable side-by-side dired buffer targets
     ;; Split your window, split-window-vertically & go to another dired directory.
     ;; When you will press C to copy, the other dir in the split pane will be
     ;; default destination.
     (setq dired-dwim-target t) ;; suggest copying/moving to other dired buffer in split view

     ;; Dired functions (find-alternate 'a' reuses dired buffer)
     (put 'dired-find-alternate-file 'disabled nil)
)
#+end_src

dired-launch
https://github.com/thomp/dired-launch
#+begin_src emacs-lisp
(use-package dired-launch
  :hook
  (dired-mode . dired-launch-mode))
#+end_src

all-the-icons-dired
This adds dired support to all-the-icons.
https://github.com/jtbm37/all-the-icons-dired

Plus the fix for sub-directories?
https://www.reddit.com/r/emacs/comments/imy9f1/all_the_icons_dired_subtree/

#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :config
  (if window-system
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)))
#+end_src

* Completions
** vertico/corfu/consult (completions)
vertico.el - VERTical Interactive COmpletion
https://github.com/minad/vertico

corfu.el - Completion Overlay Region FUnction
https://github.com/minad/corfu

marginalia.el - Marginalia in the minibuffer
https://github.com/minad/marginalia

consult.el - Consulting completing-read
https://github.com/minad/consult

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode))

;; Use the `orderless' completion style.
;; Enable `partial-completion' for files to allow path expansion.
;; You may prefer to use `initials' instead of `partial-completion'.
(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; Completions in Regions
(use-package corfu
  :config
  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since dabbrev can be used globally (M-/).
  (corfu-global-mode))

;; Helpful M-x annotations, think of as a replacement for ivy-rich
(use-package marginalia
  :after vertico
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))

;; Many useful completion commands
(use-package consult
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :bind (;; C-c bindings (mode-specific-map)
         ;("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c b" . consult-bookmark)
         ;("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ;("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ;("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ;("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ;; Custom M-# bindings for fast register access
         ;("M-#" . consult-register-load)
         ;("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ;("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ;("M-g e" . consult-compile-error)
         ;("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)
         ;("M-g m" . consult-mark)
         ;("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-project-imenu)
         ;; M-s bindings (search-map)
         ;("M-s f" . consult-find)
         ;("M-s L" . consult-locate)
         ;("M-s g" . consult-grep)
         ;("M-s G" . consult-git-grep)
         ;("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s m" . consult-multi-occur)
         ;("M-s k" . consult-keep-lines)
         ;("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch)
         ("C-s"   . consult-line)                  ;; similar behavior to swiper
         ;:map isearch-mode-map
         ;("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
         ;("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
         ;("M-s l" . consult-line)                  ;; required by consult-line to detect isearch
  )
)
#+end_src

** projectile (project Management)
https://github.com/bbatsov/projectile
http://batsov.com/projectile/
projectile - project managent (works with helm)
Project navigation and management library for Emacs
Keybindings: https://projectile.readthedocs.io/en/latest/usage/

Mminimum commands to start benefitting
-  Find file in current project (s-p f)
-  Switch project (s-p p) (you can also switch between open projects with s-p q)
-  Grep (search for text/regexp) in project (s-p s g) (grep alternatives like ag, pt and rg are also supported)
-  Replace in project (s-p r)
-  Invoke any Projectile command via the Projectile Commander (s-p m)
-  Toggle between implementation and test (s-p t)
-  Toggle between related files (e.g. foo.h <→ foo.c and Gemfile <→ Gemfile.lock) (s-p a)
-  Run a shell command in the root of the project (s-p ! for a sync command and s-p & for an async command)
-  Run various pre-defined project commands like:
   -  build/compile project (s-p c)
   -  test project (s-p T)
- If you ever forget any of Projectile’s keybindings just do a (s-p C-h)
- Open up project directory in Dired (s-p D)

#+begin_src emacs-lisp
(use-package projectile
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ;("s-p" . projectile-command-map) ; super-p
              ("C-c p" . projectile-command-map))
  :config
  (setq projectile-enable-caching nil) ; don't enable caching
  (setq projectile-indexing-method 'alien) ; external cmd for indexing

  ;; set a list of folders for projectile to automatically check
  (setq projectile-project-search-path '("~/education" "~/projects/" "~/work/"))

  ;; To change the remote file exists cache expire to 10 min use this code:
  (setq projectile-file-exists-remote-cache-expire (* 10 60))

)
#+end_src

* Terminal
** eshell

#+begin_src emacs-lisp
(defun efs/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  (setq eshell-history-size         1000
        eshell-buffer-maximum-lines 1000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt
  :config
  (eshell-git-prompt-use-theme 'git-radar)
)

(use-package eshell
  :hook (eshell-first-time-mode . efs/configure-eshell)
  :config
  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("top" "htop" "zsh" "vi" "vim")))
)
#+end_src

** vterm
Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based on libvterm
https://github.com/akermu/emacs-libvterm

Manual installation guide
#+begin_src text
Prep, add emacs.d/emacs-libvterm to ~/.gitignore

Clone the repository:
$ cd .emacs.d/var
$ git clone https://github.com/akermu/emacs-libvterm.git

On Mac, install cmake and libvterm
$ brew install cmake libvterm

Build the module
$ cd ~/.emacs.d/var/emacs-libvterm
$ mkdir -p build
$ cd build
$ cmake ..
$ make

Add to init.el
(use-package vterm
  :load-path  "path/to/emacs-libvterm/")
#+end_src

Notes:
#+begin_src text
Q) What are the vterm's equivalents of term-line-mode C-c C-j and term-char-mode C-c C-k?
A) It's C-c C-t to toggle vterm-copy-mode.
#+end_src

#+begin_src emacs-lisp
(use-package vterm
  :straight (:type built-in)
  :load-path  "~/.emacs.d/var/emacs-libvterm"
  :bind ("C-c tv" . vterm)
  :config
  (setq vterm-max-scrollback 5000) ; default 1000, max is 100000
)
#+end_src

* org-mode
** org
A GNU Emacs major mode for convenient plain text markup — and much more.
https://orgmode.org/
NOTE: use-package def moved to init.el to override built-in org version

#+begin_src emacs-lisp
(use-package calendar
  :straight (:type built-in)
  :custom
  (calendar-week-start-day 0))

;;; org-superstar (replacement for org-bullets)
;;; https://github.com/integral-dw/org-superstar-mode
(use-package org-superstar
  :requires org
  ;:custom
  ;(org-superstar-headline-bullets-list '("◉" "○" "✸" "✿"))
  ;(org-superstar-bullet-list '("•"))
  ;(org-superstar-bullet-list '("■" "◆" "▲" "▶"))
  :hook (org-mode . org-superstar-mode)
  :config
  ;; Don't do anything special for item bullets or TODOs by default
  ;; these slow down larger org buffers.
  (setq org-superstar-prettify-item-bullets nil
        org-superstar-special-todo-items nil)
)

;; Prevent inadvertently edits an the invisible part of the buffer
(setq-default org-catch-invisible-edits 'smart)

;; Load additional exporters, or limit them with:  (setq org-export-backends '(ascii html latex odt))
;(eval-after-load 'org
;      (lambda()
;        (require 'ox-texinfo) ; texi and info
;        (require 'ox-md)      ; markdown
;        (require 'ox-odt)     ; opendoc text
;        (require 'ox-opml)
;        (require 'ox-confluence)))

;; Bind C-h o to org-info, loads info file
(define-key global-map (kbd "C-h o") 'org-info)

;; The following lines are always needed.  Choose your own keys.
;(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cc" 'org-capture)

;; Set to the location of your Org files on your local system
(setq org-directory "~/org")

;; Open all txt files in org-mode
(add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))


;;; Agenda - Agenda window setup
(setq org-agenda-window-setup 'current-window) ;; don't kill my window setup

;; Include emacs diary, not needed if using org-anniversary
;(setq org-agenda-include-diary t)

;; Custom agenda commands
;; http://members.optusnet.com.au/~charles57/GTD/mydotemacs.txt
(setq org-agenda-custom-commands
'(
("P" "Projects"
              ((tags "PROJECT")))

("H" "Office and Home Lists"
     ((agenda)
          (tags-todo "OFFICE")
          (tags-todo "HOME")
          (tags-todo "COMPUTER")
          (tags-todo "DVD")
          (tags-todo "READING")))

;("D" "Daily Action List"
;     ((agenda "" ((org-agenda-ndays 1)
;                     (org-agenda-sorting-strategy
;                        (quote ((agenda time-up priority-down tag-up))))
;                     (org-deadline-warning-days 0)
;                     ))))

("d" "Do today"
   ;; Show all todos and everything due today.
   ((agenda "" (
                ;; Limits the agenda to a single day
                (org-agenda-span 1)
                ))
    (todo "TODO")))

("D" "Deadline due"
     ((tags-todo "+TODO=\"TODO\"+DEADLINE<=\"<today>\""
                 ((org-agenda-overriding-header "Deadline today")))
      (tags-todo "+TODO=\"TODO\"+DEADLINE=\"\""
                 ((org-agenda-overriding-header "No deadline")))))

))


;;; Capture
;; NOTE:  Fibonacci format: 0, 0.5, 1, 2, 3, 5, 8, 13, 20, 40, 100
;; Setup default target for notes and a global hotkey for new ones
;; NOTE:  Need org-mode version 6.3.6 or later for this to work
;; http://stackoverflow.com/questions/3622603/org-mode-setup-problem-when-trying-to-use-capture
(setq org-default-notes-file (expand-file-name "~/org/notes.org"))

;; Capture templates - C-c c t
;; Based on Sacha Chua's org-capture-tempaltes
;; http://pages.sachachua.com/.emacs.d/Sacha.html
(defvar dbj/org-basic-task-template "* TODO %^{Task}
SCHEDULED: %^t

:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(defvar dbj/org-basic-jira-template "* TODO %^{Task}
SCHEDULED: %^t

:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:URL: %^{URL}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(defvar dbj/org-basic-someday-template "* %^{Task}
:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(setq org-capture-templates
      `(("t" "Tasks" entry
          (file "~/org/inbox.org"), dbj/org-basic-task-template)
          ;(file+headline "~/org/inbox.org" "Tasks"), dbj/org-basic-task-template)

        ("j" "Jira" entry
          (file "~/org/inbox.org"), dbj/org-basic-jira-template)

        ("s" "Someday task" entry
          (file "~/org/someday.org"), dbj/org-basic-someday-template)

        ("r" "Reference information" entry
          (file+headline "~/org/reference.org" "Inbox"))

        ("n" "Notes" entry
          (file+headline "~/org/notes.org"))

        ("o" "Journal" entry
          (file+olp+datetree "~/org/journal.org")
          "* %?\nEntered on %U\n  %i\n  %a")
))


;;; Other
;; When adding new heading below the current heading, the new heading is
;; Placed after the body instead of before it.  C-<RET>
(setq org-insert-heading-respect-content t)

;; Set Todo keywords, same as:
;; Shortcut key:  C-c C-t
;; #+TODO: TODO(t) INPROGRESS(p) WAITING(w) | DONE(d) CANCELED(c)
(setq org-todo-keywords
      '((sequence "TODO(t)" "INPROGRESS(p)" "WAITING(w@/!)")
        (sequence "|" "DONE(d!)" "CANCELED(c@)")))

;; Set Tags, same as:
;; #+TAGS: home(h) work(w) @computer(c) @phone(p) errants(e)
(setq org-tag-alist '(("@office" . ?o) ("@home" . ?h) ("computer" . ?c)
                      ("phone" . ?p) ("reading" . ?r)))

;; Prevent C-k from killing whole subtrees and losing work
(setq org-special-ctrl-k t)

;; Fontify code buffers in org, instead of grey text
;; This is especially nice when you open an editing buffer with [Ctrl+c ']
;; to insert code into the #+begin_src ... #+end_src area.
(setq org-src-fontify-natively t)

;; org-refile (C-c C-w) settings from:
;; http://www.mail-archive.com/emacs-orgmode@gnu.org/msg34415.html
;; http://doc.norang.ca/org-mode.html#RefileSetup
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets '((org-agenda-files :maxlevel . 2)
                           (nil :maxlevel . 3)))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)
;(setq org-refile-use-outline-path 'file)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

;;; Strike-through finished todos
;; sachachua.com/blog/2012/12/emacs-strike-through-headlines-for-done-tasks-in-org/
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (:foreground "PaleGreen"
                 :weight normal
                 :strike-through t))))
 '(org-headline-done
            ((((class color) (min-colors 16) (background dark))
               (:foreground "LightSalmon" :strike-through t)))))

;;; Make sure to hightlight mysql sql keywords: - errors on compile
;;; ex. #+BEGIN_SRC sql
;;;        SELECT foo FROM bar
;;;     #+END_SRC
;(add-hook 'sql-mode-hook
;          (lambda ()
;            (sql-highlight-mysql-keywords)))

;;; Enable other org-babel languages
(org-babel-do-load-languages
  (quote org-babel-load-languages)
  (quote ((emacs-lisp . t)
          ;(asymptote . t) ;Asymptote
          (awk . t)       ;Awk
          (C . t)         ;C
          ;(C++ . t)       ;C++
          ;(clojure . t)   ;Clojure
          ;(css . t)       ;CSS
          ;(d . f)        ;D
          ;(ditaa . f)     ;ditaa
          ;(dot . t)       ;Graphviz
          ;(calc . t)      ; Emacs Calc
          ;(fortran . t)   ;Fortran
          ;(gnuplot . t)   ;requires gnuplot installed
          ;(haskell . t)   ;Haskell
          (java . t)      ;Java
          (js . t)        ;Javascript
          ;(latex . t)     ;LaTeX
          ;(ledger . f)    ;Ledger
          (lisp . t)      ;Lisp
          ;(lilypond . t)  ;Lilypond
          ;(lua . t)       ;Lua
          ;(matlab . t)    ;MATLAB
          ;(mscgen . t)    ;Mscgen
          ;(ocaml . t)     ;Objective Caml
          ;(octave . t)    ;octave
          (org . t)       ;Org mode
          ;(oz . f)        ;Oz
          (perl . t)      ;Perl
          ;(plantuml . t)  ;Plantuml
          ;(processing . t) ;Processing.js
          (python . t)    ;Python
          ;(R . t)         ;R
          (ruby . t)      ;Ruby
          ;(sass . t)      ;Sass
          ;(scheme . t)    ;Scheme
          ;(screen . t)    ;GNU Screen
          (sed . t)       ;Sed
          (shell . t)     ;shell
          (sql . t)       ; SQL
          ;(sqlite .t)     ;SQLite
)))
#+end_src

** deft
deft - an Emacs mode for quickly browsing, filtering, and editing
directories of plain text notes.  http://jblevins.org/projects/deft/
http://jblevins.org/git/deft.git

Modified for org-roam 20200601

#+begin_src emacs-lisp
;; Set org-roam directory in one place to prevent madness
(setq org-roam-directory-location "~/org-roam/")

(use-package deft
  :requires (org)
  :bind
  ("C-c n d" . deft)
  :custom
  ;(deft-directory "~/org-roam/")
  (deft-directory org-roam-directory-location)
  (deft-recursive t)
  (deft-use-filename-as-title nil)
  (deft-use-filter-string-for-filename t)
  ;(deft-org-mode-title-prefix t)
  (deft-file-naming-rules '((noslash . "-")
                            (nospace . "-")
                            (case-fn . downcase)))
  (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg"))
  (deft-default-extension "org")
  (deft-text-mode 'org-mode)
)
#+end_src

** org-roam
Rudimentary Roam replica with Org-mode
https://github.com/org-roam/org-roam
https://org-roam.readthedocs.io/en/master/

#+begin_src emacs-lisp
(use-package org-roam
  :requires (org)
  :hook
  (after-init . org-roam-mode) ; error on start stringp, nil
  ((org-mode . org-roam-mode)
   (after-init . org-roam--build-cache-async))
  :custom
  (org-roam-link-title-format "R:%s")
  ;(make-directory "~/org-roam")
  ;(org-roam-directory "~/org-roam/")
  (org-roam-directory org-roam-directory-location)
  (org-roam-db-location "~/.emacs.d/var/org-roam.db")
  (org-roam-index-file "index.org")
  (org-roam-completion-system 'default) ; default, ido, ivy, helm
  :bind (:map org-roam-mode-map
          (("C-c n l" . org-roam)
           ("C-c n t" . org-roam-dailies-today)
           ("C-c n f" . org-roam-find-file)
           ("C-c n j" . org-roam-jump-to-index)
           ("C-c n b" . org-roam-switch-to-buffer)
           ;("C-c n g" . org-roam-show-graph)
           ("C-c n g" . org-roam-graph)
           ("C-c n c" . org-roam-db-build-cache))
          :map org-mode-map
          (("C-c n i" . org-roam-insert))
          (("C-c n I" . org-roam-insert-immediate)))
  :config
  (setq org-roam-capture-templates
    '(("d" "default" plain (function org-roam-capture--get-point)
       "%?"
       :file-name "%<%Y%m%d>-${slug}"
       :head "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+ROAM_ALIAS: \n#+STARTUP: overview\n\n- tags :: \n\n"
       :unnarrowed t)))

  ;; Update a field (#+LAST_MODIFIED: ) at save using bulit in time-stamp
  ;; https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321
  (add-hook 'org-mode-hook (lambda ()
                           (setq-local time-stamp-active t
                                       time-stamp-line-limit 18
                                       time-stamp-start "^#\\+LAST_MODIFIED: [ \t]*"
                                       time-stamp-end "$"
                                       time-stamp-format "\[%Y-%m-%d %a %H:%M\]")
                           (add-hook 'before-save-hook 'time-stamp nil 'local)))


)

;  (setq org-roam-capture-templates
;    '(("n" "Note" plain (function org-roam--capture-get-point) "%?"
;       :file-name "Note-%<%Y%m%d>-${slug}"
;       :head "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+STARTUP: overview\n#+ROAM_ALIAS: \n\n- tags :: \n\n"
;       :unnarrowed t)
;      ("p" "paper" plain (function org-roam--capture-get-point) "%?"
;       :file-name "Paper-%<%Y%m%d>-${slug}"
;       ;:head "#+TITLE: ${title}\n - tags :: [[file:paper.org][R:Paper]]\n"
;       :head "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+STARTUP: overview\n#+ROAM_ALIAS: \n\n- tags :: \n\n"
;       :unnarrowed t)
;      ("j" "project" plain (function org-roam--capture-get-point) "%?"
;       :file-name "Proj-%<%Y%m%d>-${slug}"
;       ;:head "#+TITLE: ${title}\n - tags :: [[file:project.org][R:Project]]\n"
;       :head "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+STARTUP: overview\n#+ROAM_ALIAS: \n\n- tags :: \n\n"
;       :unnarrowed t)
;      ("s" "proposal" plain (function org-roam--capture-get-point) "%?"
;       :file-name "Proposal-%<%Y%m%d>-${slug}"
;       ;:head "#+TITLE: ${title}\n - tags :: [[file:proposal.org][R:Proposal]]\n"
;       :head "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+STARTUP: overview\n#+ROAM_ALIAS: \n\n- tags :: \n\n"
;       :unnarrowed t)
;      ("d" "Default" plain (function org-roam--capture-get-point) "%?"
;       :file-name "%<%Y%m%d>-${slug}"
;       :head "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+STARTUP: overview\n#+ROAM_ALIAS: \n\n- tags :: \n\n"
;       :unnarrowed t)
;       ))

;    :config
;    (setq org-roam-capture-templates
;      '(("d" "default" plain (function org-roam-capture--get-point)
;         "%?"
;         :file-name "%<%Y%m%d%H%M%S>-${slug}"
;         :head "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+ROAM_ALIAS: \n\n- tags :: \n\n"
;         :unnarrowed t)
;
;  ;; https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321
;  ;      ("a" "daily" plain (function org-roam-capture--get-point)
;  ;        ""
;  ;       :immediate-finish t
;  ;       :file-name "dailies/%<%Y-%m-%d>"
;  ;       :head "#+TITLE: %<%Y-%m-%d>")
;
;  ; --
;
;  ;; how to modify last_modified tag in file
;  ;;https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321/9
;  ;(require 'time-stamp)
;  ;(add-hook 'write-file-functions 'time-stamp)
;
;  ;--
;
;  ;; where no roam has gone before - oldfxiny
;  ;; https://www.reddit.com/r/emacs/comments/h9zoy9/weekly_tipstricketc_thread/
;
;  ;(setq my/roam-dir-list '(
;  ;  "~/org-roam/"
;  ;  "~/org-roam-wip/"))
;  ;
;  ;(defun my/pick-roam-dir ()
;  ;  "Select directories from a list"
;  ;  (interactive)
;  ;  (setq org-roam-directory
;  ;  (completing-read "Select directory: " my/roam-dir-list))
;  ;  ;;(deft)
;  ;  ;;(deft-refresh)
;  ;)

#+end_src

* Programming
** source control
*** magit
It's Magit! A Git porcelain inside Emacs. https://magit.vc
https://github.com/magit/magit

#+begin_src emacs-lisp
;; Fixes for emacs 27
;; Magit Error: Warning (with-editor): Cannot determine a suitable Emacsclient
(setq-default with-editor-emacsclient-executable "emacsclient")

(use-package magit
  :commands magit
  :bind
    (("C-x g" . magit-status)
     ("C-x G" . magit-status-with-prefix)
     ("C-x M-g" . magit-dispatch)
     ("C-c M-g" . global-magit-file-mode))
)
#+end_src
*** git gutter
Emacs port of GitGutter which is Sublime Text Plugin
Show change information from git
https://github.com/syohex/emacs-git-gutter

#+begin_src emacs-lisp
(use-package git-gutter
  :config
    (global-git-gutter-mode t)
)
#+end_src
** s
The long lost Emacs string manipulation library
https://github.com/magnars/s.el

#+BEGIN_SRC emacs-lisp
(use-package s)
#+END_SRC

** shell script
shell-script-mode is a major mode for shell script editing.
https://www.emacswiki.org/emacs/ShMode

#+begin_src emacs-lisp
(use-package sh-script
  :mode (("zshecl" . sh-mode)
         ("\\.zsh\\'" . sh-mode)
         ("\\.sh\\'" . sh-mode))
  :custom
  ;; zsh
  (system-uses-terminfo nil))

(use-package executable
  :hook
  (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src

** smartparens
Smartparens is a minor mode for dealing with pairs in Emacs.
https://github.com/Fuco1/smartparens

NOTE: changed smartparens-global-mode to show-smartparens-global-mode
https://github.com/Fuco1/smartparens/wiki/Show-smartparens-mode

Cheatsheat
https://gist.github.com/pvik/8eb5755cc34da0226e3fc23a320a3c95

#+begin_src emacs-lisp
(use-package smartparens
  :hook (after-init . show-smartparens-global-mode)
  :config (require 'smartparens-config)
    (add-hook 'python-mode-hook #'smartparens-mode)
)
#+end_src

* -- Testing --
* mu4e
Load the mu4e.el file if it exists

#+begin_src emacs-lisp
;; only load mu4e on a specific system for debugging
(when (string= (system-name) "lothlorien.local")

;(load "~/.emacs.d/mu4e.el" t)
;; vs
(setq mu4e-config "~/.emacs.d/mu4e.el")
(if (file-exists-p mu4e-config)
    (load mu4e-config))

)
#+end_src

* elfeed (rss reader)
Elfeed is an extensible web feed reader for Emacs, supporting both Atom and RSS.
https://github.com/skeeto/elfeed
https://github.com/Manoj321/elfeed-dashboard
https://github.com/algernon/elfeed-goodies

Keyboard shortcuts
  RET: view selected entry in a buffer
  b: open selected entries in your browser (browse-url)
  y: copy selected entries URL to the clipboard
  r: mark selected entries as read
  u: mark selected entries as unread
  +: add a specific tag to selected entries
  -: remove a specific tag from selected entries
  R: mark all messages in buffer as read

#+begin_src emacs-lisp
;;(getenv "USER")
;;("system-name")
;; only load elfeed on a specific system for debugging
(when (string= (system-name) "lothlorien.local")

(use-package elfeed
  :commands (elfeed)
  :config
  ;(require 'elfeed-protocol)

  ;; load db on open, close db on quit
  ;; https://www.pengmeiyu.com/blog/my-emacs-configuration/
  ;(defun my-elfeed-open ()
  ;  (interactive)
  ;  (elfeed-db-load)
  ;  (elfeed))
  ;
  ;(defun my-elfeed-quit ()
  ;  (interactive)
  ;  (elfeed-search-quit-window)
  ;  (elfeed-db-unload)))

  ;; changes location of elfeed database
  (setq elfeed-db-directory "~/.emacs.d/var/elfeeddb")

  ;; Mark all as read
  (defun elfeed-mark-all-as-read ()
    (interactive)
    (mark-whole-buffer)
    (elfeed-search-untag-all-unread))

  (bind-keys
   :map elfeed-search-mode-map
   ("R" . elfeed-mark-all-as-read))

  ;; data is stored in ~/.elfeed
  (setq elfeed-feeds (quote
         (;; My feeds from The Old Reader
          ;;The Old Reader Picks
          ("https://www.apartmenttherapy.com/main.rss" misc)
          ("https://www.getrichslowly.org/feed/" misc)
          ("https://what-if.xkcd.com/feed.atom" misc)
          ;("http://blog.theoldreader.com/rss" misc)
          ("https://thedailywhat.cheezburger.com/rss" misc)
          ("http://feeds.feedburner.com/elise/simplyrecipes" misc)
          ("https://manofmany.com/feed" misc)
          ;; News
          ("https://www.chicagotribune.com/rss2.0.xml" news chicago)
          ;; Apple
          ("https://www.engadget.com/rss.xml" apple)
          ("http://feeds.macrumors.com/MacRumors-Front" apple)
          ("https://www.cnet.com/rss/reviews/" apple)
          ;; Blogs
          ("http://c0t0d0s0.org/feeds/index.rss2" blogs)
          ("http://feeds.scottlowe.org/slowe/content/feed" blogs)
          ("http://utcc.utoronto.ca/~cks/space/blog/?atom" blogs)
          ("https://everythingsysadmin.com/atom.xml" blogs)
          ("https://prefetch.net/blog/index.php/feed" blogs)
          ("https://blogs.oracle.com/compendium/rss" blogs)
          ("http://snarfed.org/feed" blogs)
          ("http://feeds.feedburner.com/TheGeekStuff" blogs)
          ;; Downloads
          ("http://reinventedsoftware.com/news/index.xml" downloads)
          ("http://feeds.feedburner.com/macupdate" downloads)
          ;; Linux
          ("http://feeds.feedburner.com/d0od" linux)
          ("https://www.usenix.org/blog/rss.xml" linux)
          ;("http://planet.centos.org/atom.xml" linux)
          ("https://www.reddit.com/r/linux/.rss" linux reddit)
          ("https://www.reddit.com/r/commandline/.rss" linux reddit)
          ("https://www.reddit.com/r/sysadmin/.rss" linux reddit)
          ("http://debian.org/News/news" linux debian)
          ("https://blog.linuxmint.com/?feed=rss2" linux mint)
          ;; PiDP
          ("https://groups.google.com/forum/feed/pidp-8/msgs/rss_v2_0.xml" pidp google)
          ("https://groups.google.com/forum/feed/pidp-11/msgs/rss_v2_0.xml" pidp google)
          ;; Security
          ("http://debian.org/security/dsa" security linux debian)
          ("http://us-cert.gov/ncas/alerts.xml" security us)
          ("https://msrc-blog.microsoft.com/feed/" security microsoft)
          ("https://isc.sans.edu/rssfeed_full.xml" security sans)
          ("https://www.netscout.com/blog/asert/rss.xml" security)
          ;; Tech
          ("http://thedailywtf.com/rss.aspx" tech wtf)
          ("https://hackaday.com/feed/" tech)
          ("https://raspberrypi.stackexchange.com/feeds" tech pi)
          ("http://feeds.feedburner.com/catonmat" tech)
          ;; programming
          ("https://news.ycombinator.com/rss" programming)
          ("https://www.reddit.com/r/programming.rss" programming)
          ;("https://www.reddit.com/r/golang.rss" programming go)
          ("https://www.reddit.com/r/java.rss" programming java)
          ;("https://www.reddit.com/r/javascript.rss" programming javascript)
          ;("https://www.reddit.com/r/typescript.rss" programming typescript)
          ;("https://www.reddit.com/r/clojure.rss" programming clojure)
          ("https://www.reddit.com/r/python.rss" programming python)
          ;; cloud
          ("https://www.reddit.com/r/aws.rss" cloud aws reddit)
          ;("https://www.reddit.com/r/googlecloud.rss" cloud googlecloud reddit)
          ;("https://www.reddit.com/r/azure.rss" cloud azure reddit)
          ("https://www.reddit.com/r/devops.rss" cloud devops reddit)
          ("https://www.reddit.com/r/kubernetes.rss" cloud kubernetes reddit)
          ;; LDAP
          ("https://stackoverflow.com/feeds/tag/ldap" ldap)
          ;; Emaacs
          ("https://stackoverflow.com/feeds/tag/emacs" emacs)
          ("https://emacs.stackexchange.com/feeds" emacs)
          ("http://feeds.feedburner.com/XahsEmacsBlog" emacs)
          ("https://www.reddit.com/r/emacs.rss" emacs reddit)
          ("https://stackoverflow.com/feeds/tag/org-mode" emacs)
          ("https://superuser.com/feeds/tag/emacs" emacs)
          ("http://blog.binchen.org/rss.xml" emacs)
          ("https://sachachua.com/blog/feed/?cat=-550" emacs)
          ("https://blog.tecosaur.com/tmio/rss.xml" emacs org)
  )))

  (setq-default elfeed-search-filter "@1-week-ago +unread")
  ;(setq-default elfeed-search-filter "@2-days-ago +unread")
  ;(setq-default elfeed-search-title-max-width 100)
  ;(setq-default elfeed-search-title-min-width 100)

  ;; set global keybindings
  (global-set-key (kbd "C-c w") 'elfeed)
  (global-set-key (kbd "C-c d") 'elfeed-dashboard)
)

;; provides article view on right side
;(use-package elfeed-goodies
;  :ensure t
;  :demand t
;  :config
;  (elfeed-goodies/setup)
;  ;; set pane position (left, right, top, bottom), default is right
;  ;(setq elfeed-goodies/entry-pane-position 'bottom)
;  (setq elfeed-goodies/entry-pane-size 0.65)
;)

;; save sample dashboard to a file
;; curl https://raw.githubusercontent.com/Manoj321/elfeed-dashboard/main/elfeed-dashboard.org -o ~/elfeed-dashboard.org
(use-package elfeed-dashboard
  :config
  (setq elfeed-dashboard-file "~/.emacs.d/etc/elfeed-dashboard.org")
  ;; update feed counts on elfeed-quit
  (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links)
))

;; Provide extra protocols to make self-hosting RSS readers work with elfeed, including Fever, NewsBlur, Nextcloud/ownCloud News, Tiny Tiny RSS and even more.
;; https://www.reddit.com/r/emacs/comments/av1vyh/usepackage_and_elfeed/
;(use-package elfeed-protocol
;  :ensure t
;  :defer t
;  :config
;  (elfeed-protocol-enable)
;  (require 'password-store))
;
;(use-package password-store
;  :ensure t
;  :defer t)
#+end_src
