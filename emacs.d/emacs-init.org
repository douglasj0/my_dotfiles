#-*- mode: org; fill-column: 78 -*-
#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent

* Housekeeping
#+BEGIN_SRC emacs-lisp
;;; Load Customizations if they exist
(setq custom-file "~/Sync/elisp/custom.el")
(load custom-file 'noerror)

;;; Add 'info' and 'elisp' to load-path (C-h v load-path RET)
(add-to-list 'Info-default-directory-list "~/.emacs.d/info")
(add-to-list 'load-path "~/.emacs.d/elisp/") ;; elisp packages not in pkg manager

;;; Reload .emacs file by typing: M-x reload-config
(defun reload-config () "Reloads .emacs interactively."
  (interactive)
  (load "~/.emacs.d/init.el"))

;;; Only start server if it is not currently running
;(require 'server) ;; Note: (start-server) is now mostly deprecated
(load "server")
(setq server-socket-dir "~/.emacs.d/tmp")
(unless (server-running-p) (server-start))

;;; Define booleans based on system type
(defconst *is-a-mac*
  (eq system-type 'darwin)
  "Is this running on OS X?")
(defconst *is-linux*
  (eq system-type 'gnu/linux)
  "Is this running on Linux?")
#+END_SRC
* Enable functions that are disabled by default
#+BEGIN_SRC emacs-lisp
;; Upcase and downcase regions
(put 'upcase-region 'disabled nil)  ;C-x C-u
(put 'downcase-region 'disabled nil)  ;C-x C-l

;; Sets the current horizontal position for C-n and C-p
(put 'set-goal-column 'disabled nil)

;; Restrict buffer editing to a region
;; Text Narrowing commands:
;;   Region: C-x n n, Page: C-x n p
;;   Funct: C-x n p, Widen: C-x n w
;;   Subtree in Org-Mode:   C-x n s
(put 'narrow-to-region 'disabled nil)

;; Dired functions (find-alternate 'a' reuses dired buffer)
(put 'dired-find-alternate-file 'disabled nil)

;; Goal Column, enter C-x C-n, at point to set column that C-n should go to
;; to clear enter C-u C-x C-n
(put 'set-goal-column 'disabled nil)

;; Enable mini-buffer history save feature
(setq savehist-additional-variables    ;; also save...
  '(search-ring regexp-search-ring)    ;; ... my search entries
  savehist-file "~/.emacs.d/cache/history") ;; keep my .emacs.d clean
(savehist-mode t)                      ;; do customization before activate

;; https://www.emacswiki.org/emacs/ZapUpToChar
(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR.")
(global-set-key (kbd "M-z") 'zap-up-to-char)

;; And disable electric-indent if active, added in Emacs 24.4
(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
#+END_SRC
* Global key bindings
#+BEGIN_SRC emacs-lisp
;;; test out electric buffer mode - disabled, nice, but navigation highlighted every line
;;; also, buffer management (deleting, etc) wasn't as polisihed as iBuffer
;(global-set-key (kbd "C-x C-b") 'electric-buffer-list)

;;; https://stackoverflow.com/questions/93058/emacs-switching-to-another-frame-mac-os-x
; Re-enable swap frames with M-`
(global-set-key "\M-`" 'other-frame)

;; Open an Emacs eshell, shell, or term
(global-set-key (kbd "C-c e") 'eshell)
(global-set-key (kbd "C-c s") 'shell)
;(global-set-key (kbd "C-c t") 'term)
(global-set-key (kbd "C-c t") 'ansi-term) ; re-assigned to shell-pop

;; Show a summery of all registers with content
(global-set-key (kbd "C-x r v") 'list-registers)

;;; Remove trailing whitespace on save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Move through windows in reverse order of (other-window), C-x o
(global-set-key (kbd "C-x O") 'previous-multiframe-window)

;; Invoke M-x without the Alt key (from Steve Yegge's blog)
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)
#+END_SRC
* Global settings
#+BEGIN_SRC emacs-lisp
;; automatically follow symlinks to files under version control without prompting
(setq vc-follow-symlinks t)

;; Garbage-collect on focus-out, Emacs /should/ feel snappier.
(add-hook 'focus-out-hook #'garbage-collect)

;;; Kill line backwards
;;; http://emacsredux.com/blog/2013/04/08/kill-line-backward/
(global-set-key (kbd "C-<backspace>") (lambda ()
                                        (interactive)
                                        (kill-line 0)
                                        (indent-according-to-mode)))

;;; Ping settings (from net-util.el)
;;; http://www.masteringemacs.org/articles/2011/03/02/network-utilities-emacs/
(defvar ping-program-options)
(setq ping-program-options '("-c" "4"))

;;; Enable whitespace-mode for diff buffers
;;; http://stackoverflow.com/questions/11805584/automatically-enable-whitespace-mode-in-diff-mode
(add-hook 'diff-mode-hook
          '(lambda ()
            (whitespace-mode 1)))

;;; Mouse wheel and keyboard scroll settings
;;; scroll one line at a time (less "jumpy" than defaults)
(setq mouse-wheel-follow-mouse 't)     ;scroll window under mouse
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil))) ;1 line
(setq mouse-wheel-progressive-speed t) ;'nil disables accelerated scrolling
(setq scroll-step 1                    ;keyboard scroll one line at a time
      scroll-preserve-screen-position t
      scroll-conservatively 10000)     ;smooth scrolling

;;; Enable holidays in Calendar
(setq mark-holidays-in-calendar t)

;;; Address the issue of Emacs's lack of a vi-like "O" command
;;; http://stackoverflow.com/questions/2173324/emacs-equivalents-of-vims-dd-o-o
;;; Open line above: C-o  Open line below: C-n C-o  Kill whole line: C-S-Bcksp
(defadvice open-line (around vi-style-open-line activate)
  "Make open-line behave more like vi."
  (beginning-of-line)
  ad-do-it
  (indent-according-to-mode))

;; w/o-man mode (elisp man page formater for systems without 'man')
(defvar woman-show-log)
(defvar woman-cache-filename)
(setq woman-show-log nil)
(autoload 'woman "woman"
  "Decode and browse a Unix man page." t)
(setq woman-cache-filename "~/.emacs.d/cache/wmcache.el")

;;; Make tooltips appear in the echo area (checks if function exists)
(if (fboundp 'tooltip-mode)
 (tooltip-mode -1)
 (setq tooltip-use-echo-area t))

;; Use CUA mode for rectangles (C-RET to select, normal emacs keys to copy)
;;; http://emacs-fu.blogspot.com/2010/01/rectangles-and-cua.html
(setq cua-enable-cua-keys nil)  ;; only for rectangles, keeps (C-c, C-v, C-x).
(cua-mode t)
;; Emacs 24.4 introduces rectangle-mark-mode, C-x SPC, but not quite as useful
;(cua-mode t)
;(setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
;(transient-mark-mode 1) ;; No region when it is not highlighted
;(setq cua-keep-region-after-copy t) ;; Standard Windows behaviour

;;; Don't show the startup screen
(setq inhibit-startup-message t)

;;; Disable startup message in scratch buffer
(setq-default initial-scratch-message nil)
;;; And set scratch buffer initial mode to text instead of lisp eval
;(setq-default initial-major-mode 'text-mode)
;;; Don't create new lines when pressing 'arrow-down key' at end of the buffer
(setq next-line-add-newlines nil)

;;; Fix delete key working as backspace and not forward deleting
;;; (This only worked in window mode, not terminal. C-d works in both)
(when window-system (normal-erase-is-backspace-mode 1))

;;; Alias to change apropos to ap
(defalias 'ap 'apropos)

;;; hl-line: highlight the current line
(when (fboundp 'global-hl-line-mode)
  (global-hl-line-mode t)) ;; turn it on for all modes by default

;;; Make text mode default major mode with auto-fill enabled
(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode) ;replaces longlines in 23

;;; Auto-scroll in *Compilation* buffer
(setq compilation-scroll-output t)

;;; make Emacs always indent using SPC characters and never TABs
;;; i.e. use spaces instead of tabs
;;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Just-Spaces.html
(setq-default indent-tabs-mode nil)

;;; "y or n" instead of "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)

;;; Highlight regions and add special behaviors to regions.
;;; "C-h d transient" for more info.  transient-mark-mode is a toggle.
;;; also in Emacs 22 and greater, C-SPC twice to temp enable transient mark
;(setq transient-mark-mode nil)
(setq transient-mark-mode t)

;;; Display line and column numbers in the mode line
(setq line-number-mode    t
      column-number-mode  t)

;;; Stop blinking cursor
(blink-cursor-mode 0)

;;; Explicitly show the end of a buffer (indicated on left fringe of window)
(set-default 'indicate-empty-lines t)

;;; Line-wrapping
(set-default 'fill-column 78)

;; Don't truncate lines
(setq truncate-lines t
      truncate-partial-width-windows nil)

;; Create new scratch buffer if needed
(run-with-idle-timer 1 t
    '(lambda () (get-buffer-create "*scratch*")))

;; allow scroll-down/up-command to move point to buffer end/beginning
(setq scroll-error-top-bottom 'true)

;; New json-mode
(setq auto-mode-alist (cons '("\\.json\\'" . js-mode) auto-mode-alist))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bookmarks
;;    ‘C-x r m’ – set a bookmark at the current location (e.g. in a file)
;;    ‘C-x r b’ – jump to a bookmark
;;    ‘C-x r l’ – list your bookmarks
;;    ‘M-x bookmark-delete’ – delete a bookmark by name
(setq
  bookmark-default-file "~/.bookmarks"    ;; .emacs.d/bookmarks by default
  bookmark-save-flag 1)                   ;; autosave each change)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC
* OS specific settings
** Linux settings
#+BEGIN_SRC emacs-lisp
;;; -=Linux specific settings
(if *is-linux*
   (progn

;;; http://stackoverflow.com/questions/15277172/how-to-make-emacs-open-all-buffers-in-one-window-debian-linux-gnome
;(setq pop-up-frames 'graphic-only)
(setq pop-up-frames nil)

;;; http://stackoverflow.com/questions/4506249/how-to-make-emacs-org-mode-open-links-to-sites-in-google-chrome
;;; Open up URLs in browser using gnome-open
(setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "gnome-open")

;;; Problems with minibuffer font size display in KDE/Crunchbang/Unity(?), explictily set font
;;; List fonts with M-x descript-font
;(set-default-font "Monospace-10")
))
#+END_SRC
** Darwin settings
#+BEGIN_SRC emacs-lisp
(if *is-a-mac*
   (progn

;; Disable railwaycat's tab bar
;; https://github.com/railwaycat/homebrew-emacsmacport/issues/123
(setq mac-frame-tabbing nil)

;; Don't open up new frames for files dropped on icon, use active frame
(setq ns-pop-up-frames nil)

;;; Drag and drop on the emacs window opens the file in a new buffer instead of appending it to the current buffer
;;; http://stackoverflow.com/questions/3805658/how-to-configure-emacs-drag-and-drop-to-open-instead-of-append-on-osx
(if (fboundp 'ns-find-file)
    (global-set-key [ns-drag-file] 'ns-find-file))

;;; Move deleted files to the System's trash can
;;; set trash-directory otherwise uses freedesktop.org-style
(setq trash-directory "~/.Trash")
(setq delete-by-moving-to-trash t)

;; For Macbook Pro, which has no insert key.
;; http://lists.gnu.org/archive/html/help-gnu-emacs/2006-07/msg00220.html
(global-set-key (kbd "C-c I") (function overwrite-mode))

;;; Open up URLs in mac browser
(setq browse-url-browser-function 'browse-url-default-macosx-browser)
; (setq browse-url-browser-function 'browse-url-default-windows-browser)

;;; Copy and paste into Emacs Terminal
;;; stack overflow, pasting text into emacs on Macintosh
;;; Copy - C-x M-w
;;; Paste - C-x C-y
(defun pt-pbpaste ()
  "Paste data from pasteboard."
  (interactive)
  (shell-command-on-region
    (point)
    (if mark-active (mark) (point))
    "pbpaste" nil t))

(defun pt-pbcopy ()
  "Copy region to pasteboard."
  (interactive)
  (print (mark))
  (when mark-active
    (shell-command-on-region
      (point) (mark) "pbcopy")
    (kill-buffer "*Shell Command Output*")))

(global-set-key [?\C-x ?\C-y] 'pt-pbpaste)
(global-set-key [?\C-x ?\M-w] 'pt-pbcopy)

))
#+END_SRC
* Functions
#+BEGIN_SRC emacs-lisp
;;; ---------------------------------------------------------------------------
;;; https://gist.github.com/mwfogleman/95cc60c87a9323876c6c
;;; http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
(defun narrow-or-widen-dwim ()
  "If the buffer is narrowed, it widens. Otherwise, it narrows to region, or Org subtree."
  (interactive)
  (cond ((buffer-narrowed-p) (widen))
        ((region-active-p) (narrow-to-region (region-beginning) (region-end)))
        ((equal major-mode 'org-mode) (org-narrow-to-subtree))
        (t (error "Please select a region to narrow to"))))
(global-set-key (kbd "C-c n") 'narrow-or-widen-dwim)

;; I bind this key to C-c n, using the bind-key function that comes with use-package.
;(bind-key "C-c n" 'narrow-or-widen-dwim)

;; I also bind it to C-x t n, using Artur Malabarba's toggle map idea:
;; http:://www.endlessparentheses.com/the-toggle-map-and-wizardry.html

;;; ---------------------------------------------------------------------------
;;; Move lines up or down (can't easily use C-S on MacOS)
;;; http://whattheemacsd.com//editing-defuns.el-02.html
(defun move-line-down ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines 1))
    (forward-line)
    (move-to-column col)))

(defun move-line-up ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines -1))
    (move-to-column col)))

;(global-set-key (kbd "<C-S-down>") 'move-line-down)
;(global-set-key (kbd "<C-S-up>") 'move-line-up)
(global-set-key (kbd "<M-S-down>") 'move-line-down)
(global-set-key (kbd "<M-S-up>") 'move-line-up)

;;; ---------------------------------------------------------------------------
;;; Match Paren / based on the vim command using %
;;; http://grok2.tripod.com/
(defun match-paren (arg)
      "Go to the matching paren if on a paren; otherwise insert %."
      (interactive "p")
      (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
            ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
            (t (self-insert-command (or arg 1)))))
(global-set-key "%" 'match-paren)

;;; ---------------------------------------------------------------------------
(defun intelligent-close ()
  "quit a frame the same way no matter what kind of frame you are on.

This method, when bound to C-x C-c, allows you to close an emacs frame the
same way, whether it's the sole window you have open, or whether it's
a \"child\" frame of a \"parent\" frame.  If you're like me, and use emacs in
a windowing environment, you probably have lots of frames open at any given
time.  Well, it's a pain to remember to do Ctrl-x 5 0 to dispose of a child
frame, and to remember to do C-x C-x to close the main frame (and if you're
not careful, doing so will take all the child frames away with it).  This
is my solution to that: an intelligent close-frame operation that works in
all cases (even in an emacs -nw session).

Stolen from http://www.dotemacs.de/dotfiles/BenjaminRutt.emacs.html."
  (interactive)
  (if (eq (car (visible-frame-list)) (selected-frame))
      ;;for parent/master frame...
      (if (> (length (visible-frame-list)) 1)
          ;;close a parent with children present
          (delete-frame (selected-frame))
        ;;close a parent with no children present
        (save-buffers-kill-emacs))
    ;;close a child frame
    (delete-frame (selected-frame))))
(global-set-key "\C-x\C-c" 'intelligent-close) ;forward reference
#+END_SRC

* Better defaults
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; -- better-defaults  (moved into init.el to avoid confusion)
;;; https://github.com/technomancy/better-defaults
;(require 'better-defaults)

;(menu-bar-mode -1) ; was making tabbar tabs on 2nd frame
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(when (fboundp 'horizontal-scroll-bar-mode)
  (horizontal-scroll-bar-mode -1))

(require 'uniquify)
 (setq uniquify-buffer-name-style 'forward)

(require 'saveplace)
  (setq-default save-place t)

(global-set-key (kbd "M-/") 'hippie-expand)
;(global-set-key (kbd "C-x C-b") 'ibuffer) ; set elsewhere in file
;(global-set-key (kbd "M-z") 'zap-up-to-char) ; doesn't exist?

(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

(show-paren-mode 1)
(setq save-interprogram-paste-before-kill t
      apropos-do-all t
      mouse-yank-at-point t
      require-final-newline t
      visible-bell t
      load-prefer-newer t
      ediff-window-setup-function 'ediff-setup-windows-plain
      save-place-file (concat user-emacs-directory "places")
      backup-directory-alist `(("." . ,(concat user-emacs-directory
                                               "backups"))))
#+END_SRC
* Daily log
#+BEGIN_SRC emacs-lisp
;;; -- daily log -

(defun daily-log ()
  "Automatically opens my daily log file and positions cursor at end of
last sentence."
  (interactive)
  ;(diary)
  (find-file "~/org/DailyLogs/+current") ;symlink to current log
  (goto-char (point-max))  ;go to the maximum accessible value of point
  (search-backward "* Notes") ;search to Notes section first to bypass notes
  (if (re-search-backward "[.!?]") ;search for punctuation from end of file
      (forward-char 1))
  )
(global-set-key (kbd "<f9>") 'daily-log)

;;; ---------------------------------------------------------------------------
;(diary)

;; Email 1
;; I have been using a simple system for writing notes day by day.  Kind of
;; like a diary.  It's really very unsophisticated but helpful.  It will allow
;; you to make notes into a template file.  Weeks, Months (etc...) later, you
;; can refer to them.
;;
;; For those who have never seen it
;; http://aonws01/unix-admin/Daily_Logs/Jerry_Sievers/
;;
;; Many of you new guys' questions to me have been answered from these notes
;; (eg, license keys info, who's who and so forth).
;;
;; John Sconiers asked about this and I set him up with it.  Whole procedure
;; takes only a few minutes to install and probably about fifteen minutes per
;; day to keep up to date.  An investment in time that pays off later.  Other
;; admins who have left Aon used this and liked it too.
;;
;; It also comes with a CGI program which, if your home directory is
;; accessible to aonws01, can allow others to browse your diary (I hear
;; cheering and booing...)
;;
;; Please let me know.  It would be nice to have everyone using this thing at
;; least minimally.

;; Email 2
;; Chris, I have installed the package in your home directory.  Files are in
;; Aon/DailyLogs.  The current log has a symbolic link named +Current.  You
;; also have an alias 'diary' which you can type at the shell.  Doing so will
;; invoke vi on the +Current file and position the cursor on the very last '.'
;; character in the file.  I have added the $HOME/bin directory to your path
;; and created one cron job to stamp the 'monday' file weekly.
;;
;; You should run the command 'new-daily-log' once per week to start a new
;; file.  Optionally, the previous file can be emailed to the destination of
;; your choice.  See the Aon/DailyLogs/.config file for details.
;;
;; Please call if you have any questions.
#+END_SRC
* ansible-vault
Minor mode for manipulating ansible-vault files
https://github.com/zellio/ansible-vault-mode

#+begin_src emacs-lisp
(defun ansible-vault-mode-maybe ()
  (when (ansible-vault--is-vault-file)
    (ansible-vault-mode 1)))

(use-package ansible-vault
  :ensure t
  :init (add-hook 'yaml-mode-hook 'ansible-vault-mode-maybe)
  :config (setq ansible-vault-pass-file "~/.vault_core_pass.txt")
)
#+end_src

* deft
#+BEGIN_SRC emacs-lisp
;;; -- deft - an Emacs mode for quickly browsing, filtering, and editing
;;; directories of plain text notes.  http://jblevins.org/projects/deft/
;;; http://jblevins.org/git/deft.git
(use-package deft
  :ensure t
  :bind ("<f8>" . deft-or-close)
        ("C-c C-g" . deft-find-file)
  :commands (deft)
  :config
    (setq
      deft-extensions '("txt" "org" "md")
      deft-directory "~/org/notes"
      deft-text-mode 'org-mode
      deft-use-filename-as-title t
      deft-recursive t
      deft-ignore-file-regexp "archive\.*")

    ;; Notational Velocity provides a show-hide function key, letting you pop
    ;; in-and-out of the interface quickly. I recreated a crude version of this
    ;; in Deft, bound to f6.
    (define-minor-mode deft-note-mode "Deft notes" nil " Deft-Notes" nil)
    (setq deft-text-mode 'deft-note-mode)
    (defun kill-all-deft-notes ()
      (interactive)
      (save-excursion
        (let((count 0))
          (dolist(buffer (buffer-list))
            (set-buffer buffer)
            (when (not (eq nil deft-note-mode))
              (setq count (1+ count))
              (kill-buffer buffer)))
          )))
    (defun deft-or-close () (interactive) (if (or (eq major-mode 'deft-mode) (not (eq nil deft-note-mode)))
                                              (progn (kill-all-deft-notes) (kill-buffer "*Deft*"))
                                            (deft)
                                            ))
)
#+END_SRC
* dired
https://www.gnu.org/software/emacs/manual/dired-x.html
https://www.emacswiki.org/emacs/DiredExtra#Dired_X
provides extra functionality for Dired Mode.

Hide file detail toggle `(`

#+begin_src emacs-lisp
(use-package dired-x
  :ensure nil
  :demand t
  :bind ("C-x C-j"   . dired-jump)
        ("C-x 4 C-j" . dired-jump-other-window)
  :config
     (setq-default dired-omit-files-p t)
     (setq dired-listing-switches "-alhv")
     (setq dired-omit-files "^\\.\\|^#.#$\\|.~$")
     ;(define-key dired-mode-map (kbd "/") #'dired-narrow-fuzzy) ; requires dired-hacks
     (define-key dired-mode-map (kbd "h") #'dired-omit-mode)
     (define-key dired-mode-map (kbd "e") #'read-only-mode)

     ;; Auto-refresh dired on file change
     (add-hook 'dired-mode-hook 'auto-revert-mode)

     ;; disable line wrapping in dired mode
     (add-hook 'dired-mode-hook (lambda () (setq truncate-lines t)))

     ;; enable side-by-side dired buffer targets
     ;; Split your window, split-window-vertically & go to another dired directory.
     ;; When you will press C to copy, the other dir in the split pane will be
     ;; default destination.
     (setq dired-dwim-target t) ;; suggest copying/moving to other dired buffer in split view
)
#+end_src

* elpa-keyring-update
https://elpa.gnu.org/packages/gnu-elpa-keyring-update.html
https://stackoverflow.com/questions/58202993/emacs-failed-to-verify-signature-archive-contents-sig
Old key expired Sep 23, 2019

Required to install elpa packages

#+begin_src emacs-lisp
(use-package gnu-elpa-keyring-update
  :ensure t
  :config
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
)
#+end_src
* git gutter
https://github.com/syohex/emacs-git-gutter
Emacs port of GitGutter which is Sublime Text Plugin
Show icon in gutter area indicating if ins, mod or del

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :ensure t
  :defer 0.3
  :config
    (global-git-gutter-mode t)
)
#+END_SRC
* ibuffer
#+BEGIN_SRC emacs-lisp
;;; -- ibuffer - *Nice* buffer switching
;;
;; ibuffer filtering
;;
;; Search all marked buffers
;;   ‘M-s a C-s’ - Do incremental search in the marked buffers.
;;   ‘M-s a C-M-s’ - Isearch for regexp in the marked buffers.
;;   ‘U’ - Replace by regexp in each of the marked buffers.
;;   ‘Q’ - Query replace in each of the marked buffers.
;;   ‘I’ - As above, with a regular expression.
(use-package ibuffer
  :ensure nil
  :bind ( "C-x C-b" . ibuffer)
  :config
    ;; Don't show empty buffer groups
    (setq ibuffer-show-empty-filter-groups nil)

    ;; work groups for ibuffer
    (setq ibuffer-saved-filter-groups
          '(("default"
             ("version control" (or (mode . svn-status-mode)
                       (mode . svn-log-edit-mode)
                       (name . "^\\*svn-")
                       (name . "^\\*vc\\*$")
                       (name . "^\\*Annotate")
                       (name . "^\\*vc-")
                       (name . "^\\*git-")
                       (name . "^\\*magit")))
             ("emacs" (or (name . "^\\*scratch\\*$")
                          (name . "^\\*Messages\\*$")
                          (name . "^TAGS\\(<[0-9]+>\\)?$")
                          (name . "^\\*info\\*$")
                          (name . "^\\*Occur\\*$")
                          (name . "^\\*grep\\*$")
                          (name . "^\\*Compile-Log\\*$")
                          (name . "^\\*Backtrace\\*$")
                          (name . "^\\*Process List\\*$")
                          (name . "^\\*gud\\*$")
                          (name . "^\\*Man")
                          (name . "^\\*WoMan")
                          (name . "^\\*Kill Ring\\*$")
                          (name . "^\\*Completions\\*$")
                          (name . "^\\*tramp")
                          (name . "^\\*shell\\*$")
                          (name . "^\\*compilation\\*$")))
             ("Helm" (or (name . "\*helm\*")))
             ("Help" (or (name . "\*Help\*")
                         (name . "\*Apropos\*")
                         (name . "\*info\*")))
             ("emacs-source" (or (mode . emacs-lisp-mode)
                                 (filename . "/Applications/Emacs.app")
                                 (filename . "/bin/emacs")))
             ("emacs-config" (or (filename . ".emacs.d")
                                 (filename . "emacs-config")))
            ("org" (or (name . "^\\*org-")
                        (name . "^\\*Org")
                        (mode . org-mode)
                        (mode . muse-mode)
                        (name . "^\\*Calendar\\*$")
                        (name . "^+current$")
                        (name . "^diary$")
                        (name . "^\\*Agenda")))
             ("latex" (or (mode . latex-mode)
                          (mode . LaTeX-mode)
                          (mode . bibtex-mode)
                          (mode . reftex-mode)))
             ("dired" (or (mode . dired-mode)))
             ("perl" (mode . cperl-mode))
             ("erc" (mode . erc-mode))
             ("shell" (or (mode . shell-mode)
                            (name . "^\\*terminal\\*$")
                            (name . "^\\*ansi-term\\*$")
                            (name . "^\\*shell\\*$")
                            (name . "^\\*eshell\\*$")))
             ("gnus" (or (name . "^\\*gnus trace\\*$")
                            (mode . message-mode)
                            (mode . bbdb-mode)
                            (mode . mail-mode)
                            (mode . gnus-group-mode)
                            (mode . gnus-summary-mode)
                            (mode . gnus-article-mode)
                            (name . "^\\.bbdb$")
                            (name . "^\\.newsrc-dribble"))))))

    ;; Order the groups so the order is : [Default], [agenda], [emacs]
    (defadvice ibuffer-generate-filter-groups (after reverse-ibuffer-groups ()
                                                     activate)
      (setq ad-return-value (nreverse ad-return-value)))

    ;; Hide the following buffers
    ;;(setq ibuffer-never-show-predicates
    ;;      (list "\\*Completions\\*"
    ;;            "\\*vc\\*"))

    ;; Enable ibuffer expert mode, don't prompt on buffer deletes
    (setq ibuffer-expert t)

    ;; Load the 'work' group, can set to load groups by location
    ;; ibuffer-auto-mode is a minor mode that automatically keeps the buffer
    ;; list up to date. I turn it on in my ibuffer-mode-hook:
    (add-hook 'ibuffer-mode-hook
              '(lambda ()
                 (ibuffer-auto-mode 1)
                 (ibuffer-switch-to-saved-filter-groups "default")))
)
#+END_SRC

* ispell
https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html
ispell - interactive spell, set ispell checks to use aspell
on mac:  `brew install aspell --lang=en` (instead of ispell)

#+BEGIN_SRC emacs-lisp
(use-package ispell
  :ensure nil
  :defer 0.5
  :custom
     (ispell-program-name "aspell")
     (ispell-list-command "list")
     ;; sug-mode=fast is more accurate, slower then ultra
     (ispell-extra-args '("--sug-mode=fast")))
#+END_SRC
* ivy, swiper, counsel, and counsel-projectile
https://github.com/abo-abo/swiper
http://cestlaz.github.io/posts/using-emacs-6-swiper/
https://www.reddit.com/r/emacs/comments/910pga/tip_how_to_use_ivy_and_its_utilities_in_your/

#+BEGIN_SRC emacs-lisp
;https://github.com/lewang/flx
;Fuzzy matching for Emacs ... a la Sublime Text.
;can be used by ivy - https://oremacs.com/2016/01/06/ivy-flx/
(use-package flx
  :ensure t
)

;;; -- ivy-mode - a generic completion mechanism for Emacs
;;; swiper - an alternative to isearch uses ivy to show overview of all matches
;;; https://github.com/abo-abo/swiper
;;; changed from ("C-s"     . swiper) ;; Ivy-based interface to standard commands
(use-package ivy
  :ensure t
  :defer 0.5
  :init (ivy-mode 1)
  :commands ivy
  :bind (("C-s"     . counsel-grep-or-swiper) ;; swiper for small files, counsel-grep for larger
         ("C-x C-r" . counsel-recentf)
         ("<f6>"    . ivy-resume)
         ("M-x"     . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("<f1> f"  . counsel-describe-function)
         ("<f1> v"  . counsel-describe-variable)
         ("<f1> l"  . counsel-find-library)
         ("<f1> i"  . counsel-info-lookup-symbol)
         ("<f1> u"  . counsel-unicode-char)
         ("C-c G"   . counsel-git) ;;; Ivy-based interface to shell and system tools
         ("C-c j"   . counsel-git-grep)
         ("C-c k"   . counsel-ag)
         ("C-x l"   . counsel-locate)
         ("C-S-o"   . counsel-rhythmbox)
         ("C-r"     . counsel-minibuffer-history)) ;; disable M-x filter
  :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-display-style 'fancy)
    (ivy-use-virtual-buffers t)
    (enable-recursive-minibuffers t)
    (ivy-virtual-abbreviate 'full)
    (ivy-dynamic-exhibit-delay-ms 250)
    (ivy-re-builders-alist
      '((swiper . ivy--regex-plus)    ;disable fuzzy matching for swiper
        (t      . ivy--regex-fuzzy))) ;but enable for ivy
    (ivy-initial-inputs-alist nil)
)
#+END_SRC

ivy-avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind
  (("C-c SPC" . avy-goto-word-1))
  :config
  (setq avy-background t))
#+END_SRC

counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :after ivy
  :config (counsel-mode)
)
#+END_SRC

ivy-rich (can't find package?) - removed
https://github.com/Yevgnen/ivy-rich
#+BEGIN_SRC emacs-lisp
;(use-package ivy-rich
;  :after ivy
;  :custom
;  (ivy-virtual-abbreviate 'full
;                          ivy-rich-switch-buffer-align-virtual-buffer t
;                          ivy-rich-path-style 'abbrev)
;  :config
;  (ivy-set-display-transformer 'ivy-switch-buffer
;                               'ivy-rich-switch-buffer-transformer))
#+END_SRC

swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :after ivy)
#+END_SRC

ivy counsel-projectile
#+BEGIN_SRC emacs-lisp
;; projectile ivy integration
(use-package counsel-projectile
  :ensure t
  :commands counsel-projectile)
#+END_SRC

* magit
https://github.com/magit/magit
It's Magit! A Git porcelain inside Emacs. https://magit.vc

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :defer 5
  :commands magit
  :bind
    (("C-x g" . magit-status)
     ("C-x G" . magit-status-with-prefix)
     ("C-x M-g" . magit-dispatch-popup)
     ("C-c M-g" . global-magit-file-mode))
  :config
    (setq magit-completing-read-function 'ivy-completing-read)
)
#+end_src

* org-mode
#+BEGIN_SRC emacs-lisp
;; Enable easy templates (separated out in org-mode 9.2?), menu of template choices:  C-c C-,
;; https://orgmode.org/manual/Easy-templates.html
;; https://code.orgmode.org/bzg/org-mode/src/master/etc/ORG-NEWS#L65
(use-package org-tempo)

;; Prevent inadvertently edits an the invisible part of the buffer
(setq-default org-catch-invisible-edits 'smart)

;; Load additional exporters, or limit them with:  (setq org-export-backends '(ascii html latex odt))
;(eval-after-load 'org
;      (lambda()
;        (require 'ox-texinfo) ; texi and info
;        (require 'ox-md)      ; markdown
;        (require 'ox-odt)     ; opendoc text
;        (require 'ox-opml)
;        (require 'ox-confluence)))

;; Bind C-h o to org-info
(define-key global-map (kbd "C-h o") 'org-info)

;; The following lines are always needed.  Choose your own keys.
;(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cc" 'org-capture)

;; Set to the location of your Org files on your local system
(setq org-directory "~/org")

;; Open all txt files in org-mode
(add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))


;;; Agenda
;; Agenda window setup
(setq org-agenda-window-setup 'current-window) ;; don't kill my window setup

;; Include emacs diary, not needed if using org-anniversary
;(setq org-agenda-include-diary t)

;; Custom agenda commands
;; http://members.optusnet.com.au/~charles57/GTD/mydotemacs.txt
(setq org-agenda-custom-commands
'(
("P" "Projects"
              ((tags "PROJECT")))

("H" "Office and Home Lists"
     ((agenda)
          (tags-todo "OFFICE")
          (tags-todo "HOME")
          (tags-todo "COMPUTER")
          (tags-todo "DVD")
          (tags-todo "READING")))

("D" "Daily Action List"
     ((agenda "" ((org-agenda-ndays 1)
                     (org-agenda-sorting-strategy
                        (quote ((agenda time-up priority-down tag-up))))
                     (org-deadline-warning-days 0)
                     ))))))


;;; Capture
;; NOTE:  Fibonacci format: 0, 0.5, 1, 2, 3, 5, 8, 13, 20, 40, 100
;; Setup default target for notes and a global hotkey for new ones
;; NOTE:  Need org-mode version 6.3.6 or later for this to work
;; http://stackoverflow.com/questions/3622603/org-mode-setup-problem-when-trying-to-use-capture
(setq org-default-notes-file (expand-file-name "~/org/notes.org"))

;; Capture templates - C-c c t
;; Based on Sacha Chua's org-capture-tempaltes
;; http://pages.sachachua.com/.emacs.d/Sacha.html
(defvar dbj/org-basic-task-template "* TODO %^{Task}
SCHEDULED: %^t

:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(defvar dbj/org-basic-jira-template "* TODO %^{Task}
SCHEDULED: %^t

:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:URL: %^{URL}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(defvar dbj/org-basic-someday-template "* %^{Task}
:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(setq org-capture-templates
      `(("t" "Tasks" entry
          (file "~/org/inbox.org"), dbj/org-basic-task-template)
          ;(file+headline "~/org/inbox.org" "Tasks"), dbj/org-basic-task-template)

        ("j" "Jira" entry
          (file "~/org/inbox.org"), dbj/org-basic-jira-template)

        ("s" "Someday task" entry
          (file "~/org/someday.org"), dbj/org-basic-someday-template)

        ("r" "Reference information" entry
          (file+headline "~/org/reference.org" "Inbox"))

        ("n" "Notes" entry
          (file+headline "~/org/notes.org"))

        ("o" "Journal" entry
          (file+olp+datetree "~/org/journal.org")
          "* %?\nEntered on %U\n  %i\n  %a")
))


;;; Other
;; When adding new heading below the current heading, the new heading is
;; placed after the body instead of before it.  C-<RET>
(setq org-insert-heading-respect-content t)

;; Set Todo keywords, same as:
;; Shortcut key:  C-c C-t
;; #+TODO: TODO(t) INPROGRESS(p) WAITING(w) | DONE(d) CANCELED(c)
(setq org-todo-keywords
      '((sequence "TODO(t)" "INPROGRESS(p)" "WAITING(w@/!)")
        (sequence "|" "DONE(d!)" "CANCELED(c@)")))

;; Set Tags, same as:
;; #+TAGS: home(h) work(w) @computer(c) @phone(p) errants(e)
(setq org-tag-alist '(("@office" . ?o) ("@home" . ?h) ("computer" . ?c)
                      ("phone" . ?p) ("reading" . ?r)))

;; Prevent C-k from killing whole subtrees and losing work
(setq org-special-ctrl-k t)

;; Fontify code buffers in org, instead of grey text
;; This is especially nice when you open an editing buffer with [Ctrl+c ']
;; to insert code into the #+begin_src ... #+end_src area.
(setq org-src-fontify-natively t)

;; org-refile (C-c C-w) settings from:
;; http://www.mail-archive.com/emacs-orgmode@gnu.org/msg34415.html
;; http://doc.norang.ca/org-mode.html#RefileSetup
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets '((org-agenda-files :maxlevel . 2)
                           (nil :maxlevel . 3)))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)
;(setq org-refile-use-outline-path 'file)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))


;; MobileOrg config
;; M-x org-mobile-push - copy org files to ~/Dropbox/MobileOrg
;; M-x org-mobile-pull - integrate remove changes into local org files
;;
;; Set to the location of your Org files on your local system
;(setq org-directory "~/org")
;; Set to the name of the file where new notes will be stored
;(setq org-mobile-inbox-for-pull "~/org/flagged.org")
;; Set to <your Dropbox root directory>/MobileOrg.
;(setq org-mobile-directory "~/Dropbox/Home/MobileOrg")

;;; Strike-through finished todos
;; sachachua.com/blog/2012/12/emacs-strike-through-headlines-for-done-tasks-in-org/
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (:foreground "PaleGreen"
                 :weight normal
                 :strike-through t))))
 '(org-headline-done
            ((((class color) (min-colors 16) (background dark))
               (:foreground "LightSalmon" :strike-through t)))))

;;; Make sure to hightlight mysql sql keywords:
;;; ex. #+BEGIN_SRC sql
;;;        SELECT foo FROM bar
;;;     #+END_SRC
(add-hook 'sql-mode-hook
          (lambda ()
            (sql-highlight-mysql-keywords)))

;;; Enable other org-babel langauges
(org-babel-do-load-languages
  (quote org-babel-load-languages)
  (quote ((emacs-lisp . t)
          ;(asymptote . t) ;Asymptote
          (awk . t)       ;Awk
          (C . t)         ;C
          ;(C++ . t)       ;C++
          ;(clojure . t)   ;Clojure
          ;(css . t)       ;CSS
          ;(d . f)        ;D
          ;(ditaa . f)     ;ditaa
          ;(dot . t)       ;Graphviz
          ;(calc . t)      ; Emacs Calc
          ;(fortran . t)   ;Fortran
          (gnuplot . t)   ;requires gnuplot installed
          ;(haskell . t)   ;Haskell
          (java . t)      ;Java
          (js . t)        ;Javascript
          ;(latex . t)     ;LaTeX
          (ledger . f)    ;Ledger
          (lisp . t)      ;Lisp
          ;(lilypond . t)  ;Lilypond
          ;(lua . t)       ;Lua
          ;(matlab . t)    ;MATLAB
          ;(mscgen . t)    ;Mscgen
          ;(ocaml . t)     ;Objective Caml
          ;(octave . t)    ;octave
          (org . t)       ;Org mode
          ;(oz . f)        ;Oz
          (perl . t)      ;Perl
          ;(plantuml . t)  ;Plantuml
          ;(processing . t) ;Processing.js
          (python . t)    ;Python
          ;(R . t)         ;R
          (ruby . t)      ;Ruby
          ;(sass . t)      ;Sass
          ;(scheme . t)    ;Scheme
          (screen . t)    ;GNU Screen
          (sed . t)       ;Sed
          (shell . t)     ;shell
          (sql . t)       ; SQL
          ;(sqlite .t)     ;SQLite
)))
#+END_SRC
* osx-trash
https://github.com/lunaryorn/osx-trash.el
Make Emacs' delete-by-moving-to-trash do what you expect it to do on OS X.

#+BEGIN_SRC emacs-lisp
(use-package osx-trash
   :ensure t
   :config
   (when (eq system-type 'darwin)
     (osx-trash-setup))
   (setq delete-by-moving-to-trash t)
)
#+END_SRC

* projectile
https://github.com/bbatsov/projectile
http://batsov.com/projectile/
projectile - project managent (works with helm)
Project navigation and management library for Emacs
Keybindings: https://projectile.readthedocs.io/en/latest/usage/

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :defer 5
  :config
    (projectile-mode +1)
    ;(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map) ; super-p
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    ;(define-key projectile-mode-map (kbd "C-c C-p") 'projectile-command-map) ; conflicts with lsp-mode python
    (setq projectile-completion-system 'ivy) ; use ivy for completion
    (setq projectile-enable-caching t) ; enable caching
    (setq projectile-indexing-method 'alien) ; external cmd for indexing
    ;; put bookmark and cache in cache directory
    (setq projectile-known-projects-file (concat user-emacs-directory "cache/projectile-bookmarks.eld"))
    (setq projectile-cache-file (concat user-emacs-directory "cache/projectile.cache"))
)
#+END_SRC
* recentf
https://www.emacswiki.org/emacs/RecentFiles
a minor mode that builds a list of recently opened files
http://www.masteringemacs.org/articles/2011/01/27/find-files-faster-recent-files-package/
(autoload 'recentf "recentf" "List recent files" t)

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :ensure nil
  :init (recentf-mode 1) ;; turn it on
  :custom
     (recentf-save-file "~/.emacs.d/cache/recentf")
     (recentf-auto-cleanup 200)
     (recentf-max-saved-items 200)      ;; max save file cache
     (recentf-max-menu-items 15)      ;; max 15 in menu
    ;(global-set-key "\C-x\ \C-r" 'recentf-open-files)
    ;(global-set-key (kbd "C-x C-r") 'helm-recentf)
)
#+END_SRC
* restclient
https://github.com/pashky/restclient.el
HTTP REST client tool for emacs
#+begin_src emacs-lisp
(use-package restclient
  :ensure t)
#+end_src

* s
https://github.com/magnars/s.el
The long lost Emacs string manipulation library

#+BEGIN_SRC emacs-lisp
(use-package s
  :ensure t)
#+END_SRC
* smex
https://github.com/nonsequitur/smex
A smart M-x enhancement for Emacs.
counsel-M-x re-uses smex while offering extra features.

#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :defer 2
  ;:bind (("M-x" . smex)
  ;       ("M-X" . smex-major-mode-commands))
  :config
  (progn
    (smex-initialize)))
#+END_SRC

* themes
zenburn-theme
https://github.com/bbatsov/zenburn-emacs
The Zenburn colour theme ported to Emacs

#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :ensure t
  :config
  (if (display-graphic-p)
      (load-theme 'zenburn :no-confirm)  ; Emacs in own window (zenburn)
    (load-theme 'wheatgrass :no-confirm)  ; Emacs in tty
  )
)
#+END_SRC
* which-key
https://github.com/justbur/emacs-which-key
Emacs package that displays available keybindings in popup

#+BEGIN_SRC emacs-lisp
(use-package which-key
   :ensure t
  :defer 10
   :config
   (progn
     (setq which-key-popup-type 'side-window) ;Default
      ;; (setq which-key-popup-type 'minibuffer)

      (setq which-key-compute-remaps t) ;Show correct descriptions for remapped keys

      (setq which-key-allow-multiple-replacements t) ;Default = nil
      (which-key-mode))
)
#+END_SRC
* flyceck - causing startup error with company-lsp
#+begin_src emacs-lisp
;(use-package flycheck
;  :ensure t
;  ;:init
;  ;(global-flycheck-mode t)
;)
#+end_src

* company
http://company-mode.github.io/
Company is a text completion framework for Emacs. The name stands for "complete anything".
It uses pluggable back-ends and front-ends to retrieve and display completion candidates.

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)

  (global-company-mode t)
  (setq company-global-modes '(not org-mode))
)
#+end_src

* yasnippet
https://github.com/joaotavora/yasnippet
A template system for Emacs http://joaotavora.github.com/yasnippet/

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
)
#+END_SRC
* python
# https://github.com/pyenv/pyenv-virtualenvwrapper
# brew install pyenv-virtualenvwrapper
# (for linux:  git clone https://github.com/pyenv/pyenv-virtualenvwrapper.git $(pyenv root)/plugins/pyenv-virtualenvwrapper)
#
# Instlall virtualenv: pip install virtualenv (this is a PITA to maintain, trying to not use it)
# Create virtualenv: virtualenv -p python3 ~/.virtualenvs/p3 (or mkvirtualenv p3)
# or, for python3:  python3 -m venv ~/.virtualenvs/p3
# enable: workon p3
# or, for python3:  cd ~/.virtualenvs/p3/bin; source ./activate
# stop:   deactivate p3
# or, for python3:  deactivate

# Setup virtualenv with pyenv, activate with: M-x pyenv-workon python3-emacs
pyenv virtualenv 3.8.0 python3-emacs
pyenv local python3-emacs
pyenv versions

pip install --upgrade pip
#pip install virtualenv
pip install 'python-language-server[all]'
pip install flake8 flake8-docstrings flake8-polyfill flake8-quotes flake8-string-format pep8 pep8-naming

--

To run code in emacs:
M-x python-mode
C-c C-p : run-python
C-c C-c : python-shell-send-buffer

C-c C-z : open a python shell
C-c C-c : run the content of the buffer in the opened python shell
C-c C-r : run the selected region in the python shell

C-c C-c       python-shell-send-buffer
C-c C-d       python-describe-at-point
C-c C-f       python-eldoc-at-point
C-c C-j       imenu
C-c C-l       python-shell-send-file
C-c C-p       run-python
C-c C-r       python-shell-send-region
C-c C-s       python-shell-send-string
C-c C-t       Prefix Command
C-c C-v       python-check
C-c C-z       python-shell-switch-to-shell
C-c <     python-indent-shift-left
C-c >     python-indent-shift-right

C-c C-t c python-skeleton-class
C-c C-t d python-skeleton-def
C-c C-t f python-skeleton-for
C-c C-t i python-skeleton-if
C-c C-t m python-skeleton-import
C-c C-t t python-skeleton-try
C-c C-t w python-skeleton-while

;#+begin_src emacs-lisp
;(use-package virtualenvwrapper
;  :ensure t
;  :config
;  (venv-initialize-interactive-shells)
;  (venv-initialize-eshell))
;
;(venv-workon "p3")
;(setq lsp-python-executable-cmd "python3")
;#+end_src

#+begin_src emacs-lisp
(use-package pyvenv
  :ensure t
  :init
  (add-to-list 'exec-path "~/.pyenv/shims")
  (setenv "WORKON_HOME" "~/.pyenv/versions/")
  :config
  (pyvenv-mode 1)
  ;:bind
  ;("C-x p e" . pyenv-activate-current-project)
)
#+end_src

* live-py-plugin
https://www.youtube.com/watch?v=bYy90EUAh98

https://github.com/donkirkby/live-py-plugin
Live coding in Python with PyCharm, Emacs, Sublime Text, or even a browser

#+begin_src emacs-lisp
(use-package live-py-mode
  :ensure t
  :defer t
)
#+end_src

* lsp-mode
https://github.com/emacs-lsp/lsp-mode
Emacs client/library for the Language Server Protocol

Install python lsp:
  workon p3
  pip install 'python-language-server[all]'

;; company-lsp: Company completion backend for lsp-mode
#+begin_src emacs-lisp
(use-package company-lsp
  :ensure t
  :config
  (setq company-lsp-enable-snippet t)
  (push 'company-lsp company-backends)
)
#+end_src

#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :commands lsp
  :custom
  (lsp-auto-guess-root nil)
  ;(lsp-prefer-flymake nil) ; Use flycheck instead of flymake
  ;; but now errors with: Error (use-package): company-lsp/:catch: Symbol’s function definition is void: flycheck-define-generic-checker
  :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
  :hook ((python-mode) . lsp)
  :config
  (setq lsp-pyls-server-command '("~/.pyenv/shims/pyls"))
)

(use-package lsp-ui
  :after lsp-mode
  :ensure t
  :diminish
  :commands lsp-ui-mode
  :custom-face
  (lsp-ui-doc-background ((t (:background nil))))
  (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)
              ("C-c u" . lsp-ui-imenu))
  :custom
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-header t)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-position 'top)
  (lsp-ui-doc-border (face-foreground 'default))
  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-ignore-duplicate t)
  (lsp-ui-sideline-show-code-actions nil)
  :config
  ;; Use lsp-ui-doc-webkit only in GUI
  (setq lsp-ui-doc-use-webkit t)
  ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
  ;; https://github.com/emacs-lsp/lsp-ui/issues/243
  (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
    (setq mode-line-format nil))
)
#+end_src
* vterm
https://github.com/akermu/emacs-libvterm
Emacs libvterm integration

# build on Mac
cd .emacs.d
brew install libvterm cmake libtool (renamed as glibtool)
cd ~/.emacs.d
git clone git@github.com:akermu/emacs-libvterm.git
mkdir -p build
cd build
cmake ..
make

#+begin_src emacs-lisp
(use-package vterm
  :load-path  "~/.emacs.d/emacs-libvterm/"
  :defer t
  :config
  (define-key vterm-mode-map [return] #'vterm-send-return)
)
#+end_src
