#-*- mode: org; fill-column: 78 -*-
#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent

# TODO:  hydra, swiper, counsel, org, ripgrep, fasd, expand-region

* Init
Transfered from ~/.emacs.d/init.el
Moved use-package and org-plus-contrib back to init.el to fix org-version

#+begin_src emacs-lisp
;;; emacs-init.el --- -*- lexical-binding: t -*-
;;; https://nullprogram.com/blog/2016/12/22/

;; whoami?
(setq
 user-full-name "Douglas Jackson"
 user-mail-address "hpotter@hogworts.edu")

;; more useful frame title, that show either a file or a
;; buffer name (if the buffer isn't visiting a file)
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))

;;;; Load Customizations if they exist
;; https://lupan.pl/dotemacs/
;(setq custom-file "~/Sync/elisp/custom.el")
;(load custom-file 'noerror)
(setq custom-file "~/Sync/elisp/custom.el")
(if (file-exists-p custom-file)
    (load custom-file))

;; keep customize settings in their own file
;(setq custom-file "~/.emacs.d/custom.el")
;(when (file-exists-p custom-file)
;  (load custom-file))

;;;; Add 'info' and 'elisp' to load-path (C-h v load-path RET)
(add-to-list 'Info-default-directory-list "~/.emacs.d/info")
(add-to-list 'load-path "~/.emacs.d/elisp/") ;; elisp packages not in pkg manager

;;; Reload .emacs file by typing: M-x reload-config
(defun reload-config () "Reloads .emacs interactively."
  (interactive)
  (load "~/.emacs.d/init.el"))

;;;; Only start server if it is not currently running
;(require 'server) ;; Note: (start-server) is now mostly deprecated
(load "server")
(setq server-socket-dir "~/.emacs.d/tmp")
(unless (server-running-p) (server-start))
#+end_src

* Performance Optimization
** Garbage Collection
Make startup faster by reducing the frequency of garbage collection. Set gc-cons-threshold (the default is 800 kilobytes) to maximum value available, to prevent any garbage collection from happening during load time.

Note: tangle to early-init.el to make startup even faster?
#+Begin_src emacs-lisp
(setq gc-cons-threshold most-positive-fixnum)
#+end_src

Restore it to reasonable value after init.
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook (lambda () (setq gc-cons-threshold 20971520)))  ; 20mb
#+end_src

** Emacs Start Up Profiler
Benchmark Emacs startup time.

#+begin_src emacs-lisp
;(use-package esup
;  :ensure t
;  :commands esup)
#+end_src

* Emacs Core
Configuring built in packages

** enable disabled functions
#+BEGIN_SRC emacs-lisp
;; Upcase and downcase regions
;(put 'upcase-region 'disabled nil)  ;C-x C-u
;(put 'downcase-region 'disabled nil)  ;C-x C-l

;; Sets the current horizontal position for C-n and C-p
(put 'set-goal-column 'disabled nil)

;; Restrict buffer editing to a region
;; Text Narrowing commands:
;;   Region: C-x n n, Page: C-x n p
;;   Funct: C-x n p, Widen: C-x n w
;;   Subtree in Org-Mode:   C-x n s
(put 'narrow-to-region 'disabled nil)

;; Dired functions (find-alternate 'a' reuses dired buffer)
(put 'dired-find-alternate-file 'disabled nil)

;; Goal Column, enter C-x C-n, at point to set column that C-n should go to
;; to clear enter C-u C-x C-n
(put 'set-goal-column 'disabled nil)

;; https://www.emacswiki.org/emacs/ZapUpToChar
(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR.")
(global-set-key (kbd "M-z") 'zap-up-to-char)

;; And disable electric-indent if active, added in Emacs 24.4
(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
#+END_SRC

** global key bindings
#+BEGIN_SRC emacs-lisp
;;; test out electric buffer mode - disabled, nice, but navigation highlighted every line
;;; also, buffer management (deleting, etc) wasn't as polisihed as iBuffer
;(global-set-key (kbd "C-x C-b") 'electric-buffer-list)

;;; https://stackoverflow.com/questions/93058/emacs-switching-to-another-frame-mac-os-x
; Re-enable swap frames with M-`
(global-set-key "\M-`" 'other-frame)

;; Open an Emacs eshell, shell, or term
(global-set-key (kbd "C-c e") 'eshell)
(global-set-key (kbd "C-c s") 'shell)
;(global-set-key (kbd "C-c t") 'term)
(global-set-key (kbd "C-c t") 'ansi-term)

;; Show a summery of all registers with content
(global-set-key (kbd "C-x r v") 'list-registers)

;; Move through windows in reverse order of (other-window), C-x o
(global-set-key (kbd "C-x O") 'previous-multiframe-window)

;; Invoke M-x without the Alt key (from Steve Yegge's blog)
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)
#+END_SRC

** global settings
#+begin_src emacs-lisp

;; disable company-mode completions in shells
(add-hook 'shell-mode-hook (lambda () (company-mode -1)) 'append)
(add-hook 'eshell-mode-hook (lambda () (company-mode -1)) 'append)

;; set default shell to zsh
(setq explicit-shell-file-name "/bin/zsh")
(setq shell-file-name "zsh")
(setq explicit-bash.exe-args '("--noediting" "--login" "-i"))
(setenv "SHELL" shell-file-name)

;; Remove trailing whitespace on save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; automatically follow symlinks to files under version control without prompting
(setq vc-follow-symlinks t)

;; Garbage-collect on focus-out, Emacs /should/ feel snappier.
;; Warning (bytecomp): ‘focus-out-hook’ is an obsolete variable (as of 27.1); after-focus-change-function
;(add-hook 'focus-out-hook #'garbage-collect)
;(add-hook 'after-focus-change-function #'garbage-collect)

;;; Kill line backwards
;;; http://emacsredux.com/blog/2013/04/08/kill-line-backward/
(global-set-key (kbd "C-<backspace>") (lambda ()
                                        (interactive)
                                        (kill-line 0)
                                        (indent-according-to-mode)))

;;; Ping settings (from net-util.el)
;;; http://www.masteringemacs.org/articles/2011/03/02/network-utilities-emacs/
(defvar ping-program-options)
(setq ping-program-options '("-c" "4"))

;;; Enable whitespace-mode for diff buffers
;;; http://stackoverflow.com/questions/11805584/automatically-enable-whitespace-mode-in-diff-mode
(add-hook 'diff-mode-hook
          '(lambda ()
            (whitespace-mode 1)))

;;; Mouse wheel and keyboard scroll settings
;;; scroll one line at a time (less "jumpy" than defaults)
;(setq mouse-wheel-follow-mouse 't)     ;scroll window under mouse
;(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil))) ;1 line
;(setq mouse-wheel-progressive-speed 'nil) ;'nil disables accelerated scrolling
;(setq scroll-step 1                    ;keyboard scroll one line at a time
;      scroll-preserve-screen-position t
;      scroll-conservatively 10000)     ;smooth scrolling

;;; Enable holidays in Calendar
(setq mark-holidays-in-calendar t)

;;; Address the issue of Emacs's lack of a vi-like "O" command
;;; http://stackoverflow.com/questions/2173324/emacs-equivalents-of-vims-dd-o-o
;;; Open line above: C-o  Open line below: C-n C-o  Kill whole line: C-S-Bcksp

;(defadvice open-line (around vi-style-open-line activate)
;  "Make open-line behave more like vi."
;  (beginning-of-line)
;  ad-do-it
;  (indent-according-to-mode))

;; w/o-man mode (elisp man page formater for systems without 'man')
(defvar woman-show-log)
(defvar woman-cache-filename)
(setq woman-show-log nil)
(autoload 'woman "woman"
  "Decode and browse a Unix man page." t)
(setq woman-cache-filename "~/.emacs.d/cache/woman_cache.el")

;;; Make tooltips appear in the echo area (checks if function exists)
(tooltip-mode nil)

;; Use CUA mode for rectangles (C-RET to select, normal emacs keys to copy)
;;; http://emacs-fu.blogspot.com/2010/01/rectangles-and-cua.html
(setq cua-enable-cua-keys nil)  ;; only for rectangles, keeps (C-c, C-v, C-x).
(cua-mode t)
;; Emacs 24.4 introduces rectangle-mark-mode, C-x SPC, but not quite as useful
;(cua-mode t)
;(setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
;(transient-mark-mode 1) ;; No region when it is not highlighted
;(setq cua-keep-region-after-copy t) ;; Standard Windows behaviour

;;; Don't show the startup screen
(setq inhibit-startup-message t)

;;; Disable startup message in scratch buffer
(setq-default initial-scratch-message nil)
;;; And set scratch buffer initial mode to text instead of lisp eval
;(setq-default initial-major-mode 'text-mode)
;;; Don't create new lines when pressing 'arrow-down key' at end of the buffer
(setq next-line-add-newlines nil)

;;; Fix delete key working as backspace and not forward deleting
;;; (This only worked in window mode, not terminal. C-d works in both)
(when window-system (normal-erase-is-backspace-mode 1))

;;; Alias to change apropos to ap
(defalias 'ap 'apropos)

;;; hl-line: highlight the current line
(when (fboundp 'global-hl-line-mode)
  (global-hl-line-mode t)) ;; turn it on for all modes by default

;;; Make text mode default major mode with auto-fill enabled
(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode) ;replaces longlines in 23

;;; Auto-scroll in *Compilation* buffer
(setq compilation-scroll-output t)

;;; make Emacs always indent using SPC characters and never TABs
;;; i.e. use spaces instead of tabs
;;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Just-Spaces.html
(setq-default indent-tabs-mode nil)

;;; "y or n" instead of "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)

;;; Highlight regions and add special behaviors to regions.
;;; "C-h d transient" for more info.  transient-mark-mode is a toggle.
;;; also in Emacs 22 and greater, C-SPC twice to temp enable transient mark
;(setq transient-mark-mode nil)
(setq transient-mark-mode t)

;;; Display line and column numbers in the mode line
(setq line-number-mode    t
      column-number-mode  t)

;;; Stop blinking cursor
(blink-cursor-mode 0)

;;; Explicitly show the end of a buffer (indicated on left fringe of window)
(set-default 'indicate-empty-lines t)

;;; Line-wrapping
(set-default 'fill-column 78)

;; Don't truncate lines
(setq truncate-lines t
      truncate-partial-width-windows nil)

;; Create new scratch buffer if needed
(run-with-idle-timer 1 t
    '(lambda () (get-buffer-create "*scratch*")))

;; allow scroll-down/up-command to move point to buffer end/beginning
;(setq scroll-error-top-bottom 'true)

;; New json-mode
(setq auto-mode-alist (cons '("\\.json\\'" . js-mode) auto-mode-alist))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bookmarks
;;    ‘C-x r m’ – set a bookmark at the current location (e.g. in a file)
;;    ‘C-x r b’ – jump to a bookmark
;;    ‘C-x r l’ – list your bookmarks
;;    ‘M-x bookmark-delete’ – delete a bookmark by name
(setq
  bookmark-default-file "~/.bookmarks"    ;; .emacs.d/bookmarks by default
  bookmark-save-flag 1)                   ;; autosave each change)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

** functions
#+begin_src emacs-lisp
;;; ---------------------------------------------------------------------------
;;; https://stackoverflow.com/questions/8881649/how-to-force-org-mode-to-open-a-link-in-another-frame
;;; Open link at point in new frame
(defun zin/org-open-other-frame ()
  "Jump to bookmark in another frame. See `bookmark-jump' for more."
  (interactive)
  (let ((org-link-frame-setup (acons 'file 'find-file-other-frame org-link-frame-setup)))
    (org-open-at-point)))
(global-set-key (kbd "C-c 5 C-o") 'zin/org-open-other-frame)

;;; ---------------------------------------------------------------------------
;;; https://gist.github.com/mwfogleman/95cc60c87a9323876c6c
;;; http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
(defun narrow-or-widen-dwim ()
  "If the buffer is narrowed, it widens. Otherwise, it narrows to region, or Org subtree."
  (interactive)
  (cond ((buffer-narrowed-p) (widen))
        ((region-active-p) (narrow-to-region (region-beginning) (region-end)))
        ((equal major-mode 'org-mode) (org-narrow-to-subtree))
        (t (error "Please select a region to narrow to"))))
(global-set-key (kbd "C-c x") 'narrow-or-widen-dwim)  ; was: C-c n

;; I bind this key to C-c n, using the bind-key function that comes with use-package.
;(bind-key "C-c n" 'narrow-or-widen-dwim)

;; I also bind it to C-x t n, using Artur Malabarba's toggle map idea:
;; http:://www.endlessparentheses.com/the-toggle-map-and-wizardry.html

;;; ---------------------------------------------------------------------------
;;; Move lines up or down (can't easily use C-S on MacOS)
;;; http://whattheemacsd.com//editing-defuns.el-02.html
(defun move-line-down ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines 1))
    (forward-line)
    (move-to-column col)))

(defun move-line-up ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines -1))
    (move-to-column col)))

;(global-set-key (kbd "<C-S-down>") 'move-line-down)
;(global-set-key (kbd "<C-S-up>") 'move-line-up)
(global-set-key (kbd "<M-S-down>") 'move-line-down)
(global-set-key (kbd "<M-S-up>") 'move-line-up)

;;; ---------------------------------------------------------------------------
;;; Match Paren / based on the vim command using %
;;; http://grok2.tripod.com/
(defun match-paren (arg)
      "Go to the matching paren if on a paren; otherwise insert %."
      (interactive "p")
      (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
            ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
            (t (self-insert-command (or arg 1)))))
(global-set-key "%" 'match-paren)

;;; ---------------------------------------------------------------------------
(defun intelligent-close ()
  "quit a frame the same way no matter what kind of frame you are on.

This method, when bound to C-x C-c, allows you to close an emacs frame the
same way, whether it's the sole window you have open, or whether it's
a \"child\" frame of a \"parent\" frame.  If you're like me, and use emacs in
a windowing environment, you probably have lots of frames open at any given
time.  Well, it's a pain to remember to do Ctrl-x 5 0 to dispose of a child
frame, and to remember to do C-x C-x to close the main frame (and if you're
not careful, doing so will take all the child frames away with it).  This
is my solution to that: an intelligent close-frame operation that works in
all cases (even in an emacs -nw session).

Stolen from http://www.dotemacs.de/dotfiles/BenjaminRutt.emacs.html."
  (interactive)
  (if (eq (car (visible-frame-list)) (selected-frame))
      ;;for parent/master frame...
      (if (> (length (visible-frame-list)) 1)
          ;;close a parent with children present
          (delete-frame (selected-frame))
        ;;close a parent with no children present
        (save-buffers-kill-emacs))
    ;;close a child frame
    (delete-frame (selected-frame))))
(global-set-key "\C-x\C-c" 'intelligent-close) ;forward reference
#+end_src

** Better Defaults Package
https://github.com/technomancy/better-defaults
A small number of better defaults for Emacs

#+BEGIN_SRC emacs-lisp

;; moved to early-init.el
;(menu-bar-mode -1) ; was making tabbar tabs on 2nd frame
;(when (fboundp 'tool-bar-mode)
;  (tool-bar-mode -1))
;(when (fboundp 'scroll-bar-mode)
;  (scroll-bar-mode -1))
;(when (fboundp 'horizontal-scroll-bar-mode)
;  (horizontal-scroll-bar-mode -1))

(require 'uniquify)
 (setq uniquify-buffer-name-style 'forward)

(require 'saveplace)
  (setq-default save-place t)

(global-set-key (kbd "M-/") 'hippie-expand)
;(global-set-key (kbd "C-x C-b") 'ibuffer) ; set elsewhere in file
;(global-set-key (kbd "M-z") 'zap-up-to-char) ; doesn't exist?

;; Replace by Ivy and Swiper
;(global-set-key (kbd "C-s") 'isearch-forward-regexp)
;(global-set-key (kbd "C-r") 'isearch-backward-regexp)
;(global-set-key (kbd "C-M-s") 'isearch-forward)
;(global-set-key (kbd "C-M-r") 'isearch-backward)

(show-paren-mode 1)
(setq save-interprogram-paste-before-kill t
      apropos-do-all t
      mouse-yank-at-point t
      require-final-newline t
      visible-bell t
      load-prefer-newer t
      ediff-window-setup-function 'ediff-setup-windows-plain
      save-place-file (concat user-emacs-directory "places")
      backup-directory-alist `(("." . ,(concat user-emacs-directory
                                               "backups"))))
#+END_SRC
** Helpful
Helpful is an alternative to the built-in Emacs help that provides much more contextual information.
https://github.com/Wilfred/helpful

#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :bind
  (("C-h f" . helpful-callable)
   ("C-h v" . helpful-variable)
   ("C-h k" . helpful-key)
  ;;
  ;; Lookup the current symbol at point. C-c C-d is a common keybinding
  ;; for this in lisp modes.
  ;("C-c C-d" . helpful-at-point)  # keys already bound to Cal Deadline

  ;; Look up *F*unctions (excludes macros).
  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
  ;; already links to the manual, if a function is referenced there.
  ("C-h F" . helpful-function)

  ;; Look up *C*ommands.
  ;;
  ;; By default, C-h C is bound to describe `describe-coding-system'. I
  ;; don't find this very useful, but it's frequently useful to only
  ;; look at interactive functions.
  ("C-h C" . helpful-command)
))
#+end_src

** Winner mode
WinnerMode lets you undo and redo window configurations. It's included
by default, so we just need to turn it on.
https://www.emacswiki.org/emacs/WinnerMode

key commands: ‘C-c left’ and ‘C-c right’

#+begin_src emacs-lisp
  (when (fboundp 'winner-mode)
    (winner-mode 1))
#+end_src

** Savehist
https://www.reddit.com/r/emacs/comments/gqsz8u/weekly_tipstricketc_thread/
prawnandcocktail

I was trying to make a nice setup for recentf but then I realized I could just enable savehist-mode and search the minibuffer history, by doing C-x C-f C-r. So what it the benefit of recentf-mode? Is it just for people who open files outside of find-file?

#+begin_src emacs-lisp
;; Enable mini-buffer history save feature
;; Also added for recentf replacement
(setq savehist-file "~/.emacs.d/cache/savehist"
  history-length 1000
  history-delete-duplicates t
  savehist-save-minibuffer-history t
  savehist-additional-variables    ;; also save...
    '(kill-ring search-ring regexp-search-ring log-edit-comment-ring))
(savehist-mode 1)


;;Savehist growing too large:
;;https://www.reddit.com/r/emacs/comments/i961nn/emacs_dragged_down_by_massive_history_file/
;(setq savehist-file "~/.config/emacs/savehist"
;  history-length 1000
;  history-delete-duplicates t
;  savehist-save-minibuffer-history t
;  savehist-additional-variables    ;; also save...
;    '(kill-ring search-ring regexp-search-ring log-edit-comment-ring))
; (savehist-mode 1)
;
; ;; Found my savehist was HUGE and locking up emacs every 5 min
; (put 'savehist-minibuffer-history-variables 'history-length 50)
; (put 'org-read-date-history                 'history-length 50)
; (put 'read-expression-history               'history-length 50)
; (put 'org-table-formula-history             'history-length 50)
; (put 'extended-command-history              'history-length 50)
; (put 'ido-file-history                      'history-length 50)
; (put 'helm-M-x-input-history                'history-length 50)
; (put 'minibuffer-history                    'history-length 50)
; (put 'ido-buffer-history                    'history-length 50)
; (put 'buffer-name-history                   'history-length 50)
; (put 'file-name-history                     'history-length 50)
#+end_src
* Su/Sudo
read-only files will be writable but if you attempt to save your modifications, emacs will ask root user’s password if needed. Can save pw to ~/.authinfo.
https://github.com/PythonNut/su.el

NOTE: Installed in elisp, no package

#+begin_src emacs-lisp
(use-package su
  ;:straight (:host github :repo "PythonNut/su.el")
  :config (su-mode +1))
#+end_src

* Navigation
** Winum
Window numbers for Emacs: Navigate your windows and frames using numbers
https://github.com/deb0ch/emacs-winum

#+begin_src emacs-lisp
(use-package winum
  :ensure t
  :bind*
  (
   ("C-`" . winum-select-window-by-number)
   ;("M-0" . winum-select-window-0-or-10)
   ("M-1" . winum-select-window-1)
   ("M-2" . winum-select-window-2)
   ("M-3" . winum-select-window-3)
   ("M-4" . winum-select-window-4)
   ("M-5" . winum-select-window-5)
   ("M-6" . winum-select-window-6)
   ("M-7" . winum-select-window-7)
   ("M-8" . winum-select-window-8)
   ("M-9" . winum-select-window-9))
  :config
  (winum-mode))
#+end_src
** Treemacs
A tree layout file explorer for Emacs
https://github.com/Alexander-Miller/treemacs

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :disabled t ;disables use-package customizations only
  :defer t
  ;:custom
  ;(treemacs-width 20)
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  ;:bind
  ;("M-0" . treemacs-select-window)
  :config
    (progn
  (setq treemacs-persist-file (expand-file-name "cache/treemacs-persist" user-emacs-directory))

  ;; The default width and height of the icons is 22 pixels. If you are
  ;; using a Hi-DPI display, uncomment this to double the icon size.
  ;;(treemacs-resize-icons 44)

  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode t)
  (pcase (cons (not (null (executable-find "git")))
               (not (null treemacs-python-executable)))
    (`(t . t)
     (treemacs-git-mode 'deferred))
    (`(t . _)
     (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ;("C-x t 1"   . treemacs-delete-other-windows) ;delete all other tabs
        ("C-x t t"   . treemacs)
        ;("C-x t B"   . treemacs-bookmark) ;switch to buffer in other tab
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag))
)
#+end_src

Treemacs Projectile
Projectile integration, the treemacs-projectile package lets you quickly add your projectile projects to the treemacs workspace.
#+begin_src emacs-lisp
(use-package treemacs-projectile
  :ensure t
  :after treemacs projectile
)

;;; Removing, caused stringp, null error for Dailylogs
;;; Also, looked neat, but slowed treemacs/dired down
;;(use-package treemacs-icons-dired
;;  :after treemacs dired
;;  :ensure t
;;  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
#+end_src

** Mwim (Move Where I Mean)
This Emacs package provides several commands to switch between various line positions, like moving to the beginning/end of code, line or comment. It is inspired by this EmacsWiki page (some code from this page is used). mwim stands for Move Where I Mean.
https://github.com/alezost/mwim.el

#+begin_src emacs-lisp
(use-package mwim
  :ensure t
  :bind
  (("C-a" . mwim-beginning-of-code-or-line)
   ("C-e" . mwim-end-of-code-or-line)))
#+end_src
** Ace Window
The [[https://github.com/abo-abo/ace-window][ace-window]] package provides functions to quickly switch between
windows. The main =ace-window= command will either switch to the one
other open window or let you select another window by typing the first
letters of the its label. Additionally, this package can swap and
delete windows.

#+begin_src emacs-lisp
(use-package ace-window
  :init (setq aw-scope 'frame)
  :bind (("M-o" . ace-window)))
#+end_src

** Avy
avy is a GNU Emacs package for jumping to visible text using a char-based decision tree. See also ace-jump-mode and vim-easymotion - avy uses the same idea.
https://github.com/Wilfred/deadgrep

#+begin_src emacs-lisp
(use-package avy
  :ensure t
  :config
  (avy-setup-default)
  :bind
  (("M-g w" . avy-goto-word-or-subword-1)
   ("M-g b" . avy-pop-mark))
)
#+end_src
* OS specific
** MacOS
#+begin_src emacs-lisp
(cond ((eq system-type 'darwin)
;	(setq mac-command-modifier 'meta
;	      mac-option-modifier 'alt
;	      mac-right-option-modifier 'super)

;; set keys for Apple keyboard, for emacs in OS X
(setq mac-command-modifier 'meta) ; make cmd key do Meta
(setq mac-option-modifier 'super) ; make opt key do Super
(setq mac-control-modifier 'control) ; make Control key do Control
;(setq ns-function-modifier 'hyper)  ; make Fn key do Hyper

;; Use meta +/- to change text size
(bind-key "M-+" 'text-scale-increase)
(bind-key "M-=" 'text-scale-increase)
(bind-key "M--" 'text-scale-decrease)

;; This is copied from
;; https://zzamboni.org/post/my-emacs-configuration-with-commentary/
(defun my/text-scale-reset ()
  "Reset text-scale to 0."
  (interactive)
  (text-scale-set 0))
(bind-key "M-g 0" 'my/text-scale-reset)

;;; set font size to 15, overriding default 12
; M-x describe-font:
; Monaco:pixelsize=12:weight=normal:slant=normal:width=normal:spacing=100:scalable=true
;(set-face-attribute 'default (selected-frame) :height 150)
(set-face-attribute 'default nil :height 150)

;; Osx-trash
;; Make Emacs' delete-by-moving-to-trash do what you expect it to do on OS X.
;; https://github.com/lunaryorn/osx-trash.el
;(use-package osx-trash
;   :ensure t
;   :config
;   (setq delete-by-moving-to-trash t)
;   (osx-trash-setup)
;)

;; Disable railwaycat's tab bar
;; https://github.com/railwaycat/homebrew-emacsmacport/issues/123
(defvar mac-frame-tabbing)
(setq mac-frame-tabbing nil)

;; Don't open up new frames for files dropped on icon, use active frame
(defvar ns-pop-up-frames)
(setq ns-pop-up-frames nil)

;; Drag and drop on the emacs window opens the file in a new buffer instead of
;; appending it to the current buffer
;; http://stackoverflow.com/questions/3805658/how-to-configure-emacs-drag-and-drop-to-open-instead-of-append-on-osx
(if (fboundp 'ns-find-file)
    (global-set-key [ns-drag-file] 'ns-find-file))

;; Move deleted files to the System's trash can
;; set trash-directory otherwise uses freedesktop.org-style
(setq trash-directory "~/.Trash")
(setq delete-by-moving-to-trash t)

;; Macbook Pro has no insert key.
;; http://lists.gnu.org/archive/html/help-gnu-emacs/2006-07/msg00220.html
(global-set-key (kbd "C-c I") (function overwrite-mode))

;;; Open up URLs in mac browser
(setq browse-url-browser-function 'browse-url-default-macosx-browser)
; (setq browse-url-browser-function 'browse-url-default-windows-browser)

;;; Copy and paste into Emacs Terminal
;;; stack overflow, pasting text into emacs on Macintosh
;;; Copy - C-x M-w
;;; Paste - C-x C-y
(defun pt-pbpaste ()
  "Paste data from pasteboard."
  (interactive)
  (shell-command-on-region
    (point)
    (if mark-active (mark) (point))
    "pbpaste" nil t))

(defun pt-pbcopy ()
  "Copy region to pasteboard."
  (interactive)
  (print (mark))
  (when mark-active
    (shell-command-on-region
      (point) (mark) "pbcopy")
    (kill-buffer "*Shell Command Output*")))
(global-set-key [C-x C-y] 'pt-pbpaste)
(global-set-key [C-x M-w] 'pt-pbcopy)

;; add the missing man page path for woman
;; https://www.reddit.com/r/emacs/comments/ig7zzo/weekly_tipstricketc_thread/
;(add-to-list 'woman-manpath
;             "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/share/man")
;(add-to-list 'woman-manpath
;             "/Applications/Xcode.app/Contents/Developer/usr/share/man")
;(add-to-list 'woman-manpath
;             "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/share/man")

;; On a Mac: make Emacs detect if you have light or dark mode enabled system wide.
;;If you have two themes, a light one and a dark one, and you want the dark theme by default unless you have light mode enabled, add this to your init.el:

;; If we're on a Mac and the file "~/bin/get_dark.osascript" exists
;; and it outputs "false", activate light mode. Otherwise activate
;; dark mode.
;(cond ((and (file-exists-p "~/bin/get_dark.osascript")
;	     (string> (shell-command-to-string "command -v osascript") "")
;	     (equal "false\n"
;		    (shell-command-to-string "osascript ~/bin/get_dark.osascript")))
;	(mcj/theme-set-light))
;      (t (mcj/theme-set-dark)))

;; (mcj/theme-set-light and mcj/theme-set-light are functions that enable the light and the dark theme, respectively).

;;~/bin/get_dark.osascript contains the following:
;;
;;tell application "System Events"
;;	  tell appearance preferences
;;		get dark mode
;;	  end tell
;;end tell
))
#+end_src

** Linux
#+begin_src emacs-lisp
;; -=Linux specific settings
(cond ((eq system-type 'gnu/linux)
(defvar browse-url-browser-function)
(defvar browse-url-browser-program)
;;; http://stackoverflow.com/questions/15277172/how-to-make-emacs-open-all-buffers-in-one-window-debian-linux-gnome
;(setq pop-up-frames 'graphic-only)
(setq pop-up-frames nil)

;;; http://stackoverflow.com/questions/4506249/how-to-make-emacs-org-mode-open-links-to-sites-in-google-chrome
;;; Open up URLs in browser using gnome-open (errors on bytecompile)
;(setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "gnome-open")
(setq browse-url-browser-function 'browse-url-firefox)

;;; Problems with minibuffer font size display in KDE/Crunchbang/Unity(?), explictily set font
;;; List fonts with M-x descript-font
;(set-default-font "Monospace-10")
))
#+end_src
* Search
** Deadgrep
Deadgrep is the fast, beautiful text search that your Emacs deserves.
https://github.com/Wilfred/deadgrep
NOTE: Install ripgrep. You need version 0.8 or later.

Keybindings
|-------------+----------------------------------------------------------------|
| Key         | Action                                                         |
|-------------+----------------------------------------------------------------|
| RET         | Visit the result, file or push button at point                 |
| o           | Visit the result in another window                             |
| n and p     | Move between results or buttons                                |
| N and P     | Move between search hits                                       |
| M-n and M-p | Move between file headers                                      |
| g           | Re-run the search                                              |
| TAB         | Expand/collapse results for a file                             |
| C-c C-k     | Stop a running search                                          |
| C-u         | prefix argument prevents searches from starting automatically. |
|-------------+----------------------------------------------------------------|
You can also use M-x imenu to move between files in a results buffer.

#+begin_src emacs-lisp
;(use-package deadgrep
;  :ensure t
;  :commands deadgrep
;  :bind
;  (
;   :map deadgrep-mode-map
;   ("C-c C-e" . deadgrep-edit-mode))) ; C-c C-e is org-export
#+end_src
** rg - ripgrep
Emacs search tool based on ripgrep https://rgel.readthedocs.io
https://github.com/dajva/rg.el
Docs: https://rgel.readthedocs.io/en/latest/usage.html

#+begin_src emacs-lisp
(use-package rg
  :ensure t
  :defer t
  :bind ("M-s" . rg-dwim)
        ;("C-x s" . rg-project)
        ("M-S" . rg-project)
  :config
  ;(rg-enable-menu)
  (rg-enable-default-bindings)
  ;(add-hook 'rg-mode-hook 'wgrep-ag-setup)
  ;(setq rg-show-columns t
  ;      rg-show-header t
  ;      rg-command-line-flags (list "-uuu")
  ;)
  ;(bind-keys :map rg-mode-map
  ;           ("W" . wgrep-change-to-wgrep-mode))
)
#+end_src
* Appearance
** Disable all themes before loading a theme

#+begin_src emacs-lisp
(defadvice load-theme (before disable-themes-first activate)
  (fk/disable-all-themes))

(defun fk/disable-all-themes ()
  "Disable all active themes."
  (interactive)
  (dolist (theme custom-enabled-themes)
    (disable-theme theme)))
#+end_src

** load-theme without annoying confirmation
#+begin_src emacs-lisp
(advice-add 'load-theme
            :around
            (lambda (fn theme &optional no-confirm no-enable)
              (funcall fn theme t)))
#+end_src

** all-the-icons - commented out
Prerequisite for a few packages (e.g. treemacs, all-the-icons-dired)
"M-x all-the-icons-install-fonts" to install fonts at the first time.
https://github.com/domtronn/all-the-icons.el

#+begin_src emacs-lisp
;(use-package all-the-icons
;  :ensure t)
#+end_src

** Dracula Theme
dracula-theme with telephone line status bar
https://github.com/dracula/emacs
https://www.reddit.com/r/emacs/comments/he55jl/whats_the_funky_character_on_the_mode_line/
#+begin_src emacs-lisp
(use-package dracula-theme
  :ensure t
  :init
  (setq dracula-enlarge-headings nil)
  (setq dracula-alternate-mode-line-and-minibuffer t)
  :config
  (if (display-graphic-p)
      (load-theme 'dracula :no-confirm)	 ; Emacs in own window (zenburn)
    (load-theme 'wheatgrass :no-confirm)  ; Emacs in tty
  )
)

 ;; too small
 ;(set-face-attribute 'default nil
 ;        	      :family "JetBrains Mono"
 ;        	      :foundry "outline"
 ;        	      :slant 'normal
 ;        	      :weight 'normal
 ;        	      :height 120
 ;        	      :width 'semi-condensed)

 ;; need to investigate
 ;(add-hook 'display-line-numbers-mode-hook
 ;            (lambda ()
 ;              (set-face-attribute 'line-number nil
 ;        			  :weight 'normal)
 ;              (set-face-attribute 'line-number-current-line nil
 ;        			  :foreground (face-attribute 'cursor :background)
 ;        			  :weight 'bold
 ;        			  :slant 'normal))
 ;)
#+end_src

** Darcula Theme from Jetbrains
JetBrains Darcula (Default Dark) for Emacs
https://github.com/ianpan870102/jetbrains-darcula-emacs-theme

Commented out for now, its very dark

#+begin_src emacs-lisp
;(use-package darcula-theme
;  :ensure t
  ;:init
  ;(setq dracula-enlarge-headings nil)
  ;(setq dracula-alternate-mode-line-and-minibuffer t)
  ;:config
  ;(if (display-graphic-p)
  ;    (load-theme 'darcula :no-confirm)	 ; Emacs in own window
  ;  (load-theme 'wheatgrass :no-confirm)  ; Emacs in tty
  ;)
;)
#+end_src

** Telephone line modeline - commented out
https://www.reddit.com/r/emacs/comments/3g75kf/introducing_telephoneline_a_new_implementation_of/
https://github.com/dbordak/telephone-line

#+begin_src emacs-lisp
;(use-package telephone-line
;  :ensure t
;  :init
;  (telephone-line-mode 1)
;)
#+end_src

* Flx (Fuzzy matching)
Fuzzy matching for Emacs ... a la Sublime Text.
can be used by ivy - https://oremacs.com/2016/01/06/ivy-flx/
https://github.com/lewang/flx

#+BEGIN_SRC emacs-lisp
(use-package flx
  :ensure t
)
#+END_SRC

* Ivy (Completions)
ivy-mode - a generic completion mechanism for Emacs
swiper - an alternative to isearch uses ivy to show overview of all matches
https://github.com/abo-abo/swiper
changed from ("C-s"     . swiper) ;; Ivy-based interface to standard commands
https://www.reddit.com/r/emacs/comments/910pga/tip_how_to_use_ivy_and_its_utilities_in_your/
https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html
#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :defer 0.5
  :init (ivy-mode 1)
  :commands ivy
  :bind (("C-s"     . counsel-grep-or-swiper) ;; swiper for small files, counsel-grep for large
         ;("C-x C-r" . counsel-recentf)
         ("C-x C-r" . ivy-resume)
         ("<f6>"    . ivy-resume)
         ("M-x"     . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("<f1> f"  . counsel-describe-function)
         ("<f1> v"  . counsel-describe-variable)
         ("<f1> o"  . counsel-describe-symbol)
         ("<f1> l"  . counsel-find-library)
         ("<f1> i"  . counsel-info-lookup-symbol)
         ("<f1> u"  . counsel-unicode-char)
         ("C-c g"   . counsel-git) ;;; Ivy-based interface to shell and system tools
         ("C-c j"   . counsel-git-grep)
         ("C-c k"   . counsel-ag)
         ("C-x l"   . counsel-locate)
         ("C-S-o"   . counsel-rhythmbox)
         ("C-r"     . counsel-minibuffer-history)) ;; disable M-x filter
  :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-display-style 'fancy)
    (ivy-use-virtual-buffers t)
    (enable-recursive-minibuffers t)
    (ivy-virtual-abbreviate 'full)
    (ivy-dynamic-exhibit-delay-ms 250)
    (ivy-re-builders-alist
      '((swiper . ivy--regex-plus)    ;disable fuzzy matching for swiper
        (t      . ivy--regex-fuzzy))) ;but enable for ivy
    (ivy-initial-inputs-alist nil)
)
#+end_src

all-the-icons-ivy (interesting, but seems to be Kanji?)
Ivy/Counsel integration for all-the-icons.el
https://github.com/asok/all-the-icons-ivy
#+begin_src emacs-lisp
;(use-package all-the-icons-ivy
;  :ensure t
;  :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
#+end_src

Swiper
NOTE: ivy-resume continues swpier with same search
https://github.com/abo-abo/swiper
http://cestlaz.github.io/posts/using-emacs-6-swiper/
#+begin_src emacs-lisp
(use-package swiper
  :ensure t
  :requires (ivy))
#+end_src

Counsel
ivy-mode ensures that any Emacs command using completing-read-function uses ivy for completion.

Counsel takes this further, providing versions of common Emacs commands that are customised to make the best use of ivy. For example, counsel-find-file has some additional keybindings. Pressing DEL will move you to the parent directory.
https://github.com/abo-abo/swiper
NOTE: if smex is installed, counsel will use it to sort by most recently used
#+begin_src emacs-lisp
(use-package counsel
  ;:disabled
  :ensure t
  :config
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  ;(global-set-key (kbd "C-c a") 'counsel-ag) ; conflicts with org-agenda
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
#+end_src

* Counsel-projectile
Projectile has native support for using ivy as its completion system. Counsel-projectile provides further ivy integration into projectile by taking advantage of ivy's support for selecting from a list of actions and applying an action without leaving the completion session.
https://github.com/ericdanan/counsel-projectile

#+begin_src emacs-lisp
(use-package counsel-projectile
  :ensure t
  :commands counsel-projectile)
#+end_src

* Company (Code & Text Completion)
** Company
Company is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates.
https://github.com/company-mode/company-mode
Homepage: http://company-mode.github.io/

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)
  (setq company-global-modes '(not org-mode eshell-mode shell-mode lisp-interaction-mode))
  (add-hook 'after-init-hook 'global-company-mode)
)
#+end_src

** Company Box
A company front-end with icons.
https://github.com/sebastiencs/company-box

#+begin_src emacs-lisp
(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode))
#+end_src

** Company Statistics
Company-statistics is a global minor mode built on top of the in-buffer completion system company-mode. The idea is to keep a log of a certain number of completions you choose, along with some context information, and use that to rank candidates the next time you have to choose — hopefully showing you likelier candidates at the top of the list.
https://github.com/company-mode/company-statistics

#+begin_src emacs-lisp
(use-package company-statistics
  :ensure t
  :hook (company-mode . company-statistics-mode)
  :config
  (setq company-statistics-file "~/.emacs.d/cache/company-statistics-cache.el")
)
#+end_src
* Daily log
#+begin_src emacs-lisp
;;; -- daily log -

(defun daily-log ()
  "Automatically opens my daily log file and positions cursor at end of
last sentence."
  (interactive)
  ;(diary)
  (find-file "~/org/DailyLogs/+current") ;symlink to current log
  (goto-char (point-max))  ;go to the maximum accessible value of point
  (search-backward "* Notes") ;search to Notes section first to bypass notes
  (if (re-search-backward "[.!?]") ;search for punctuation from end of file
      (forward-char 1))
  )
(global-set-key (kbd "<f9>") 'daily-log)

;;; ---------------------------------------------------------------------------
;(diary)

;; Email 1
;; I have been using a simple system for writing notes day by day.  Kind of
;; like a diary.  It's really very unsophisticated but helpful.  It will allow
;; you to make notes into a template file.  Weeks, Months (etc...) later, you
;; can refer to them.
;;
;; For those who have never seen it
;; http://aonws01/unix-admin/Daily_Logs/Jerry_Sievers/
;;
;; Many of you new guys' questions to me have been answered from these notes
;; (eg, license keys info, who's who and so forth).
;;
;; John Sconiers asked about this and I set him up with it.  Whole procedure
;; takes only a few minutes to install and probably about fifteen minutes per
;; day to keep up to date.  An investment in time that pays off later.  Other
;; admins who have left Aon used this and liked it too.
;;
;; It also comes with a CGI program which, if your home directory is
;; accessible to aonws01, can allow others to browse your diary (I hear
;; cheering and booing...)
;;
;; Please let me know.  It would be nice to have everyone using this thing at
;; least minimally.

;; Email 2
;; Chris, I have installed the package in your home directory.  Files are in
;; Aon/DailyLogs.  The current log has a symbolic link named +Current.  You
;; also have an alias 'diary' which you can type at the shell.  Doing so will
;; invoke vi on the +Current file and position the cursor on the very last '.'
;; character in the file.  I have added the $HOME/bin directory to your path
;; and created one cron job to stamp the 'monday' file weekly.
;;
;; You should run the command 'new-daily-log' once per week to start a new
;; file.  Optionally, the previous file can be emailed to the destination of
;; your choice.  See the Aon/DailyLogs/.config file for details.
;;
;; Please call if you have any questions.
#+end_src

* Delsel
C-c C-g always quits minubuffer

#+begin_src emacs-lisp
(use-package delsel
  :bind
  (:map mode-specific-map
        ("C-g" . minibuffer-keyboard-quit)))
#+end_src
* Dired
https://www.gnu.org/software/emacs/manual/dired-x.html
https://www.emacswiki.org/emacs/DiredExtra#Dired_X
provides extra functionality for Dired Mode.

Hide file detail toggle `(`

#+begin_src emacs-lisp
(use-package dired-x
  :ensure nil
  :demand t
  :bind ("C-x C-j"   . dired-jump)
        ("C-x 4 C-j" . dired-jump-other-window)
  :config
     (setq-default dired-omit-files-p t)
     (setq dired-listing-switches "-alhv")
     (setq dired-omit-files "^\\.\\|^#.#$\\|.~$")
     ;(define-key dired-mode-map (kbd "/") #'dired-narrow-fuzzy) ; requires dired-hacks
     (define-key dired-mode-map (kbd "h") #'dired-omit-mode)
     (define-key dired-mode-map (kbd "e") #'read-only-mode)

     ;; Auto-refresh dired on file change
     (add-hook 'dired-mode-hook 'auto-revert-mode)

     ;; disable line wrapping in dired mode
     (add-hook 'dired-mode-hook (lambda () (setq truncate-lines t)))

     ;; enable side-by-side dired buffer targets
     ;; Split your window, split-window-vertically & go to another dired directory.
     ;; When you will press C to copy, the other dir in the split pane will be
     ;; default destination.
     (setq dired-dwim-target t) ;; suggest copying/moving to other dired buffer in split view
)
#+end_src

dired-launch
https://github.com/thomp/dired-launch
#+begin_src emacs-lisp
;(use-package dired-launch
;  :ensure t
;  :config
;  ;; use xdg-open as the default launcher
;  (setq dired-launch-default-launcher '("xdg-open"))
;  bind the 'l' key to dired-launch-command
;  (define-key dired-launch-mode-map (kbd "l") 'dired-launch-command)
;)

(use-package dired-launch
  :ensure t
  :hook
  (dired-mode . dired-launch-mode)
)
#+end_src

Open alternative to test from Xah Lee
#+begin_src emacs-lisp
;(defun xah-open-in-external-app (&optional @fname)
;  "Open the current file or dired marked files in external app.
;The app is chosen from your OS's preference.
;
;When called in emacs lisp, if @fname is given, open that.
;
;URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
;Version 2019-11-04"
;  (interactive)
;  (let* (
;         ($file-list
;          (if @fname
;              (progn (list @fname))
;            (if (string-equal major-mode "dired-mode")
;                (dired-get-marked-files)
;              (list (buffer-file-name)))))
;         ($do-it-p (if (<= (length $file-list) 5)
;                       t
;                     (y-or-n-p "Open more than 5 files? "))))
;    (when $do-it-p
;      (cond
;       ((string-equal system-type "windows-nt")
;        (mapc
;         (lambda ($fpath)
;           (w32-shell-execute "open" $fpath)) $file-list))
;       ((string-equal system-type "darwin")
;        (mapc
;         (lambda ($fpath)
;           (shell-command
;            (concat "open " (shell-quote-argument $fpath))))  $file-list))
;       ((string-equal system-type "gnu/linux")
;        (mapc
;         (lambda ($fpath) (let ((process-connection-type nil))
;                            (start-process "" nil "xdg-open" $fpath))) $file-list))))))
;
;;(define-key dired-mode-map (kbd "M-<return>") 'xah-open-in-external-app)
#+end_src

* Eshell
From zamandsky
https://github.com/zamansky/dot-emacs

#+begin_src emacs-lisp
;; Run commands from eterm in an emacs term session
;; https://www.reddit.com/r/emacs/comments/gksqhl/emacs_eshell_demo/
;; ex:  in-term uptime
(defun eshell/in-term (prog &rest args)
  (switch-to-buffer
    (apply #'make-term (format "in-term %s %s" prog args) prog nil args))
  (term-mode)
  (term-char-mode))

;; save pwd to kill ring for later use
(setq eshell-pwd-convert-function #'kill-new)

;; Broken out into its own section
;(use-package exec-path-from-shell
;  :ensure t
;  :config
;  (exec-path-from-shell-initialize)
;)

(use-package eshell-git-prompt
  :ensure t
  :config
  (eshell-git-prompt-use-theme 'git-radar)
)
#+end_src

* Exec-path-from-shell
A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell
https://github.com/purcell/exec-path-from-shell

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize)
)
#+end_src

* Flycheck (Check program syntax)
Modern on-the-fly syntax checking extension for GNU Emacs
https://github.com/flycheck/flycheck
Homepage: https://www.flycheck.org/en/latest/

Install syntax checker for languages
python: pip install pylint

error on lsp-mode start: Error processing message: void-function flycheck-define-generic-checker

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  ;:init (global-flycheck-mode)
  :init (add-hook 'after-init-hook #'global-flycheck-mode)
  :config
  (setq-default flycheck-global-modes '(not org-mode))
)
#+end_src

* Flyspell (Correct spelling)
Correcting misspelled words with flyspell using favourite interface.
https://github.com/d12frosted/flyspell-correct/blob/master/README.org
https://emacs.stackexchange.com/questions/31300/can-you-turn-on-flyspell-for-comments-but-not-strings

Mac: brew install aspell

#+begin_src emacs-lisp
(use-package flyspell
  :init
  ;(progn
  ;  (flyspell-mode 1))
  :hook ((prog-mode . flyspell-prog-mode)
         (org-mode  . turn-off-flyspell)
         (text-mode . flyspell-mode))
  :config
  (progn
    (setq ispell-program-name "aspell")
    (setq ispell-list-command "--list")
    (setq ispell-extra-args '("--sug-mode=fast" "--lang=en_US"))
) ;; run flyspell with aspell, not ispell
)

;; Correcting misspelled words with flyspell using favourite interface.
;; https://github.com/d12frosted/flyspell-correct
(use-package flyspell-correct
  :ensure t
  :after flyspell
)

(use-package flyspell-correct-ivy
  :ensure t
  :after flyspell-correct
  :bind ("C-M-;" . flyspell-correct-wrapper)
  :init
  (setq flyspell-correct-interface #'flyspell-correct-ivy))
#+end_src

* Ibuffer
https://www.emacswiki.org/emacs/IbufferMode
ibuffer - *Nice* buffer switching

Search all marked buffers
  ‘M-s a C-s’ - Do incremental search in the marked buffers.
  ‘M-s a C-M-s’ - Isearch for regexp in the marked buffers.
  ‘U’ - Replace by regexp in each of the marked buffers.
  ‘Q’ - Query replace in each of the marked buffers.
  ‘I’ - As above, with a regular expression.

#+begin_src emacs-lisp
(use-package ibuffer
  :ensure nil
  :bind ("C-x C-b" . ibuffer)
  :config
    ;; Don't show empty buffer groups
    (setq ibuffer-show-empty-filter-groups nil)

    ;; work groups for ibuffer
    (setq ibuffer-saved-filter-groups
          '(("default"
             ("version control" (or (mode . svn-status-mode)
                       (mode . svn-log-edit-mode)
                       (name . "^\\*svn-")
                       (name . "^\\*vc\\*$")
                       (name . "^\\*Annotate")
                       (name . "^\\*vc-")
                       (name . "^\\*git-")
                       (name . "^\\*magit")))
             ("emacs" (or (name . "^\\*scratch\\*$")
                          (name . "^\\*Messages\\*$")
                          (name . "^TAGS\\(<[0-9]+>\\)?$")
                          (name . "^\\*info\\*$")
                          (name . "^\\*Occur\\*$")
                          (name . "^\\*grep\\*$")
                          (name . "^\\*Compile-Log\\*$")
                          (name . "^\\*Backtrace\\*$")
                          (name . "^\\*Process List\\*$")
                          (name . "^\\*gud\\*$")
                          (name . "^\\*Man")
                          (name . "^\\*WoMan")
                          (name . "^\\*Kill Ring\\*$")
                          (name . "^\\*Completions\\*$")
                          (name . "^\\*tramp")
                          (name . "^\\*shell\\*$")
                          (name . "^\\*compilation\\*$")))
             ("Helm" (or (name . "\*helm\*")))
             ("Help" (or (name . "\*Help\*")
                         (name . "\*Apropos\*")
                         (name . "\*info\*")))
             ("emacs-source" (or (mode . emacs-lisp-mode)
                                 (filename . "/Applications/Emacs.app")
                                 (filename . "/bin/emacs")))
             ("emacs-config" (or (filename . ".emacs.d")
                                 (filename . "emacs-config")))
            ("org" (or (name . "^\\*org-")
                        (name . "^\\*Org")
                        (mode . org-mode)
                        (mode . muse-mode)
                        (name . "^\\*Calendar\\*$")
                        (name . "^+current$")
                        (name . "^diary$")
                        (name . "^\\*Agenda")))
             ("latex" (or (mode . latex-mode)
                          (mode . LaTeX-mode)
                          (mode . bibtex-mode)
                          (mode . reftex-mode)))
             ("dired" (or (mode . dired-mode)))
             ("perl" (mode . cperl-mode))
             ("erc" (mode . erc-mode))
             ("shell" (or (mode . shell-mode)
                            (name . "^\\*terminal\\*$")
                            (name . "^\\*ansi-term\\*$")
                            (name . "^\\*shell\\*$")
                            (name . "^\\*eshell\\*$")))
             ("gnus" (or (name . "^\\*gnus trace\\*$")
                            (mode . message-mode)
                            (mode . bbdb-mode)
                            (mode . mail-mode)
                            (mode . gnus-group-mode)
                            (mode . gnus-summary-mode)
                            (mode . gnus-article-mode)
                            (name . "^\\.bbdb$")
                            (name . "^\\.newsrc-dribble"))))))

    ;; Order the groups so the order is : [Default], [agenda], [emacs]
    (defadvice ibuffer-generate-filter-groups (after reverse-ibuffer-groups ()
                                                     activate)
      (setq ad-return-value (nreverse ad-return-value)))

    ;; Hide the following buffers
    ;;(setq ibuffer-never-show-predicates
    ;;      (list "\\*Completions\\*"
    ;;            "\\*vc\\*"))

    ;; Enable ibuffer expert mode, don't prompt on buffer deletes
    (setq ibuffer-expert t)

    ;; Load the 'work' group, can set to load groups by location
    ;; ibuffer-auto-mode is a minor mode that automatically keeps the buffer
    ;; list up to date. I turn it on in my ibuffer-mode-hook:
    (add-hook 'ibuffer-mode-hook
              '(lambda ()
                 (ibuffer-auto-mode 1)
                 (ibuffer-switch-to-saved-filter-groups "default")))
)
#+end_src

* Multiple Cursors
Multiple cursors for Emacs
https://github.com/magnars/multiple-cursors.el

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . 'mc/edit-lines)
         ("C->" . 'mc/mark-next-like-this)
         ("C-<" . 'mc/mark-previous-like-this)
         ("C-c C-<" . 'mc/mark-all-like-this)))
#+end_src

* Org-mode
** Hightlight TODOs
Highlight TODO and similar keywords in comments and strings
https://github.com/tarsius/hl-todo

#+begin_src emacs-lisp
(use-package hl-todo
  :ensure t
  :custom
  ;; Better hl-todo colors, taken from spacemacs
  (hl-todo-keyword-faces '(("TODO" . "#dc752f")
                           ("NEXT" . "#dc752f")
                           ("THEM" . "#2d9574")
                           ("PROG" . "#4f97d7")
                           ("OKAY" . "#4f97d7")
                           ("DONT" . "#f2241f")
                           ("FAIL" . "#f2241f")
                           ("DONE" . "#86dc2f")
                           ("NOTE" . "#b1951d")
                           ("KLUDGE" . "#b1951d")
                           ("HACK" . "#b1951d")
                           ("TEMP" . "#b1951d")
                           ("QUESTION" . "#b1951d")
                           ("HOLD" . "#dc752f")
                           ("FIXME" . "#dc752f")
                           ("XXX+" . "#dc752f")))
  :config
  (global-hl-todo-mode))
#+end_src

** Org
#+BEGIN_SRC emacs-lisp
;; moved to init.el to override built-in org
;(use-package org
;  :defer t
;  ;; to be sure we have the latest Org version
;  :ensure org-plus-contrib
;  :hook
;  ;(org-mode . variable-pitch-mode)
;  (org-mode . visual-line-mode)
;  ;(org-mode . org-num-mode)
;  :custom
;  (org-src-tab-acts-natively t))

(use-package calendar
  :ensure nil
  :custom
  (calendar-week-start-day 0))

;(use-package org-passwords
;  :ensure org-plus-contrib
;  :bind
;  (:map org-mode-map
;        ("C-c C-p p" . org-passwords-copy-password)
;        ("C-c C-p u" . org-passwords-copy-username)
;        ("C-c C-p o" . org-passwords-open-url)))

;;; https://github.com/sabof/org-bullets
;(use-package org-bullets
;  :ensure t
;  :custom
;  ;; org-bullets-bullet-list
;  ;; default: "◉ ○ ✸ ✿"
;  ;; large: ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
;  ;; Small: ► • ★ ▸
;  (org-bullets-bullet-list '("•"))
;  ;; others: ▼, ↴, ⬎, ⤷,…, and ⋱.
;  ;; (org-ellipsis "⤵")
;  (org-ellipsis "…")
;  :hook
;  (org-mode . org-bullets-mode))

;;; org-superstar (replacement for org-bullets)
;;; https://github.com/integral-dw/org-superstar-mode
(use-package org-superstar
  :ensure t
  :custom
  ;(org-superstar-headline-bullets-list '("◉" "○" "✸" "✿"))
  ;(org-superstar-bullet-list '("•"))
  (org-superstar-bullet-list '("■" "◆" "▲" "▶"))
  :hook
  (org-mode . org-superstar-mode)
)

;; Enable easy templates (separated out in org-mode 9.2?), menu of template choices:  C-c C-,
;; https://orgmode.org/manual/Easy-templates.html
;; https://code.orgmode.org/bzg/org-mode/src/master/etc/ORG-NEWS#L65
(use-package org-tempo)

;; Prevent inadvertently edits an the invisible part of the buffer
(setq-default org-catch-invisible-edits 'smart)

;; Load additional exporters, or limit them with:  (setq org-export-backends '(ascii html latex odt))
;(eval-after-load 'org
;      (lambda()
;        (require 'ox-texinfo) ; texi and info
;        (require 'ox-md)      ; markdown
;        (require 'ox-odt)     ; opendoc text
;        (require 'ox-opml)
;        (require 'ox-confluence)))

;; Bind C-h o to org-info
(define-key global-map (kbd "C-h o") 'org-info)

;; The following lines are always needed.  Choose your own keys.
;(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cc" 'org-capture)

;; Set to the location of your Org files on your local system
(setq org-directory "~/org")

;; Open all txt files in org-mode
(add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))


;;; Agenda
;; Agenda window setup
(setq org-agenda-window-setup 'current-window) ;; don't kill my window setup

;; Include emacs diary, not needed if using org-anniversary
;(setq org-agenda-include-diary t)

;; Custom agenda commands
;; http://members.optusnet.com.au/~charles57/GTD/mydotemacs.txt
(setq org-agenda-custom-commands
'(
("P" "Projects"
              ((tags "PROJECT")))

("H" "Office and Home Lists"
     ((agenda)
          (tags-todo "OFFICE")
          (tags-todo "HOME")
          (tags-todo "COMPUTER")
          (tags-todo "DVD")
          (tags-todo "READING")))

;("D" "Daily Action List"
;     ((agenda "" ((org-agenda-ndays 1)
;                     (org-agenda-sorting-strategy
;                        (quote ((agenda time-up priority-down tag-up))))
;                     (org-deadline-warning-days 0)
;                     ))))

("d" "Do today"
   ;; Show all todos and everything due today.
   ((agenda "" (
                ;; Limits the agenda to a single day
                (org-agenda-span 1)
                ))
    (todo "TODO")))

("D" "Deadline due"
     ((tags-todo "+TODO=\"TODO\"+DEADLINE<=\"<today>\""
                 ((org-agenda-overriding-header "Deadline today")))
      (tags-todo "+TODO=\"TODO\"+DEADLINE=\"\""
                 ((org-agenda-overriding-header "No deadline")))))

))


;;; Capture
;; NOTE:  Fibonacci format: 0, 0.5, 1, 2, 3, 5, 8, 13, 20, 40, 100
;; Setup default target for notes and a global hotkey for new ones
;; NOTE:  Need org-mode version 6.3.6 or later for this to work
;; http://stackoverflow.com/questions/3622603/org-mode-setup-problem-when-trying-to-use-capture
(setq org-default-notes-file (expand-file-name "~/org/notes.org"))

;; Capture templates - C-c c t
;; Based on Sacha Chua's org-capture-tempaltes
;; http://pages.sachachua.com/.emacs.d/Sacha.html
(defvar dbj/org-basic-task-template "* TODO %^{Task}
SCHEDULED: %^t

:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(defvar dbj/org-basic-jira-template "* TODO %^{Task}
SCHEDULED: %^t

:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:URL: %^{URL}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(defvar dbj/org-basic-someday-template "* %^{Task}
:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(setq org-capture-templates
      `(("t" "Tasks" entry
          (file "~/org/inbox.org"), dbj/org-basic-task-template)
          ;(file+headline "~/org/inbox.org" "Tasks"), dbj/org-basic-task-template)

        ("j" "Jira" entry
          (file "~/org/inbox.org"), dbj/org-basic-jira-template)

        ("s" "Someday task" entry
          (file "~/org/someday.org"), dbj/org-basic-someday-template)

        ("r" "Reference information" entry
          (file+headline "~/org/reference.org" "Inbox"))

        ("n" "Notes" entry
          (file+headline "~/org/notes.org"))

        ("o" "Journal" entry
          (file+olp+datetree "~/org/journal.org")
          "* %?\nEntered on %U\n  %i\n  %a")
))


;;; Other
;; When adding new heading below the current heading, the new heading is
;; Placed after the body instead of before it.  C-<RET>
(setq org-insert-heading-respect-content t)

;; Set Todo keywords, same as:
;; Shortcut key:  C-c C-t
;; #+TODO: TODO(t) INPROGRESS(p) WAITING(w) | DONE(d) CANCELED(c)
(setq org-todo-keywords
      '((sequence "TODO(t)" "INPROGRESS(p)" "WAITING(w@/!)")
        (sequence "|" "DONE(d!)" "CANCELED(c@)")))

;; Set Tags, same as:
;; #+TAGS: home(h) work(w) @computer(c) @phone(p) errants(e)
(setq org-tag-alist '(("@office" . ?o) ("@home" . ?h) ("computer" . ?c)
                      ("phone" . ?p) ("reading" . ?r)))

;; Prevent C-k from killing whole subtrees and losing work
(setq org-special-ctrl-k t)

;; Fontify code buffers in org, instead of grey text
;; This is especially nice when you open an editing buffer with [Ctrl+c ']
;; to insert code into the #+begin_src ... #+end_src area.
(setq org-src-fontify-natively t)

;; org-refile (C-c C-w) settings from:
;; http://www.mail-archive.com/emacs-orgmode@gnu.org/msg34415.html
;; http://doc.norang.ca/org-mode.html#RefileSetup
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets '((org-agenda-files :maxlevel . 2)
                           (nil :maxlevel . 3)))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)
;(setq org-refile-use-outline-path 'file)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))


;; MobileOrg config
;; M-x org-mobile-push - copy org files to ~/Dropbox/MobileOrg
;; M-x org-mobile-pull - integrate remove changes into local org files
;;
;; Set to the location of your Org files on your local system
;(setq org-directory "~/org")
;; Set to the name of the file where new notes will be stored
;(setq org-mobile-inbox-for-pull "~/org/flagged.org")
;; Set to <your Dropbox root directory>/MobileOrg.
;(setq org-mobile-directory "~/Dropbox/Home/MobileOrg")

;;; Strike-through finished todos
;; sachachua.com/blog/2012/12/emacs-strike-through-headlines-for-done-tasks-in-org/
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (:foreground "PaleGreen"
                 :weight normal
                 :strike-through t))))
 '(org-headline-done
            ((((class color) (min-colors 16) (background dark))
               (:foreground "LightSalmon" :strike-through t)))))

;;; Make sure to hightlight mysql sql keywords: - errors on compile
;;; ex. #+BEGIN_SRC sql
;;;        SELECT foo FROM bar
;;;     #+END_SRC
;(add-hook 'sql-mode-hook
;          (lambda ()
;            (sql-highlight-mysql-keywords)))

;;; Enable other org-babel langauges
(org-babel-do-load-languages
  (quote org-babel-load-languages)
  (quote ((emacs-lisp . t)
          ;(asymptote . t) ;Asymptote
          (awk . t)       ;Awk
          (C . t)         ;C
          ;(C++ . t)       ;C++
          ;(clojure . t)   ;Clojure
          ;(css . t)       ;CSS
          ;(d . f)        ;D
          ;(ditaa . f)     ;ditaa
          ;(dot . t)       ;Graphviz
          ;(calc . t)      ; Emacs Calc
          ;(fortran . t)   ;Fortran
          ;(gnuplot . t)   ;requires gnuplot installed
          ;(haskell . t)   ;Haskell
          (java . t)      ;Java
          (js . t)        ;Javascript
          ;(latex . t)     ;LaTeX
          ;(ledger . f)    ;Ledger
          (lisp . t)      ;Lisp
          ;(lilypond . t)  ;Lilypond
          ;(lua . t)       ;Lua
          ;(matlab . t)    ;MATLAB
          ;(mscgen . t)    ;Mscgen
          ;(ocaml . t)     ;Objective Caml
          ;(octave . t)    ;octave
          (org . t)       ;Org mode
          ;(oz . f)        ;Oz
          (perl . t)      ;Perl
          ;(plantuml . t)  ;Plantuml
          ;(processing . t) ;Processing.js
          (python . t)    ;Python
          ;(R . t)         ;R
          (ruby . t)      ;Ruby
          ;(sass . t)      ;Sass
          ;(scheme . t)    ;Scheme
          ;(screen . t)    ;GNU Screen
          (sed . t)       ;Sed
          (shell . t)     ;shell
          (sql . t)       ; SQL
          ;(sqlite .t)     ;SQLite
)))
#+END_SRC

** Deft
deft - an Emacs mode for quickly browsing, filtering, and editing
directories of plain text notes.  http://jblevins.org/projects/deft/
http://jblevins.org/git/deft.git

Modified for org-roam 20200601

#+begin_src emacs-lisp
;; Set org-roam directory in one place to prevent madness
(setq org-roam-directory-location "~/org-roam/")

(use-package deft
  :ensure t
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  ;(deft-directory "~/org-roam/")
  (deft-directory org-roam-directory-location)
  (deft-recursive t)
  (deft-use-filename-as-title nil)
  (deft-use-filter-string-for-filename t)
  ;(deft-org-mode-title-prefix t)
  (deft-file-naming-rules '((noslash . "-")
                            (nospace . "-")
                            (case-fn . downcase)))
  (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg"))
  (deft-default-extension "org")
  (deft-text-mode 'org-mode)
)
#+end_src

** Org-journal
Functions to maintain a simple personal diary / journal using in Emacs.
https://github.com/bastibe/org-journal

Bindings available in org-journal-mode:
    C-c C-f - go to the next journal file.
    C-c C-b - go to the previous journal file.
    C-c C-j - insert a new entry into the current journal file (creates the file if not present).
    C-c C-s - search the journal for a string.

#+begin_src emacs-lisp
(use-package org-journal
  :ensure t
  :after org
  :bind
  ("C-c n n" . org-journal-new-entry)
  :custom
  (org-journal-date-prefix "#+TITLE: ")
  (org-journal-file-format "%Y-%m-%d.org")
  ;(org-journal-dir "~/org-roam/")
  (org-journal-dir org-roam-directory-location)
  (org-journal-date-format "%A, %d %B %Y")
)
#+end_src

** Org-company-roam
company-org-roam is a company backend for use with org-roam. In Org-roam buffers, it provides completion for Org-roam files using its title.
https://github.com/org-roam/company-org-roam

#+begin_src emacs-lisp
(use-package company-org-roam
  :ensure t
  :after (company org-roam))
#+end_src

** Org-roam
Rudimentary Roam replica with Org-mode
https://github.com/org-roam/org-roam
https://org-roam.readthedocs.io/en/master/

#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :after org
  :hook
  (after-init . org-roam-mode) ; error on start stringp, nil
  ((org-mode . org-roam-mode)
   (after-init . org-roam--build-cache-async))
  :custom
  (org-roam-link-title-format "R:%s")
  ;(make-directory "~/org-roam")
  ;(org-roam-directory "~/org-roam/")
  (org-roam-directory org-roam-directory-location)
  (org-roam-db-location "~/.emacs.d/cache/org-roam.db")
  (org-roam-index-file "index.org")
  (org-roam-completion-system 'ivy)
  :bind (:map org-roam-mode-map
          (("C-c n l" . org-roam)
           ("C-c n t" . org-roam-dailies-today)
           ("C-c n f" . org-roam-find-file)
           ("C-c n j" . org-roam-jump-to-index)
           ("C-c n b" . org-roam-switch-to-buffer)
           ;("C-c n g" . org-roam-show-graph)
           ("C-c n g" . org-roam-graph)
           ("C-c n c" . org-roam-db-build-cache))
          :map org-mode-map
          (("C-c n i" . org-roam-insert))
          (("C-c n I" . org-roam-insert-immediate)))
  :config
  (setq org-roam-capture-templates
    '(("d" "default" plain (function org-roam-capture--get-point)
       "%?"
       :file-name "%<%Y%m%d>-${slug}"
       :head "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+STARTUP: overview\n#+ROAM_ALIAS: \n\n- tags :: \n\n"
       :unnarrowed t)))
)


;    :config
;    (setq org-roam-capture-templates
;      '(("d" "default" plain (function org-roam-capture--get-point)
;         "%?"
;         :file-name "%<%Y%m%d%H%M%S>-${slug}"
;         :head "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+ROAM_ALIAS: \n\n- tags :: \n\n"
;         :unnarrowed t)
;
;  ;; https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321
;  ;      ("a" "daily" plain (function org-roam-capture--get-point)
;  ;        ""
;  ;       :immediate-finish t
;  ;       :file-name "dailies/%<%Y-%m-%d>"
;  ;       :head "#+TITLE: %<%Y-%m-%d>")
;
;  ; --
;
;  ;; how to modify last_modified tag in file
;  ;;https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321/9
;  ;(require 'time-stamp)
;  ;(add-hook 'write-file-functions 'time-stamp)
;
;  ;--
;
;  ;; where no roam has gone before - oldfxiny
;  ;; https://www.reddit.com/r/emacs/comments/h9zoy9/weekly_tipstricketc_thread/
;
;  ;(setq my/roam-dir-list '(
;  ;  "~/org-roam/"
;  ;  "~/org-roam-wip/"))
;  ;
;  ;(defun my/pick-roam-dir ()
;  ;  "Select directories from a list"
;  ;  (interactive)
;  ;  (setq org-roam-directory
;  ;  (completing-read "Select directory: " my/roam-dir-list))
;  ;  ;;(deft)
;  ;  ;;(deft-refresh)
;  ;)

#+end_src
* Restclient
HTTP REST client tool for emacs
https://github.com/pashky/restclient.el

C-c C-c: runs the query under the cursor, tries to pretty-print the response (if possible)
C-c C-r: same, but doesn't do anything with the response, just shows the buffer
C-c C-v: same as C-c C-c, but doesn't switch focus to other window
C-c C-p: jump to the previous query
C-c C-n: jump to the next query
C-c C-.: mark the query under the cursor
C-c C-u: copy query under the cursor as a curl command
C-c C-g: start a helm session with sources for variables and requests (if helm is available, of course)
C-c n n: narrow to region of current request (including headers)
TAB: hide/show current request body, only if
C-c C-a: show all collapsed regions
C-c C-i: show information on resclient variables at point

#+begin_src emacs-lisp
(use-package restclient
  :ensure t)

;(use-package company-restclient
;  :ensure t
;  :config
;  (add-to-list 'company-backends 'company-restclient))
#+end_src

* Smartparens
Smartparens is a minor mode for dealing with pairs in Emacs.
https://github.com/Fuco1/smartparens

NOTE: changed smartparens-global-mode to show-smartparens-global-mode
https://github.com/Fuco1/smartparens/wiki/Show-smartparens-mode

Cheatsheat
https://gist.github.com/pvik/8eb5755cc34da0226e3fc23a320a3c95

#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :hook (after-init . show-smartparens-global-mode)
  :config (require 'smartparens-config)
    (add-hook 'python-mode-hook #'smartparens-mode)
)
#+end_src

* Smoothscrolling
The smooth-scrolling package teaches EMACS to smoothly show more linesas we move the cursor up and down.
This is a nice alternative to all the native scroll-* custom variables, which unfortunately cannot provide this functionality perfectly.
https://github.com/aspiers/smooth-scrolling

#+begin_src emacs-lisp
(use-package smooth-scrolling
  :ensure t
  :config
  (smooth-scrolling-mode 1))
#+end_src

* s (String manipulation library)
The long lost Emacs string manipulation library
https://github.com/magnars/s.el

#+BEGIN_SRC emacs-lisp
(use-package s
  :ensure t)
#+END_SRC

* Which Key (Keybinding Completion)
Emacs package that displays available keybindings in popup
https://github.com/justbur/emacs-which-key

Paging: C-h
    Cycle through the pages forward with n (or C-n)
    Cycle backwards with p (or C-p)
    Undo the last entered key (!) with u (or C-u)
    Call the default command bound to C-h, usually describe-prefix-bindings, with h (or C-h)

#+begin_src emacs-lisp
(use-package which-key
   :ensure t
   :defer 10
   :config
   (progn
     ;(setq which-key-popup-type 'side-window) ;Default
     ;(setq which-key-popup-type 'minibuffer)
     ;(setq which-key-compute-remaps t) ;Show correct descriptions for remapped keys
     ;(setq which-key-allow-multiple-replacements t) ;Default = nil
     (which-key-setup-side-window-bottom) ; Default
     (which-key-mode))
)
#+end_src
* Projectile (Project Management)
https://github.com/bbatsov/projectile
http://batsov.com/projectile/
projectile - project managent (works with helm)
Project navigation and management library for Emacs
Keybindings: https://projectile.readthedocs.io/en/latest/usage/

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :defer 5
  :config
    (projectile-mode +1)
    ;(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map) ; super-p
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    ;(define-key projectile-mode-map (kbd "C-c C-p") 'projectile-command-map) ; conflicts with lsp-mode python
    (setq projectile-completion-system 'ivy) ; use ivy for completion
    (setq projectile-enable-caching t) ; enable caching
    (setq projectile-indexing-method 'alien) ; external cmd for indexing
    ;; put bookmark and cache in cache directory - didn't work
    ;(setq projectile-known-projects-file (concat user-emacs-directory "cache/projectile-bookmarks.eld"))
    ;(setq projectile-cache-file (concat user-emacs-directory "cache/projectile.cache"))
)
#+END_SRC
* Ansible-vault
Minor mode for manipulating ansible-vault files
https://github.com/zellio/ansible-vault-mode

#+begin_src emacs-lisp
(defun ansible-vault-mode-maybe ()
  (when (ansible-vault--is-vault-file)
    (ansible-vault-mode 1)))

(use-package ansible-vault
  :ensure t
  :init (add-hook 'yaml-mode-hook 'ansible-vault-mode-maybe)
  :config (setq ansible-vault-password-file "~/.vault_core_pass.txt")
)
#+end_src
* Hydra
Tie related commands into a family of short bindings with a common prefix - a Hydra
https://github.com/abo-abo/hydra

#+begin_src emacs-lisp
(use-package hydra
  :ensure t
)

;;; dired
;(defhydra hydra-dired (:hint nil :color pink)
;  "
;_+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
;_C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
;_D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
;_R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
;_Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
;_S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
;_r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
;_z_ compress-file  _A_ find regexp
;_Z_ compress       _Q_ repl regexp
;
;T - tag prefix
;"
;  ("\\" dired-do-ispell)
;  ("(" dired-hide-details-mode)
;  (")" dired-omit-mode)
;  ("+" dired-create-directory)
;  ("=" diredp-ediff)         ;; smart diff
;  ("?" dired-summary)
;  ("$" diredp-hide-subdir-nomove)
;  ("A" dired-do-find-regexp)
;  ("C" dired-do-copy)        ;; Copy all marked files
;  ("D" dired-do-delete)
;  ("E" dired-mark-extension)
;  ("e" dired-ediff-files)
;  ("F" dired-do-find-marked-files)
;  ("G" dired-do-chgrp)
;  ("g" revert-buffer)        ;; read all directories again (refresh)
;  ("i" dired-maybe-insert-subdir)
;  ("l" dired-do-redisplay)   ;; relist the marked or singel directory
;  ("M" dired-do-chmod)
;  ("m" dired-mark)
;  ("O" dired-display-file)
;  ("o" dired-find-file-other-window)
;  ("Q" dired-do-find-regexp-and-replace)
;  ("R" dired-do-rename)
;  ("r" dired-do-rsynch)
;  ("S" dired-do-symlink)
;  ("s" dired-sort-toggle-or-edit)
;  ("t" dired-toggle-marks)
;  ("U" dired-unmark-all-marks)
;  ("u" dired-unmark)
;  ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
;  ("w" dired-kill-subdir)
;  ("Y" dired-do-relsymlink)
;  ("z" diredp-compress-this-file)
;  ("Z" dired-do-compress)
;  ("q" nil)
;  ("." nil :color blue))
;
;(setq dired-dwim-target t)
;(define-key dired-mode-map (kbd ".") 'hydra-dired/body)
#+end_src

* -- Programming --
* Pyvenv
Python virtual environment interface for Emacs
https://github.com/jorgenschaefer/pyvenv

To look at: https://fredrikmeyer.github.io/2020/08/26/emacs-python-venv.html

# Example .dir_locals.el for python to select version
# ((python-mode . ((pyvenv-workon . "~/.pyenv/versions/emacs")
#                 (subdirs . nil))))

#+begin_src emacs-lisp
(use-package pyvenv
  :ensure t
  :init
  (add-to-list 'exec-path "~/.pyenv/shims")
  (setenv "WORKON_HOME" "~/.pyenv/versions/")
  :config
  (pyvenv-mode 1)
  ;(pyvenv-activate "~/.pyenv/versions/3.8.3/")
  ;:bind
  ;("C-x p e" . pyenv-activate-current-project) ; not defined
)
#+end_src
* Python
# https://github.com/pyenv/pyenv-virtualenvwrapper
# brew install pyenv-virtualenvwrapper
# (for linux:  git clone https://github.com/pyenv/pyenv-virtualenvwrapper.git $(pyenv root)/plugins/pyenv-virtualenvwrapper)
#
# Instlall virtualenv: pip install virtualenv (this is a PITA to maintain, trying to not use it)
# Create virtualenv: virtualenv -p python3 ~/.virtualenvs/p3 (or mkvirtualenv p3)
# or, for python3:  python3 -m venv ~/.virtualenvs/p3
# enable: workon p3
# or, for python3:  cd ~/.virtualenvs/p3/bin; source ./activate
# stop:   deactivate p3
# or, for python3:  deactivate

# Setup virtualenv with pyenv, activate with: M-x pyenv-workon python3-emacs
pyenv virtualenv 3.8.1 emacs-python3
pyenv local emacs-python3
pyenv version

pip install --upgrade pip
#pip install virtualenv
pip install 'python-language-server[all]'
pip install flake8 flake8-docstrings flake8-polyfill flake8-quotes flake8-string-format pep8 pep8-naming

--

To run code in emacs:
M-x python-mode
C-c C-p : run-python
C-c C-c : python-shell-send-buffer

C-c C-z : open a python shell
C-c C-c : run the content of the buffer in the opened python shell
C-c C-r : run the selected region in the python shell

C-c C-c       python-shell-send-buffer
C-c C-d       python-describe-at-point
C-c C-f       python-eldoc-at-point
C-c C-j       imenu
C-c C-l       python-shell-send-file
C-c C-p       run-python
C-c C-r       python-shell-send-region
C-c C-s       python-shell-send-string
C-c C-t       Prefix Command
C-c C-v       python-check
C-c C-z       python-shell-switch-to-shell
C-c <     python-indent-shift-left
C-c >     python-indent-shift-right

C-c C-t c python-skeleton-class
C-c C-t d python-skeleton-def
C-c C-t f python-skeleton-for
C-c C-t i python-skeleton-if
C-c C-t m python-skeleton-import
C-c C-t t python-skeleton-try
C-c C-t w python-skeleton-while

live-py-plugin
https://www.youtube.com/watch?v=bYy90EUAh98
https://github.com/donkirkby/live-py-plugin
Live coding in Python with PyCharm, Emacs, Sublime Text, or even a browser
#+begin_src emacs-lisp
;(use-package live-py-mode
;  :ensure t
;  :defer t
;)
#+end_src

Commented out, giving a not-found error in messages buffer
#+begin_src emacs-lisp
;(use-package python-mode
;  :hook ((python-mode . lsp)))
#+end_src

* Lsp (Language Server Protocol)
Client for Language Server Protocol (v3.14). lsp-mode aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like company, flycheck and projectile.
https://github.com/emacs-lsp/lsp-mode
Homepage: https://emacs-lsp.github.io/lsp-mode/
Installation: https://emacs-lsp.github.io/lsp-mode/page/installation/

Install Python with framework
env PYTHON_CONFIGURE_OPTS="--enable-framework CC=clang" pyenv install 3.8.6

Installing python lsp in venv:
  pyenv virtualenv 2.7.18 emacs-py27
  pyenv virtualenv 3.8.6 emacs-py3
  pyenv versions
  pyenv global emacs-py3
  pyenv version
  pip install --upgrade pip
  pip install 'python-language-server[all]'
  pip list
  pyenv global 3.8.6 # revert back
  pip list

#+begin_src emacs-lisp
;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
;; check with: C-h v lsp-keymap-prefi
(setq lsp-keymap-prefix "s-l")  ; super-l

;; How to disable lsp as flycheck's default checker #1413
;(setq lsp-diagnostic-package :none)

(use-package lsp-mode
  :ensure t
  :config
  (pyvenv-activate "~/.pyenv/versions/emacs-py3/")
  (setq lsp-prefer-flymake nil)
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
          (python-mode . lsp-deferred)
          ;; if you want which-key integration
          (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp lsp-deferred)

;; optionally
(use-package lsp-ui
  :ensure t
  :after lsp-mode
  :commands lsp-ui-mode
  :config
  (add-hook 'python-mode-hook 'flycheck-mode)
)

;;Recommended settings for lsp-mode related packages
;;company
(setq company-minimum-prefix-length 1
      company-idle-delay 0.0) ;; default is 0.2

;; https://github.com/tigersoldier/company-lsp
;; Company completion backend for lsp-mode
(use-package company-lsp
  :ensure t
  :after (:all lsp-mode)
  :config
  (push 'company-lsp company-backends)
)


;; if you are helm user
;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
(use-package lsp-ivy
  :ensure t
  :after (lsp-mode lsp-ui)
  :commands lsp-ivy-workspace-symbol)

;; https://github.com/emacs-lsp/lsp-treemacs
(use-package lsp-treemacs
  :ensure t
  :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
;(use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language

;; Emacs client/library for Debug Adapter Protocol is a wire protocol for communication between client and Debug Server. It’s similar to the LSP but provides integration with debug server.
;; https://github.com/emacs-lsp/dap-mode
;; https://emacs-lsp.github.io/dap-mode/page/configuration/

;; in venv: pip install "ptvsd>=4.2"

;(use-package dap-mode
;  :ensure t)

;(use-package dap-mode
;  :ensure t
;  :requires (lsp-mode)
;  :hook ((lsp-mode . dap-mode)
;         (lsp-mode . dap-ui-mode))
;  :bind (:map dap-mode-map
;         ("C-c d d" . dap-debug)
;         ("C-c d h" . dap-hydra)
;         ("C-c d b" . dap-ui-breakpoints)
;         ("C-c d l" . dap-ui-locals)
;         ("C-c d r" . dap-ui-repl))
;)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language
;(use-package dap-python)
#+end_src
* YASnippet (Snippet Completion)
YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is inspired from TextMate's syntax, you can even import most TextMate templates to YASnippet. Watch a demo on YouTube.
https://github.com/joaotavora/yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-reload-all)
  :hook
  (prog-mode . yas-minor-mode))

;(use-package yasnippet-snippets
;  :ensure t)

;(use-package ivy-yasnippet
;  :ensure t
; ;:bind (:map yas-minor-mode-map
; ;       ("C-c s" . ivy-yasnippet)) ; C-c s used by rg-menu
;)
#+end_src

* Git
** magit
It's Magit! A Git porcelain inside Emacs. https://magit.vc
https://github.com/magit/magit

#+begin_src emacs-lisp
;; Fixes for emacs 27
;; Magit Error: Warning (with-editor): Cannot determine a suitable Emacsclient
(setq-default with-editor-emacsclient-executable "emacsclient")

(use-package magit
  :ensure t
  :defer 5
  :commands magit
  :bind
    (("C-x g" . magit-status)
     ("C-x G" . magit-status-with-prefix)
     ("C-x M-g" . magit-dispatch)
     ("C-c M-g" . global-magit-file-mode))
  :config
    (setq magit-completing-read-function 'ivy-completing-read)
)
#+end_src

** git gutter
Emacs port of GitGutter which is Sublime Text Plugin
Show change information from git
https://github.com/syohex/emacs-git-gutter

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :ensure t
  :defer 10
  :config
    (global-git-gutter-mode t)
)
#+END_SRC

** git-timemachine
https://github.com/emacsmirror/git-timemachine
Walk through git revisions of a file https://gitlab.com/pidu/git-timemachine

toggle the time machine you can use M-x git-timemachine-toggle.

Use the following keys to navigate historic version of the file

    p Visit previous historic version
    n Visit next historic version
    w Copy the abbreviated hash of the current historic version
    W Copy the full hash of the current historic version
    g Goto nth revision
    t Goto revision by selected commit message
    q Exit the time machine.
    b Run magit-blame on the currently visited revision (if magit available).
    c Show current commit using magit (if magit available).

#+begin_src emacs-lisp
(use-package git-timemachine
  :ensure t
  :bind (("s-g" . git-timemachine)))
#+end_src

** gitconfig
https://github.com/magit/git-modes

#+begin_src emacs-lisp
(use-package gitconfig-mode
  :ensure t
  :mode "\\x?gitconfig.?.*\\'")
#+end_src

** gitignore
https://github.com/magit/git-modes

#+begin_src emacs-lisp
(use-package gitignore-mode
  :ensure t
  :mode "\\.?gitignore.?.*\\'")
#+end_src
* Shell script
shell-script-mode is a major mode for shell script editing.
https://www.emacswiki.org/emacs/ShMode

#+begin_src emacs-lisp
(use-package sh-script
  :mode (("zshecl" . sh-mode)
         ("\\.zsh\\'" . sh-mode)
         ("\\.sh\\'" . sh-mode))
  :custom
  ;; zsh
  (system-uses-terminfo nil))

(use-package executable
  :hook
  (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src
* Web
web-mode.el is an emacs major mode for editing web templates aka HTML files embedding parts (CSS/JavaScript) and blocks (pre rendered by client/server side engines).
https://github.com/fxbois/web-mode
http://web-mode.org/

#+begin_src emacs-lisp
(use-package web-mode
  :ensure t
  :mode (("\\.erb\\'" . web-mode)
         ("\\.mustache\\'" . web-mode)
         ("\\.html?\\'" . web-mode)
         ("\\.php\\'" . web-mode)
         ("\\.jsp\\'" . web-mode)
         ;; ("\\.jsx?$" . web-mode)
         ("\\.es6\\'" . web-mode)
         ("\\.ejs\\'" . web-mode)
         ("\\.phtml\\'" . web-mode)
         ("\\.tpl\\.php\\'" . web-mode)
         ("\\.[agj]sp\\'" . web-mode)
         ("\\.as[cp]x\\'" . web-mode)
         ("\\.djhtml\\'" . web-mode)))
#+end_src
* Emacs Lisp
Commented out, giving a not-found error in messages buffer

#+begin_src emacs-lisp
;(use-package elisp-format
;  :bind (:map emacs-lisp-mode-map
;             ("C-x w" . elisp-format-buffer))
;  :hook (emacs-lisp-mode . yas-minor-mode))
#+end_src
* YAML
#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode "\\.yml\\'"
  :mode "\\.yaml\\'"
  :hook ((yaml-mode . lsp)
         (yaml-mode . yaml-imenu-enable)))

(use-package yaml-imenu
  :ensure t
  :after yaml-mode)
#+end_src
* -- Testing --
Put packages to test here

* notmuch email
Emacs major mode for interacting with Notmuch
https://notmuchmail.org/notmuch-emacs/

To open html files in a browser, ex. firefox, on a Mac with ". v"
Add the following to ~/.mailcap:
text/html; /Applications/Firefox.app/Contents/MacOS/firefox %s; nametemplate=%s.html

#+begin_src emacs-lisp
  ;;; https://github.com/tkf/org-mode/blob/master/contrib/lisp/org-notmuch.el
  ;;; error: not available
  ;use-package org-notmuch
  ; ;:ensure t
  ; ;:demand t
  ; :after (org notmuch)
  ; ;:after (:any org-plus-contrib notmuch)
  ;

;(use-package notmuch
;  :ensure t
;  :defer t
;  :config
;  (setq notmuch-search-oldest-first nil
;        notmuch-show-logo nil
;        mm-text-html-renderer 'shr
;        shr-inhibit-images nil
;        mime-view-text/html-previewer 'shr
;        mm-inline-text-html-with-images t
;        notmuch-multipart/alternative-discouraged '("text/html"))
;  (bind-key "g" 'notmuch-refresh-this-buffer notmuch-common-keymap)
;)
;
;(use-package counsel-notmuch
;  :disabled
;  ;:ensure t
;  :defer t
;  :after notmuch
;)
#+end_src
