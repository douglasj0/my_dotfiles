#-*- mode: org; fill-column: 78 -*-
#+STARTUP: overview

* Keymappings
| Key                 | Function                  | Notes                                 |
|---------------------+---------------------------+---------------------------------------|
| C-x C-u             | upcase region             |                                       |
| C-x C-l             | downcase region           |                                       |
|                     |                           |                                       |
| C-x r m             | set a bookmark            |                                       |
| C-x r b             | jump to a bookmark        |                                       |
| C-x r l             | list your bookmarks       |                                       |
| M-x bookmark-delete | delete a bookmark by name |                                       |
|                     |                           |                                       |
| M-`                 | other-frame               |                                       |
| C-c e               | ehsell                    |                                       |
| C-c s               | shell                     |                                       |
| C-c r               | rgrep                     |                                       |
| C-c C-r             | rgrep                     |                                       |
| C-f12               | list-matching-lines       |                                       |
| C-f10               | query-replace             |                                       |
| S-f10               | ispell-buffer             |                                       |
| C-S-f10             | flyspell-buffer           |                                       |
| C-x r v             | list-registers            | summary of all registers with content |
| C-M-z               | zap-back-to-char          | Reverse of M-z zap to char            |
| f12                 | toggle-truncate-lines     |                                       |
| C-x O               | rev-other-window          |                                       |
| C-x C-m             | M-x without Alt key       |                                       |
| C-c C-m             | M-x without Alt key       |                                       |
|                     |                           |                                       |
| C-c I               | overwrite-mode            | Mac                                   |
|                     |                           |                                       |
| C-c C-j             | term-toggle-mode          |                                       |
| C-c C-k             | term-toggle-mode          |                                       |
| C-c n               | narrow-or-widen           | Toggle between modes                  |
| C-c C-l             | locked-buffer-mode        | Lock buffer to window                 |
| M-S-down            | move-line-down            |                                       |
| M-S-up              | move-line-up              |                                       |
| C-x c               | clear-shell               |                                       |
| f9                  | daily-log                 | Jerry Sievers daily log               |
| C-x C-b             | ibuffer                   | Nice buffer switching                 |
| C-s                 | swiper                    | Ivy-mode search (f6 to resume         |
| C-c g               | magit-status              | Start magit                           |
| f2                  | neotree                   |                                       |
|                     |                           |                                       |
| C-c l               | org-store-link            |                                       |
| C-c a               | org-agenda                |                                       |
| C-c b               | org-iswitchb              |                                       |
| C-c c               | org-capture               |                                       |
|                     |                           |                                       |
| C-c t               | shell-pop                 | pop up shell                          |
| C-c o               | switch-window             |                                       |
|---------------------+---------------------------+---------------------------------------|

* Themes and housekeeping
#+BEGIN_SRC emacs-lisp
;;; Load Customizations if they exist
(setq custom-file "~/Dropbox/Home/elisp/custom.el")
(load custom-file 'noerror)

;;; Add 'info' and 'elisp' to load-path (C-h v load-path RET)
(add-to-list 'Info-default-directory-list "~/.emacs.d/info")
(add-to-list 'load-path "~/.emacs.d/elisp/") ;; elisp packages not in pkg manager

;;; Only use Themes in GUI. Set color theme (load-theme) for >= Emacs 24
(if (fboundp 'load-theme)
    (if (display-graphic-p)
        (load-theme 'zenburn :no-confirm)  ; Emacs in own window (zenburn)
      (load-theme 'wheatgrass :no-confirm)  ; Emacs in tty
))

;;; Reload .emacs file by typing: M-x reload-config
(defun reload-config () "Reloads .emacs interactively."
  (interactive)
  (load "~/.emacs.d/init.el"))

;;; Only start server if it is not currently running
;(require 'server) ;; Note: (start-server) is now mostly deprecated
(load "server")
(setq server-socket-dir "~/.emacs.d/tmp")
(unless (server-running-p) (server-start))

;;; Define booleans based on system type
(defconst *is-a-mac*
  (eq system-type 'darwin)
  "Is this running on OS X?")
(defconst *is-linux*
  (eq system-type 'gnu/linux)
  "Is this running on Linux?")

;;; Run multiple async commands at once without the output buffers colliding:
;; Allow running multiple async commands simultaneously
(defadvice shell-command (after shell-in-new-buffer (command &optional output-buffer error-buffer))
  (when (get-buffer "*Async Shell Command*")
    (with-current-buffer "*Async Shell Command*"
      (rename-uniquely))))
(ad-activate 'shell-command)
#+END_SRC
* Enable functions that are disabled by default
#+BEGIN_SRC emacs-lisp
;; Upcase and downcase regions
(put 'upcase-region 'disabled nil)  ;C-x C-u
(put 'downcase-region 'disabled nil)  ;C-x C-l

;; Sets the current horizontal position for C-n and C-p
(put 'set-goal-column 'disabled nil)

;; Restrict buffer editing to a region
;; Text Narrowing commands:
;;   Region: C-x n n, Page: C-x n p
;;   Funct: C-x n p, Widen: C-x n w
;;   Subtree in Org-Mode:   C-x n s
(put 'narrow-to-region 'disabled nil)

;; Dired functions (find-alternate 'a' reuses dired buffer)
(put 'dired-find-alternate-file 'disabled nil)

;; Goal Column, enter C-x C-n, at point to set column that C-n should go to
;; to clear enter C-u C-x C-n
(put 'set-goal-column 'disabled nil)

;; Enable mini-buffer history save feature
(setq savehist-additional-variables    ;; also save...
  '(search-ring regexp-search-ring)    ;; ... my search entries
  savehist-file "~/.emacs.d/cache/history") ;; keep my .emacs.d clean
(savehist-mode t)                      ;; do customization before activate

(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR.")
(global-set-key (kbd "M-z") 'zap-up-to-char)

;; And disable electric-indent if active
(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
#+END_SRC
* Global key bindings
#+BEGIN_SRC emacs-lisp
;;; https://stackoverflow.com/questions/93058/emacs-switching-to-another-frame-mac-os-x
; Re-enable swap frames with M-`
(global-set-key "\M-`" 'other-frame)

;; Open an Emacs eshell, shell, or term
(global-set-key (kbd "C-c e") 'eshell)
(global-set-key (kbd "C-c s") 'shell)
;(global-set-key (kbd "C-c t") 'term)
;(global-set-key (kbd "C-c t") 'ansi-term) ; re-assigned to shell-pop

;; Bind rgrep to C-c r / C-c C-r
(global-set-key (kbd "C-c r") 'rgrep)
(global-set-key (kbd "C-c C-r") 'rgrep)

;; remap these
(global-set-key [C-f12]      'list-matching-lines)
(global-set-key [C-f10]      'query-replace)
(global-set-key [S-f10]      'ispell-buffer)
(global-set-key [C-S-f10]    'flyspell-buffer)

;; Show a summery of all registers with content
(global-set-key (kbd "C-x r v") 'list-registers)

;; Zap-back-to-char C-M-z (deletes back to the and including character)
;; a counterpoint to zap-to-char M-z
(global-set-key "\C-\M-z" #'(lambda (arg char)
  (interactive "p\ncZap to char: ")
  (zap-to-char (- arg) char)))

;;; Disable line wrap
;;(setq default-truncate-lines t) ; deprecated in 23.2, use truncate-lines
(setq truncate-lines t)
;;; Make side by side buffers function the same as the main window
(setq truncate-partial-width-windows nil)
;;; Add F12 to toggle line wrap
(global-set-key [f12] 'toggle-truncate-lines)

;;; Remove trailing whitespace on save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Move through windows in reverse order of (other-window), C-x o
(global-set-key (kbd "C-x O") 'previous-multiframe-window)

;; Invoke M-x without the Alt key (from Steve Yegge's blog)
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)
#+END_SRC
* Global settings
#+BEGIN_SRC emacs-lisp
;; automatically follow symlinks to files under version control without prompting
(setq vc-follow-symlinks t)

;; Garbage-collect on focus-out, Emacs /should/ feel snappier.
(add-hook 'focus-out-hook #'garbage-collect)

;;; Turn on automatic bracket insertion by pairs. New in emacs 24
;;; http://ergoemacs.org/emacs/emacs_insert_brackets_by_pair.html
;;; Works great with new text, editing existing text is very annoying
;(electric-pair-mode 1)

;;; Kill line backwards
;;; http://emacsredux.com/blog/2013/04/08/kill-line-backward/
(global-set-key (kbd "C-<backspace>") (lambda ()
                                        (interactive)
                                        (kill-line 0)
                                        (indent-according-to-mode)))

;;; Ping settings (from net-util.el)
;;; http://www.masteringemacs.org/articles/2011/03/02/network-utilities-emacs/
(defvar ping-program-options)
(setq ping-program-options '("-c" "4"))

;;; Enable whitespace-mode for diff buffers
;;; http://stackoverflow.com/questions/11805584/automatically-enable-whitespace-mode-in-diff-mode
(add-hook 'diff-mode-hook
          '(lambda ()
            (whitespace-mode 1)))

;;; Mouse wheel and keyboard scroll settings
;;; scroll one line at a time (less "jumpy" than defaults)
(setq mouse-wheel-follow-mouse 't)     ;scroll window under mouse
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil))) ;1 line
(setq mouse-wheel-progressive-speed t) ;'nil disables accelerated scrolling
(setq scroll-step 1                    ;keyboard scroll one line at a time
      scroll-preserve-screen-position t
      scroll-conservatively 10000)     ;smooth scrolling

;;; Enable holidays in Calendar
(setq mark-holidays-in-calendar t)

;;; Address the issue of Emacs's lack of a vi-like "O" command
;;; http://stackoverflow.com/questions/2173324/emacs-equivalents-of-vims-dd-o-o
;;; Open line above: C-o  Open line below: C-n C-o  Kill whole line: C-S-Bcksp
(defadvice open-line (around vi-style-open-line activate)
  "Make open-line behave more like vi."
  (beginning-of-line)
  ad-do-it
  (indent-according-to-mode))

;; w/o-man mode (elisp man page formater for systems without 'man')
(defvar woman-show-log)
(defvar woman-cache-filename)
(setq woman-show-log nil)
(autoload 'woman "woman"
  "Decode and browse a Unix man page." t)
(setq woman-cache-filename "~/.emacs.d/cache/wmcache.el")

;;; Make tooltips appear in the echo area (checks if function exists)
(if (fboundp 'tooltip-mode)
 (tooltip-mode -1)
 (setq tooltip-use-echo-area t))

;; Use CUA mode for rectangles (C-RET to select, normal emacs keys to copy)
;;; http://emacs-fu.blogspot.com/2010/01/rectangles-and-cua.html
(setq cua-enable-cua-keys nil)  ;; only for rectangles, keeps (C-c, C-v, C-x).
(cua-mode t)
;; Emacs 24.4 introduces rectangle-mark-mode, C-x SPC, but not quite as useful
;(cua-mode t)
;(setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
;(transient-mark-mode 1) ;; No region when it is not highlighted
;(setq cua-keep-region-after-copy t) ;; Standard Windows behaviour

;;; Don't show the startup screen
(setq inhibit-startup-message t)

;;; Disable startup message in scratch buffer
(setq-default initial-scratch-message nil)
;;; And set scratch buffer initial mode to text instead of lisp eval
;(setq-default initial-major-mode 'text-mode)
;;; Don't create new lines when pressing 'arrow-down key' at end of the buffer
(setq next-line-add-newlines nil)

;;; Fix delete key working as backspace and not forward deleting
;;; (This only worked in window mode, not terminal. C-d works in both)
(when window-system (normal-erase-is-backspace-mode 1))

;;; Alias to change apropos to ap
(defalias 'ap 'apropos)

;;; hl-line: highlight the current line
(when (fboundp 'global-hl-line-mode)
  (global-hl-line-mode t)) ;; turn it on for all modes by default

;;; Make text mode default major mode with auto-fill enabled
(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode) ;replaces longlines in 23

;;; Auto-scroll in *Compilation* buffer
(setq compilation-scroll-output t)

;;; make Emacs always indent using SPC characters and never TABs
;;; i.e. use spaces instead of tabs
;;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Just-Spaces.html
(setq-default indent-tabs-mode nil)

;;; "y or n" instead of "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)

;;; Highlight regions and add special behaviors to regions.
;;; "C-h d transient" for more info.  transient-mark-mode is a toggle.
;;; also in Emacs 22 and greater, C-SPC twice to temp enable transient mark
;(setq transient-mark-mode nil)
(setq transient-mark-mode t)

;;; Display line and column numbers in the mode line
(setq line-number-mode    t
      column-number-mode  t)

;;; Stop blinking cursor
(blink-cursor-mode 0)

;;; Explicitly show the end of a buffer (indicated on left fringe of window)
(set-default 'indicate-empty-lines t)

;;; Line-wrapping
(set-default 'fill-column 78)

;;; backups - commented out for better-defaults
;(setq make-backup-files t ;; do make backups
;  backup-by-copying t     ;; and copy them here
;  backup-directory-alist '(("." . "~/.emacs.d/cache/backups"))
;  version-control t
;  kept-new-versions 2
;  kept-old-versions 5
;  delete-old-versions t)

;; Create the autosave dir if necessary, since emacs won't.
;(make-directory "~/.emacs.d/cache/autosaves/" t)
;; Put all auto-save files in a single directory
;(defvar autosave-dir (expand-file-name "~/.emacs.d/cache/autosaves/"))
;(setq auto-save-list-file-prefix
;  "~/.emacs.d/cache/autosaves/saves-")

;; Don't truncate lines
(setq truncate-lines t
      truncate-partial-width-windows nil)

;; Create new scratch buffer if needed
(run-with-idle-timer 1 t
    '(lambda () (get-buffer-create "*scratch*")))

;; allow scroll-down/up-command to move point to buffer end/beginning
(setq scroll-error-top-bottom 'true)

;; New json-mode
(setq auto-mode-alist (cons '("\\.json\\'" . js-mode) auto-mode-alist))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bookmarks
;;    ‘C-x r m’ – set a bookmark at the current location (e.g. in a file)
;;    ‘C-x r b’ – jump to a bookmark
;;    ‘C-x r l’ – list your bookmarks
;;    ‘M-x bookmark-delete’ – delete a bookmark by name
(setq
  bookmark-default-file "~/org/bookmarks" ;; .emacs.d/bookmarks by default
  bookmark-save-flag 1)                   ;; autosave each change)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC
* OS specific settings
** Linux settings
#+BEGIN_SRC emacs-lisp
;;; -=Linux specific settings
(if *is-linux*
   (progn

;;; http://stackoverflow.com/questions/15277172/how-to-make-emacs-open-all-buffers-in-one-window-debian-linux-gnome
;(setq pop-up-frames 'graphic-only)
(setq pop-up-frames nil)

;;; http://stackoverflow.com/questions/4506249/how-to-make-emacs-org-mode-open-links-to-sites-in-google-chrome
;;; Open up URLs in browser using gnome-open
(setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "gnome-open")

;;; Problems with minibuffer font size display in KDE/Crunchbang/Unity(?), explictily set font
;;; List fonts with M-x descript-font
;(set-default-font "Monospace-10")
))
#+END_SRC
** Darwin settings
#+BEGIN_SRC emacs-lisp
(if *is-a-mac*
   (progn

;; Disable railwaycat's tab bar
;; https://github.com/railwaycat/homebrew-emacsmacport/issues/123
(setq mac-frame-tabbing nil)

;; Don't open up new frames for files dropped on icon, use active frame
(setq ns-pop-up-frames nil)

;;; Drag and drop on the emacs window opens the file in a new buffer instead of appending it to the current buffer
;;; http://stackoverflow.com/questions/3805658/how-to-configure-emacs-drag-and-drop-to-open-instead-of-append-on-osx
(if (fboundp 'ns-find-file)
    (global-set-key [ns-drag-file] 'ns-find-file))

;;; Move deleted files to the System's trash can
;;; set trash-directory otherwise uses freedesktop.org-style
(setq trash-directory "~/.Trash")
(setq delete-by-moving-to-trash t)

;; For Macbook Pro, which has no insert key.
;; http://lists.gnu.org/archive/html/help-gnu-emacs/2006-07/msg00220.html
(global-set-key (kbd "C-c I") (function overwrite-mode))

;;; Open up URLs in mac browser
(setq browse-url-browser-function 'browse-url-default-macosx-browser)
; (setq browse-url-browser-function 'browse-url-default-windows-browser)

;;; Copy and paste into Emacs Terminal
;;; stack overflow, pasting text into emacs on Macintosh
;;; Copy - C-x M-w
;;; Paste - C-x C-y
(defun pt-pbpaste ()
  "Paste data from pasteboard."
  (interactive)
  (shell-command-on-region
    (point)
    (if mark-active (mark) (point))
    "pbpaste" nil t))

(defun pt-pbcopy ()
  "Copy region to pasteboard."
  (interactive)
  (print (mark))
  (when mark-active
    (shell-command-on-region
      (point) (mark) "pbcopy")
    (kill-buffer "*Shell Command Output*")))

(global-set-key [?\C-x ?\C-y] 'pt-pbpaste)
(global-set-key [?\C-x ?\M-w] 'pt-pbcopy)

))
#+END_SRC
* Functions
#+BEGIN_SRC emacs-lisp
;;; ---------------------------------------------------------------------------
;;; Toggles term between line mode and char mode
;;; http://emacs.stackexchange.com/questions/5585/how-to-copy-command-output-in-ansi-term-mode
;;; https://joelmccracken.github.io/entries/switching-between-term-mode-and-line-mode-in-emacs-term/
(require 'term)
(defun jnm/term-toggle-mode ()
  "Toggles term between line mode and char mode"
  (interactive)
  (if (term-in-line-mode)
      (term-char-mode)
    (term-line-mode)))
;; active when the buffer is in line mode
(define-key term-mode-map (kbd "C-c C-j") 'jnm/term-toggle-mode)
(define-key term-mode-map (kbd "C-c C-k") 'jnm/term-toggle-mode)
;; active when the buffer is in character mode
(define-key term-raw-map (kbd "C-c C-j") 'jnm/term-toggle-mode)
(define-key term-raw-map (kbd "C-c C-k") 'jnm/term-toggle-mode)

;;; ---------------------------------------------------------------------------
;;; Create parent directory when visiting file in non-existent directory
;;; http://iqbalansari.github.io/blog/2014/12/07/automatically-create-parent-directories-on-visiting-a-new-file-in-emacs/
(defun my-create-non-existent-directory ()
      (let ((parent-directory (file-name-directory buffer-file-name)))
        (when (and (not (file-exists-p parent-directory))
                   (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
          (make-directory parent-directory t))))

(add-to-list 'find-file-not-found-functions #'my-create-non-existent-directory)

;;; ---------------------------------------------------------------------------
;;; https://gist.github.com/mwfogleman/95cc60c87a9323876c6c
;;; http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
(defun narrow-or-widen-dwim ()
  "If the buffer is narrowed, it widens. Otherwise, it narrows to region, or Org subtree."
  (interactive)
  (cond ((buffer-narrowed-p) (widen))
        ((region-active-p) (narrow-to-region (region-beginning) (region-end)))
        ((equal major-mode 'org-mode) (org-narrow-to-subtree))
        (t (error "Please select a region to narrow to"))))
(global-set-key (kbd "C-c n") 'narrow-or-widen-dwim)

;; I bind this key to C-c n, using the bind-key function that comes with use-package.
;(bind-key "C-c n" 'narrow-or-widen-dwim)

;; I also bind it to C-x t n, using Artur Malabarba's toggle map idea:
;; http:://www.endlessparentheses.com/the-toggle-map-and-wizardry.html

;;; ---------------------------------------------------------------------------
;;; http://www.reddit.com/r/emacs/comments/1zkj2d/advanced_usage_of_eshell
(defun ha-eshell-here ()
  "Opens up a new shell in the directory associated with the current buffer's file."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (name (car (last (split-string parent "/" t)))))
    (split-window-vertically)
    (other-window 1)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))

    (insert (concat "ls"))
    (eshell-send-input)))

(defun af-eshell-here ()
  "Go to eshell and set current directory to the buffer's directory"
  (interactive)
  (let ((dir (file-name-directory (or (buffer-file-name)
                                      default-directory))))
    (eshell)
    (eshell/pushd ".")
    (cd dir)
    (goto-char (point-max))
    (eshell-kill-input)
    (eshell-send-input)))

;;; ---------------------------------------------------------------------------
;;; Locked mode - lock a window in place
(define-minor-mode locked-buffer-mode
  "Make the current window always display this buffer."
  nil " locked" nil
  (set-window-dedicated-p (selected-window) locked-buffer-mode))
(global-set-key (kbd "C-c C-l") 'locked-buffer-mode)

;;; --------------------------------------------------------------------------
;;; Narrow-to-region-indirect (Allow narrowing of different regions in windows)
;;; http://demonastery.org/2013/04/emacs-narrow-to-region-indirect/
(defun narrow-to-region-indirect (start end)
  "Restrict editing in this buffer to the current region, indirectly."
  (interactive "r")
  (when (boundp 'evil-mode) ; There's probably a nicer way to do this
    (evil-exit-visual-state))
  (let ((buf (clone-indirect-buffer nil nil)))
    (with-current-buffer buf
      (narrow-to-region start end))
      (switch-to-buffer buf)))

;;; ---------------------------------------------------------------------------
;;; Kill all other open files, other then the current one.  NO Notification!
;;; http://emacsredux.com/blog/2013/03/30/kill-other-buffers/
;(defun kill-other-buffers ()
;  "Kill all buffers but the current one.
;   Don't mess with special buffers."
;  (interactive)
;  (dolist (buffer (buffer-list))
;    (unless (or (eql buffer (current-buffer)) (not (buffer-file-name buffer)))
;      (kill-buffer buffer))))
;(global-set-key (kbd "C-c k") 'kill-other-buffers)

;;; ---------------------------------------------------------------------------
;;; change a marked region of text to all low-cased words concatenated by underscores
;;; A fox caught a bird => a_fox_caught_a_bird
(defun lower-and-concat (b e)
  (interactive "r")
  (save-restriction
    (narrow-to-region b e)
    (goto-char (point-min))
    (downcase-region b e)
    (while (re-search-forward "[ \t]+" nil t)
      (replace-match "_"))))

;;; ---------------------------------------------------------------------------
;;; Move lines up or down (can't easily use C-S on MacOS)
;;; http://whattheemacsd.com//editing-defuns.el-02.html
(defun move-line-down ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines 1))
    (forward-line)
    (move-to-column col)))

(defun move-line-up ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines -1))
    (move-to-column col)))

;(global-set-key (kbd "<C-S-down>") 'move-line-down)
;(global-set-key (kbd "<C-S-up>") 'move-line-up)
(global-set-key (kbd "<M-S-down>") 'move-line-down)
(global-set-key (kbd "<M-S-up>") 'move-line-up)

;;; ---------------------------------------------------------------------------
;;; Open a full screen eshell, save current layout
;;; http://irreal.org/blog/?p=1742
(global-set-key (kbd "C-c E")
                (lambda ()
                  "Bring up a full-screen eshell or restore previous config."
                  (interactive)
                  (if (string= "eshell-mode" major-mode)
                      (jump-to-register :eshell-fullscreen)
                    (progn
                      (window-configuration-to-register :eshell-fullscreen)
                      (eshell)
                      (delete-other-windows)))))

;;; ---------------------------------------------------------------------------
;;; Re-open a file with sudo access
;;; http://www.reddit.com/r/emacs/comments/192n52/how_do_i_save_ediffmerged_changes_for/
(defun sudo-file()
  (interactive)
  (let ((p (point)))
    (find-alternate-file
     (concat "/sudo::" (buffer-file-name)))
    (goto-char p)))

;;; ---------------------------------------------------------------------------
;;; Jump to next character - Similar to Vim's semicolon command
;;; http://www.reddit.com/r/emacs/comments/nfj0e/emacs_wizards_how_do_you_move_about_in_source_code/
;(defun jump-to-next-char (c &optional count)
;  "Jump forward or backward to a specific character.  With a
;count, move that many copies of the character."
;  (interactive "cchar: \np")
;  (when (string= (string c) (buffer-substring (point) (+ 1 (point))))
;    (setq count (+ 1 count)))
;  (and
;   (search-forward (string c) nil t count)
;   (> count 0)
;   (backward-char)))
;(global-set-key (kbd "C-;") 'jump-to-next-char)

;;; ---------------------------------------------------------------------------
;;; Remove duplicate lines in a region
;;; http://stackoverflow.com/questions/13046791/how-to-delete-the-repeat-lines-in-emacs
;(defun uniq-lines (beg end)
;  "Unique lines in region.
;Called from a program, there are two arguments:
;BEG and END (region to sort)."
;  (interactive "r")
;  (save-excursion
;    (save-restriction
;      (narrow-to-region beg end)
;      (goto-char (point-min))
;      (while (not (eobp))
;        (kill-line 1)
;        (yank)
;        (let ((next-line (point)))
;          (while
;              (re-search-forward
;               (format "^%s" (regexp-quote (car kill-ring))) nil t)
;            (replace-match "" nil nil))
;          (goto-char next-line))))))

;;; ---------------------------------------------------------------------------
;;; Match Paren / based on the vim command using %
;;; http://grok2.tripod.com/
(defun match-paren (arg)
      "Go to the matching paren if on a paren; otherwise insert %."
      (interactive "p")
      (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
            ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
            (t (self-insert-command (or arg 1)))))
(global-set-key "%" 'match-paren)

;;; ---------------------------------------------------------------------------
;;; Unfill paragraph / Unfill region
;;; http://stackoverflow.com/questions/6707758/inverse-of-m-q-an-unfill-paragraph-function
(defun unfill-paragraph ()
  "Replace newline chars in current paragraph by single spaces.
This command does the reverse of `fill-paragraph'."
  (interactive)
  (let ((fill-column 90002000))
    (fill-paragraph nil)))

(defun unfill-region (start end)
  "Replace newline chars in region by single spaces.
This command does the reverse of `fill-region'."
  (interactive "r")
  (let ((fill-column 90002000))
    (fill-region start end)))

;;; ---------------------------------------------------------------------------
;;; Remove all space indentation
;;; http://stackoverflow.com/questions/10854776/emacs-function-which-eliminates-all-indentation
(defun my-delete-indentation (start end)
  "Delete all leading whitespace within the current region."
  (interactive "*r")
  (replace-regexp "^[[:space:]]+" "" nil start end))

;;; ---------------------------------------------------------------------------
;;; Remote ssh connection from within Emacs
;;; http://stackoverflow.com/questions/10495432/remote-ssh-connection-from-within-emacs
(defun my-ssh (args)
  "Connect to a remote host by SSH."
  (interactive "sssh ")
  (let ((switches (split-string-and-unquote args)))
    (set-buffer (apply 'make-term "ssh" "ssh" nil switches))
    (term-mode)
    (term-char-mode)
    (switch-to-buffer "*ssh*")))

;;; ---------------------------------------------------------------------------
;;; Save list of open files to kill-ring (by Trey Jackson)
;;; http://stackoverflow.com/questions/10537265/emacs-save-current-buffer-list-to-a-text-file
(defun copy-open-files ()
  "Add paths to all open files to kill ring"
  (interactive)
  (kill-new (mapconcat 'identity
                       (delq nil (mapcar 'buffer-file-name (buffer-list)))
                       "\n"))
  (message "List of files copied to kill ring"))

;;; ---------------------------------------------------------------------------
;;; Use a bar cursor when mark is active and a region exists.
;;; http://www.reddit.com/r/emacs/comments/stkb1/im_really_liking_the_bar_cursor/
(defun th-activate-mark-init ()
  (setq cursor-type 'bar))
(add-hook 'activate-mark-hook 'th-activate-mark-init)

(defun th-deactivate-mark-init ()
  (setq cursor-type 'box))
(add-hook 'deactivate-mark-hook 'th-deactivate-mark-init)

;; Use a red cursor in overwrite-mode
(defvar th--default-cursor-color "black")
(defadvice overwrite-mode (after th-overwrite-mode-change-cursor activate)
  "Change cursor color in override-mode."
  (if overwrite-mode
      (progn
        (setq th--default-cursor-color
              (let ((f (face-attribute 'cursor :background)))
                (if (stringp f)
                    f
                  th--default-cursor-color)))
        (set-cursor-color "red"))
    (set-cursor-color th--default-cursor-color)))

;;; ---------------------------------------------------------------------------
;;; I want a key to open the current buffer all over the screen.
;;; http://stackoverflow.com/questions/970292/emacs-multiple-columns-one-buffer
(defun all-over-the-screen ()
  (interactive)
  (delete-other-windows)
  (split-window-horizontally)
  (split-window-horizontally)
  (balance-windows)
  (follow-mode t))

;;; ---------------------------------------------------------------------------
;;; Clear shell (m-x shell) screen like bash's clear command
(defun clear-shell ()
   (interactive)
  (let ((old-max comint-buffer-maximum-size))
    (setq comint-buffer-maximum-size 0)
    (comint-truncate-buffer)
    (setq comint-buffer-maximum-size old-max)))
(global-set-key "\C-xc" 'clear-shell)

;;; ---------------------------------------------------------------------------
;;; Save rectangle instead of killing it
;;; http://emacsblog.org/2007/03/17/quick-tip-set-goal-column
(defun kill-save-rectangle (start end &optional fill)
  "Save the rectangle as if killed, but don't kill it.  See
`kill-rectangle' for more information."
  (interactive "r\nP")
  (kill-rectangle start end fill)
  (goto-char start)
  (yank-rectangle))
(global-set-key (kbd "C-x r M-k") 'kill-save-rectangle)

;;; ---------------------------------------------------------------------------
;;; Steve Yegge's function rename a file that you're editing along
;;; with its corresponding buffer
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
 (filename (buffer-file-name)))
    (if (not filename)
 (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
   (message "A buffer named '%s' already exists!" new-name)
 (progn
   (rename-file name new-name 1)
   (rename-buffer new-name)
   (set-visited-file-name new-name)
   (set-buffer-modified-p nil))))))

;;; ---------------------------------------------------------------------------
;;; http://www.reddit.com/r/emacs/comments/gjqki/is_there_any_way_to_tell_emacs_to_not/c1o26uk
;(defun toggle-sticky-buffer-window ()
; "Toggle whether this window is dedicated to this buffer."
; (interactive)
; (set-window-dedicated-p
;  (selected-window)
;  (not (window-dedicated-p (selected-window))))
; (if (window-dedicated-p (selected-window))
;     (message "Window is now dedicated.")
;   (message "Window is no longer dedicated.")))
;
;(global-set-key [(super d)] 'toggle-sticky-buffer-window) ;; cmd-d

;;; ---------------------------------------------------------------------------
(defun intelligent-close ()
  "quit a frame the same way no matter what kind of frame you are on.

This method, when bound to C-x C-c, allows you to close an emacs frame the
same way, whether it's the sole window you have open, or whether it's
a \"child\" frame of a \"parent\" frame.  If you're like me, and use emacs in
a windowing environment, you probably have lots of frames open at any given
time.  Well, it's a pain to remember to do Ctrl-x 5 0 to dispose of a child
frame, and to remember to do C-x C-x to close the main frame (and if you're
not careful, doing so will take all the child frames away with it).  This
is my solution to that: an intelligent close-frame operation that works in
all cases (even in an emacs -nw session).

Stolen from http://www.dotemacs.de/dotfiles/BenjaminRutt.emacs.html."
  (interactive)
  (if (eq (car (visible-frame-list)) (selected-frame))
      ;;for parent/master frame...
      (if (> (length (visible-frame-list)) 1)
          ;;close a parent with children present
          (delete-frame (selected-frame))
        ;;close a parent with no children present
        (save-buffers-kill-emacs))
    ;;close a child frame
    (delete-frame (selected-frame))))
(global-set-key "\C-x\C-c" 'intelligent-close) ;forward reference
#+END_SRC
* Better defaults
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; -- better-defaults  (moved into init.el to avoid confusion)
;;; https://github.com/technomancy/better-defaults
;(require 'better-defaults)

;(menu-bar-mode -1) ; was making tabbar tabs on 2nd frame
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(when (fboundp 'horizontal-scroll-bar-mode)
  (horizontal-scroll-bar-mode -1))

(require 'uniquify)
 (setq uniquify-buffer-name-style 'forward)

(require 'saveplace)
  (setq-default save-place t)

(global-set-key (kbd "M-/") 'hippie-expand)
;(global-set-key (kbd "C-x C-b") 'ibuffer) ; set elsewhere in file
;(global-set-key (kbd "M-z") 'zap-up-to-char) ; doesn't exist?

(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

(show-paren-mode 1)
(setq save-interprogram-paste-before-kill t
      apropos-do-all t
      mouse-yank-at-point t
      require-final-newline t
      visible-bell t
      load-prefer-newer t
      ediff-window-setup-function 'ediff-setup-windows-plain
      save-place-file (concat user-emacs-directory "places")
      backup-directory-alist `(("." . ,(concat user-emacs-directory
                                               "backups"))))
#+END_SRC
* Daily log
#+BEGIN_SRC emacs-lisp
;;; -- daily log -

(defun daily-log ()
  "Automatically opens my daily log file and positions cursor at end of
last sentence."
  (interactive)
  ;(diary)
  (find-file "~/org/DailyLogs/+current") ;symlink to current log
  (goto-char (point-max))  ;go to the maximum accessible value of point
  (search-backward "* Notes") ;search to Notes section first to bypass notes
  (if (re-search-backward "[.!?]") ;search for punctuation from end of file
      (forward-char 1))
  )
(global-set-key (kbd "<f9>") 'daily-log)

;;; ---------------------------------------------------------------------------
;(diary)

;; Email 1
;; I have been using a simple system for writing notes day by day.  Kind of
;; like a diary.  It's really very unsophisticated but helpful.  It will allow
;; you to make notes into a template file.  Weeks, Months (etc...) later, you
;; can refer to them.
;;
;; For those who have never seen it
;; http://aonws01/unix-admin/Daily_Logs/Jerry_Sievers/
;;
;; Many of you new guys' questions to me have been answered from these notes
;; (eg, license keys info, who's who and so forth).
;;
;; John Sconiers asked about this and I set him up with it.  Whole procedure
;; takes only a few minutes to install and probably about fifteen minutes per
;; day to keep up to date.  An investment in time that pays off later.  Other
;; admins who have left Aon used this and liked it too.
;;
;; It also comes with a CGI program which, if your home directory is
;; accessible to aonws01, can allow others to browse your diary (I hear
;; cheering and booing...)
;;
;; Please let me know.  It would be nice to have everyone using this thing at
;; least minimally.

;; Email 2
;; Chris, I have installed the package in your home directory.  Files are in
;; Aon/DailyLogs.  The current log has a symbolic link named +Current.  You
;; also have an alias 'diary' which you can type at the shell.  Doing so will
;; invoke vi on the +Current file and position the cursor on the very last '.'
;; character in the file.  I have added the $HOME/bin directory to your path
;; and created one cron job to stamp the 'monday' file weekly.
;;
;; You should run the command 'new-daily-log' once per week to start a new
;; file.  Optionally, the previous file can be emailed to the destination of
;; your choice.  See the Aon/DailyLogs/.config file for details.
;;
;; Please call if you have any questions.
#+END_SRC
* async
https://github.com/jwiegley/emacs-async
async.el is a module for doing asynchronous processing in Emacs. Some async applications are provided as well with this package:
- Dired-async
- smtp-mail-async
- async-bytecomp

#+BEGIN_SRC emacs-lisp
(use-package async
  :ensure t
  :init (async-bytecomp-package-mode 1)
)
#+END_SRC
* color-moccur
#+BEGIN_SRC emacs-lisp
(use-package color-moccur
  :ensure t
  :commands (isearch-moccur isearch-all)
  :bind (("M-s O" . moccur)
         :map isearch-mode-map
         ("M-o" . isearch-moccur)
         ("M-O" . isearch-moccur-all))
  :init
  (setq isearch-lazy-highlight t)
  :config
  (use-package moccur-edit))
#+END_SRC
* deadgrep - disabled
# https://github.com/Wilfred/deadgrep
# https://github.com/Malabarba/spinner.el
fast, friendly searching with ripgrep and Emacs

#+BEGIN_SRC emacs-lisp
(use-package spinner
  :ensure f
  :disabled)

(use-package deadgrep
  :ensure f
  :disabled
  :requires spinner
  :config
  (global-set-key (kbd "<f5>") #'deadgrep)
)
#+END_SRC
* deft
#+BEGIN_SRC emacs-lisp
;;; -- deft - an Emacs mode for quickly browsing, filtering, and editing
;;; directories of plain text notes.  http://jblevins.org/projects/deft/
;;; http://jblevins.org/git/deft.git
(use-package deft
  :ensure t
  :bind ("<f8>" . deft-or-close)
        ("C-c C-g" . deft-find-file)
  :commands (deft)
  :config
    (setq
      deft-extensions '("txt" "org" "md")
      deft-directory "~/org/notes"
      deft-text-mode 'org-mode
      deft-use-filename-as-title t
      deft-recursive t
      deft-ignore-file-regexp "archive\.*")

    ;; Notational Velocity provides a show-hide function key, letting you pop
    ;; in-and-out of the interface quickly. I recreated a crude version of this
    ;; in Deft, bound to f6.
    (define-minor-mode deft-note-mode "Deft notes" nil " Deft-Notes" nil)
    (setq deft-text-mode 'deft-note-mode)
    (defun kill-all-deft-notes ()
      (interactive)
      (save-excursion
        (let((count 0))
          (dolist(buffer (buffer-list))
            (set-buffer buffer)
            (when (not (eq nil deft-note-mode))
              (setq count (1+ count))
              (kill-buffer buffer)))
          )))
    (defun deft-or-close () (interactive) (if (or (eq major-mode 'deft-mode) (not (eq nil deft-note-mode)))
                                              (progn (kill-all-deft-notes) (kill-buffer "*Deft*"))
                                            (deft)
                                            ))
)
#+END_SRC
* dired
#+BEGIN_SRC emacs-lisp
;;; -- dired - directory listing buffer
;;; http://www.emacswiki.org/emacs/DiredPlus

;;; Toggle Unix hidden file display (M-o)
;;(require 'dired+ nil 'noerror) ;; uber enhanced dired, very large?
;(require 'dired-x nil 'noerror) ;included with emacs
(use-package dired-x
  :ensure nil
  :bind ("C-x C-j"   . dired-jump)
        ("C-x 4 C-j" . dired-jump-other-window)
        ("C-x d"     . diredp-dired-files)
        ("C-x 4 d"   . diredp-dired-files-other-window)
  :config
    ;; hide hidden files by default, use (M-o) to show
    (setq dired-omit-files "^\\...+$")
    (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1)))

    ;;; New dired+ option is to hide file details, can be togged with '('
    ;(setq diredp-hide-details-initially-flag -1) ;doesn't seem to work
    ;(setq global-dired-hide-details-mode -1)
    ;(setq dired-recursive-deletes 'top)
    ;; disable line wrapping in dired mode
    (add-hook 'dired-mode-hook (lambda () (setq truncate-lines t)))

    ;;; Auto-refresh dired on file change
    (add-hook 'dired-mode-hook 'auto-revert-mode)

    ;; Handle zip compression
    (defvar dired-compress-file-suffixes)
    (eval-after-load "dired-aux"
      '(add-to-list 'dired-compress-file-suffixes
                    '("\\.zip\\'" ".zip" "unzip")))

    ;; Configure direx jump
    (autoload 'dired-jump "dired-x"
      "Jump to Dired buffer corresponding to current buffer." t)

    (autoload 'dired-jump-other-window "dired-x"
      "Like \\[dired-jump] (dired-jump) but in other window." t)

    ;; enable side-by-side dired buffer targets
    ;; Split your window, split-window-vertically & go to another dired directory.
    ;; When you will press C to copy, the other dir in the split pane will be
    ;; default destination.
    (setq dired-dwim-target t) ;; suggest copying/moving to other dired buffer in split view
)
#+END_SRC
* dockerfile-mode
https://github.com/spotify/dockerfile-mode
An emacs mode for handling Dockerfiles

#+begin_src emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile\\'"
  :ensure t)
#+end_src
* dumb-jump - disabled
#+BEGIN_SRC emacs-lisp
;;; --dumb-jump -- https://github.com/jacktasia/dumb-jump
;;; alternative Emacs packages for other languages
;;; - Tags supports multiple languages
;;; - GNU Global supports multiple languages
;;; - Tern for JavaScript
;;; - elpy for Python
;;; - robe for Ruby
(use-package dumb-jump
  :ensure f
  :disabled
  :commands dumb-jump
  :bind (("M-g j" . dumb-jump-go)
         ("M-g i" . dumb-jump-go-prompt)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config
    (setq dumb-jump-selector 'ivy)
)
#+END_SRC
* electric help - disabled
#+BEGIN_SRC emacs-lisp
;;; -- ehelp (Electric help)
;; Provides a pre-packaged 'Electric Help Mode' for on-line help screens.
;; Provides: SPC to scroll, DEL to scroll back, q to exit, r to retain
;; Instead of: Type C-x 1 to delete the help window, C-M-v to scroll help
(use-package ehelp
  :ensure f
  :disabled
  :bind ("\C-h" . ehelp-command)
)
#+END_SRC
* elpy
#+BEGIN_SRC emacs-lisp
;;; -- elpy - Emacs Python IDE
;; Info and setup
;; https://realpython.com/blog/python/emacs-the-best-python-editor/
;; https://github.com/jorgenschaefer/elpy
;; https://emacs.stackexchange.com/questions/10065/how-can-i-defer-loading-elpy-using-use-package
;; User manual:  http://elpy.readthedocs.io/en/latest/
;; Setup python env first:
;;   pip install ipython jedi flake8 autopep8 yapf
;; To use elpy, just add the following to your .emacs:
;(when (require 'elpy nil t)
;  (elpy-enable))
;; If you find the (Python Elpy yas AC ElDoc Fill) mode line annoying, also add:
;(elpy-clean-modeline)
(use-package elpy
  :ensure t
  :commands elpy-enable
  :init (with-eval-after-load 'python (elpy-enable))
  :config
    ;; Explicitly choose backend
    (setq elpy-rpc-backend "jedi")

    ;; replace flymake with flycheck for on-the-fly checking
    (when (require 'flycheck nil t)
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode))

    ;; Emable pep8 auto correct erros on save
    ;(require 'py-autopep8)
    ;(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

    ;; Use ipython as interpeter instead of just python
    ;; https://elpy.readthedocs.io/en/latest/ide.html#interpreter-setup
    (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "-i --simple-prompt")

    ;; use pdb with Elpy
    (setq gud-pdb-command-name "python -m pdb")
)
#+END_SRC

* exec-path-from-shell
https://github.com/purcell/exec-path-from-shell
A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :custom
    (exec-path-from-shell-check-startup-files nil)
  :config
    (push "HISTFILE" exec-path-from-shell-variables)
    (exec-path-from-shell-initialize)
)
#+END_SRC
* git gutter
https://github.com/syohex/emacs-git-gutter
Emacs port of GitGutter which is Sublime Text Plugin
Show icon in gutter area indicating if ins, mod or del

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :ensure t
  :defer 0.3
  :diminish
  :config
    (global-git-gutter-mode t)
)
#+END_SRC
* golden-ratio
https://github.com/roman/golden-ratio.el
http://pragmaticemacs.com/emacs/resize-your-windows-to-the-golden-ratio/
If you prefer to use a single large emacs frame with multiple windows inside, you might like the golden ratio package. This automatically resizes your windows so that the window containing the point is the largest (size determined by the mathematical golden ratio). This means that the window you are working in is nice and large but you can still see what is going on in the other windows.

Can also look at zoom for similar functionality
https://github.com/cyrus-and/zoom

Enable on buffer change?
https://github.com/roman/golden-ratio.el/issues/57

#+begin_src emacs-lisp
(use-package golden-ratio
  :ensure t
  :diminish golden-ratio-mode
  :init
    (golden-ratio-mode 1)
  :config
    (add-hook 'buffer-list-update-hook #'golden-ratio)
)
#+end_src
* gnus
#+BEGIN_SRC emacs-lisp
;;; -- gnus - Mail and News reader
(use-package gnus
  :ensure nil
  :custom
    ;;; Define how Gnus is to fetch news
    ;(setq gnus-select-method '(nntp "nntp.aioe.org"))
    (gnus-select-method '(nntp "news.eternal-september.org"))
    ;(setq nntp-authinfo-file "~/.authinfo.gpg") ;use gpg encrypted authfile
    (nntp-authinfo-function 'nntp-send-authinfo)

    ;; setup summary buffer
    (gnus-summary-line-format "%U%R%z%(%[%4L: %-20,20f%]%)%B %s\n")
    (gnus-summary-same-subject "")
    (gnus-sum-thread-tree-root " >")
    (gnus-sum-thread-tree-single-indent "  ")
    (gnus-sum-thread-tree-vertical "|")
    (gnus-sum-thread-tree-indent " ")
    (gnus-sum-thread-tree-leaf-with-other "+-> ")
    (gnus-sum-thread-tree-single-leaf "`-> ")

    ;; show even if there are no articles
    (gnus-permanently-visible-groups ".*")
)
#+END_SRC
* groovy-mode
https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes
A groovy major mode, grails minor mode, and a groovy inferior mode.

#+BEGIN_SRC emacs-lisp
(use-package groovy-mode
  :ensure t
  :mode "\\.groovy\\'\\|\\.gradle\\'"
)
#+END_SRC
* ibuffer
#+BEGIN_SRC emacs-lisp
;;; -- ibuffer - *Nice* buffer switching
;;
;; ibuffer filtering
;;
;; Search all marked buffers
;;   ‘M-s a C-s’ - Do incremental search in the marked buffers.
;;   ‘M-s a C-M-s’ - Isearch for regexp in the marked buffers.
;;   ‘U’ - Replace by regexp in each of the marked buffers.
;;   ‘Q’ - Query replace in each of the marked buffers.
;;   ‘I’ - As above, with a regular expression.
(use-package ibuffer
  :ensure nil
  :bind ( "C-x C-b" . ibuffer)
  :config
    ;; Don't show empty buffer groups
    (setq ibuffer-show-empty-filter-groups nil)

    ;; work groups for ibuffer
    (setq ibuffer-saved-filter-groups
          '(("default"
             ("version control" (or (mode . svn-status-mode)
                       (mode . svn-log-edit-mode)
                       (name . "^\\*svn-")
                       (name . "^\\*vc\\*$")
                       (name . "^\\*Annotate")
                       (name . "^\\*vc-")
                       (name . "^\\*git-")
                       (name . "^\\*magit")))
             ("emacs" (or (name . "^\\*scratch\\*$")
                          (name . "^\\*Messages\\*$")
                          (name . "^TAGS\\(<[0-9]+>\\)?$")
                          (name . "^\\*info\\*$")
                          (name . "^\\*Occur\\*$")
                          (name . "^\\*grep\\*$")
                          (name . "^\\*Compile-Log\\*$")
                          (name . "^\\*Backtrace\\*$")
                          (name . "^\\*Process List\\*$")
                          (name . "^\\*gud\\*$")
                          (name . "^\\*Man")
                          (name . "^\\*WoMan")
                          (name . "^\\*Kill Ring\\*$")
                          (name . "^\\*Completions\\*$")
                          (name . "^\\*tramp")
                          (name . "^\\*shell\\*$")
                          (name . "^\\*compilation\\*$")))
             ("Helm" (or (name . "\*helm\*")))
             ("Help" (or (name . "\*Help\*")
                         (name . "\*Apropos\*")
                         (name . "\*info\*")))
             ("emacs-source" (or (mode . emacs-lisp-mode)
                                 (filename . "/Applications/Emacs.app")
                                 (filename . "/bin/emacs")))
             ("emacs-config" (or (filename . ".emacs.d")
                                 (filename . "emacs-config")))
            ("org" (or (name . "^\\*org-")
                        (name . "^\\*Org")
                        (mode . org-mode)
                        (mode . muse-mode)
                        (name . "^\\*Calendar\\*$")
                        (name . "^+current$")
                        (name . "^diary$")
                        (name . "^\\*Agenda")))
             ("latex" (or (mode . latex-mode)
                          (mode . LaTeX-mode)
                          (mode . bibtex-mode)
                          (mode . reftex-mode)))
             ("dired" (or (mode . dired-mode)))
             ("perl" (mode . cperl-mode))
             ("erc" (mode . erc-mode))
             ("shell" (or (mode . shell-mode)
                            (name . "^\\*terminal\\*$")
                            (name . "^\\*ansi-term\\*$")
                            (name . "^\\*shell\\*$")
                            (name . "^\\*eshell\\*$")))
             ("gnus" (or (name . "^\\*gnus trace\\*$")
                            (mode . message-mode)
                            (mode . bbdb-mode)
                            (mode . mail-mode)
                            (mode . gnus-group-mode)
                            (mode . gnus-summary-mode)
                            (mode . gnus-article-mode)
                            (name . "^\\.bbdb$")
                            (name . "^\\.newsrc-dribble"))))))

    ;; Order the groups so the order is : [Default], [agenda], [emacs]
    (defadvice ibuffer-generate-filter-groups (after reverse-ibuffer-groups ()
                                                     activate)
      (setq ad-return-value (nreverse ad-return-value)))

    ;; Hide the following buffers
    ;;(setq ibuffer-never-show-predicates
    ;;      (list "\\*Completions\\*"
    ;;            "\\*vc\\*"))

    ;; Enable ibuffer expert mode, don't prompt on buffer deletes
    (setq ibuffer-expert t)

    ;; Load the 'work' group, can set to load groups by location
    ;; ibuffer-auto-mode is a minor mode that automatically keeps the buffer
    ;; list up to date. I turn it on in my ibuffer-mode-hook:
    (add-hook 'ibuffer-mode-hook
              '(lambda ()
                 (ibuffer-auto-mode 1)
                 (ibuffer-switch-to-saved-filter-groups "default")))
)
#+END_SRC
* ispell
https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html
ispell - interactive spell, set ispell checks to use aspell
on mac:  `brew install aspell --lang=en` (instead of ispell)

#+BEGIN_SRC emacs-lisp
(use-package ispell
  :ensure nil
  :defer t
  :custom
     (ispell-program-name "aspell")
     (ispell-list-command "list")
     ;; sug-mode=fast is more accurate, slower then ultra
     (ispell-extra-args '("--sug-mode=fast"))
)
#+END_SRC
* ivy, counsel, and counsel-projectile
https://github.com/abo-abo/swiper
http://cestlaz.github.io/posts/using-emacs-6-swiper/
https://www.reddit.com/r/emacs/comments/910pga/tip_how_to_use_ivy_and_its_utilities_in_your/

#+BEGIN_SRC emacs-lisp
;;; -- ivy-mode - a generic completion mechanism for Emacs
;;; swiper - an alternative to isearch uses ivy to show overview of all matches
;;; https://github.com/abo-abo/swiper
;;; changed from ("C-s"     . swiper) ;; Ivy-based interface to standard commands
(use-package ivy
  :ensure t
  :defer 0.1
  :init (ivy-mode 1)
  :commands ivy
  :bind (("C-s"     . counsel-grep-or-swiper) ;; swiper for small files, counsel-grep for larger
         ("C-x C-r" . counsel-recentf)
         ("<f6>"    . ivy-resume)
         ("M-x"     . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("<f1> f"  . counsel-describe-function)
         ("<f1> v"  . counsel-describe-variable)
         ("<f1> l"  . counsel-find-library)
         ("<f1> i"  . counsel-info-lookup-symbol)
         ("<f1> u"  . counsel-unicode-char)
         ("C-c G"   . counsel-git) ;;; Ivy-based interface to shell and system tools
         ("C-c j"   . counsel-git-grep)
         ("C-c k"   . counsel-ag)
         ("C-x l"   . counsel-locate)
         ("C-S-o"   . counsel-rhythmbox)
         ("C-r"     . counsel-minibuffer-history)) ;; disable M-x filter
  :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-display-style 'fancy)
    (ivy-use-virtual-buffers t)
    (enable-recursive-minibuffers t)
    (ivy-virtual-abbreviate 'full)
    (ivy-initial-inputs-alist nil)
    (ivy-dynamic-exhibit-delay-ms 250)
)
#+END_SRC

ivy-avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind
  (("C-c SPC" . avy-goto-word-1))
  :config
  (setq avy-background t))
#+END_SRC

counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :after ivy
  :config (counsel-mode)
)
#+END_SRC

ivy-rich (can't find package?) - removed
https://github.com/Yevgnen/ivy-rich
#+BEGIN_SRC emacs-lisp
;(use-package ivy-rich
;  :after ivy
;  :custom
;  (ivy-virtual-abbreviate 'full
;                          ivy-rich-switch-buffer-align-virtual-buffer t
;                          ivy-rich-path-style 'abbrev)
;  :config
;  (ivy-set-display-transformer 'ivy-switch-buffer
;                               'ivy-rich-switch-buffer-transformer))
#+END_SRC

swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :after ivy)
#+END_SRC

ivy counsel-projectile
#+BEGIN_SRC emacs-lisp
;; projectile ivy integration
(use-package counsel-projectile
  :ensure t
  :commands counsel-projectile)
#+END_SRC
* json-mode
https://github.com/joshwnj/json-mode
Major mode for editing JSON files with emacs

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t
  :commands json-mode)
#+END_SRC
* linum-mode
https://www.emacswiki.org/emacs/LineNumbers

#+BEGIN_SRC emacs-lisp
(use-package linum-mode
  :ensure nil
  :defer t
  :bind ("C-<f6>" . linum-mode)
;  :config
;    (setq linum-format "%d ") ;put space between linenumber and text
)
#+END_SRC
* magit
https://github.com/magit/magit
It's Magit! A Git porcelain inside Emacs. https://magit.vc

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer 0.3
  :commands magit
  :bind
    (("C-x g" . magit-status)
     ("C-x G" . magit-status-with-prefix)
     ("C-x M-g" . magit-dispatch-popup)
     ("C-c M-g" . global-magit-file-mode))
  :config
    (setq magit-completing-read-function 'ivy-completing-read)
)
#+END_SRC
* markdown-mode
https://jblevins.org/projects/markdown-mode/
markdown-mode is a major mode for editing Markdown-formatted text.

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands markdown-mode)
#+END_SRC
* multi-term - disabled
https://www.emacswiki.org/emacs/MultiTerm
MultiTerm is a mode based on term.el, for managing multiple terminal buffers in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :ensure f
  :disabled
)
#+END_SRC
* org-mode
#+BEGIN_SRC emacs-lisp
;; Enable easy templates (separated out in org-mode 9.2?), menu of template choices:  C-c C-,
;; https://orgmode.org/manual/Easy-templates.html
;; https://code.orgmode.org/bzg/org-mode/src/master/etc/ORG-NEWS#L65
(use-package org-tempo)

;; Prevent inadvertently edits an the invisible part of the buffer
(setq-default org-catch-invisible-edits 'smart)

;; Load additional exporters, or limit them with:  (setq org-export-backends '(ascii html latex odt))
;(eval-after-load 'org
;      (lambda()
;        (require 'ox-texinfo) ; texi and info
;        (require 'ox-md)      ; markdown
;        (require 'ox-odt)     ; opendoc text
;        (require 'ox-opml)
;        (require 'ox-confluence)))

;; Bind C-h o to org-info
(define-key global-map (kbd "C-h o") 'org-info)

;; The following lines are always needed.  Choose your own keys.
;(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cc" 'org-capture)

;; Set to the location of your Org files on your local system
(setq org-directory "~/org")

;; Open all txt files in org-mode
(add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))


;;; Agenda
;; Agenda window setup
(setq org-agenda-window-setup 'current-window) ;; don't kill my window setup

;; Include emacs diary, not needed if using org-anniversary
;(setq org-agenda-include-diary t)

;; Custom agenda commands
;; http://members.optusnet.com.au/~charles57/GTD/mydotemacs.txt
(setq org-agenda-custom-commands
'(
("P" "Projects"
              ((tags "PROJECT")))

("H" "Office and Home Lists"
     ((agenda)
          (tags-todo "OFFICE")
          (tags-todo "HOME")
          (tags-todo "COMPUTER")
          (tags-todo "DVD")
          (tags-todo "READING")))

("D" "Daily Action List"
     ((agenda "" ((org-agenda-ndays 1)
                     (org-agenda-sorting-strategy
                        (quote ((agenda time-up priority-down tag-up))))
                     (org-deadline-warning-days 0)
                     ))))))


;;; Capture
;; NOTE:  Fibonacci format: 0, 0.5, 1, 2, 3, 5, 8, 13, 20, 40, 100
;; Setup default target for notes and a global hotkey for new ones
;; NOTE:  Need org-mode version 6.3.6 or later for this to work
;; http://stackoverflow.com/questions/3622603/org-mode-setup-problem-when-trying-to-use-capture
(setq org-default-notes-file (expand-file-name "~/org/notes.org"))

;; Capture templates - C-c c t
;; Based on Sacha Chua's org-capture-tempaltes
;; http://pages.sachachua.com/.emacs.d/Sacha.html
(defvar dbj/org-basic-task-template "* TODO %^{Task}
SCHEDULED: %^t

:PROPERTIES:
:Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(defvar dbj/org-basic-jira-template "* TODO %^{Task}
SCHEDULED: %^t

:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:URL: %^L
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(defvar dbj/org-basic-someday-template "* %^{Task}
:PROPERTIES:
:Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?

%i" "Basic task data")

(setq org-capture-templates
      `(("t" "Tasks" entry
         (file+headline "~/org/gtd/newgtd.org" "Tasks"), dbj/org-basic-task-template)

        ("j" "Jira" entry
         (file+headline "~/org/gtd/newgtd.org" "Jira Tickets")
"* TODO %^{Task}
SCHEDULED: %^t

:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:URL: %^{URL}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?")

        ("s" "Someday task" entry
         (file+headline "~/org/gtd/someday.org" "Someday"), dbj/org-basic-someday-template)
        ;("j" "Journal entry" plain
        ; (file+datetree+prompt "~/org/gtd/journal.org")
        ; "%i\n%?\n")
        ("c" "Contact, email" entry (file "~/org/gtd/contacts.org")
          "* %(org-contacts-template-name)
:PROPERTIES:
:EMAIL: %(org-contacts-template-email)
:END:")
        ("C" "Contact, full" entry (file "~/org/gtd/contacts.org")
          "* %(org-contacts-template-name)
:PROPERTIES:
:EMAIL: %(org-contacts-template-email)
:PHONE:
:ALIAS:
:NICKNAME:
:IGNORE:
:ICON:
:NOTE:
:ADDRESS:
:BIRTHDAY:
:END:")
        ("n" "Notes" entry
          (file+datetree "~/org/gtd/notes.org")
          "* %?\n\n%i\n")
))


;;; Other
;; When adding new heading below the current heading, the new heading is
;; placed after the body instead of before it.  C-<RET>
(setq org-insert-heading-respect-content t)

;; Set Todo keywords, same as:
;; #+TODO: TODO(t) STARTED(s) WAITING(w) | DONE(d) CANCELED(c)
(setq org-todo-keywords
      '((sequence "TODO(t)" "STARTED(s)" "WAITING(w@/!)")
        (sequence "|" "DONE(d!)" "CANCELED(c@)")))

;; Set Tags, same as:
;; #+TAGS: home(h) work(w) @computer(c) @phone(p) errants(e)
(setq org-tag-alist '(("@office" . ?o) ("@home" . ?h) ("computer" . ?c)
                      ("phone" . ?p) ("reading" . ?r)))

;; Prevent C-k from killing whole subtrees and losing work
(setq org-special-ctrl-k t)

;; Fontify code buffers in org, instead of grey text
;; This is especially nice when you open an editing buffer with [Ctrl+c ']
;; to insert code into the #+begin_src ... #+end_src area.
(setq org-src-fontify-natively t)

;; org-refile (C-c C-w) settings from:
;; http://www.mail-archive.com/emacs-orgmode@gnu.org/msg34415.html
;(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-outline-path-complete-in-steps t)
;(setq org-completion-use-ido nil)
(setq org-refile-use-outline-path 'file)
(setq org-refile-targets '((org-agenda-files :maxlevel . 2)
                           (nil :maxlevel . 3)))

;; MobileOrg config
;; M-x org-mobile-push - copy org files to ~/Dropbox/MobileOrg
;; M-x org-mobile-pull - integrate remove changes into local org files
;;
;; Set to the location of your Org files on your local system
(setq org-directory "~/org")
;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull "~/org/flagged.org")
;; Set to <your Dropbox root directory>/MobileOrg.
(setq org-mobile-directory "~/Dropbox/Home/MobileOrg")

;;; Strike-through finished todos
;; sachachua.com/blog/2012/12/emacs-strike-through-headlines-for-done-tasks-in-org/
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (:foreground "PaleGreen"
                 :weight normal
                 :strike-through t))))
 '(org-headline-done
            ((((class color) (min-colors 16) (background dark))
               (:foreground "LightSalmon" :strike-through t)))))

;;; Make sure to hightlight mysql sql keywords:
;;; ex. #+BEGIN_SRC sql
;;;        SELECT foo FROM bar
;;;     #+END_SRC
(add-hook 'sql-mode-hook
          (lambda ()
            (sql-highlight-mysql-keywords)))

;;; Enable other org-babel langauges
(org-babel-do-load-languages
  (quote org-babel-load-languages)
  (quote ((emacs-lisp . t)
          ;(asymptote . t) ;Asymptote
          (awk . t)       ;Awk
          (C . t)         ;C
          ;(C++ . t)       ;C++
          ;(clojure . t)   ;Clojure
          ;(css . t)       ;CSS
          ;(d . f)        ;D
          ;(ditaa . f)     ;ditaa
          ;(dot . t)       ;Graphviz
          ;(calc . t)      ; Emacs Calc
          ;(fortran . t)   ;Fortran
          (gnuplot . t)   ;requires gnuplot installed
          ;(haskell . t)   ;Haskell
          (java . t)      ;Java
          (js . t)        ;Javascript
          ;(latex . t)     ;LaTeX
          (ledger . f)    ;Ledger
          (lisp . t)      ;Lisp
          ;(lilypond . t)  ;Lilypond
          ;(lua . t)       ;Lua
          ;(matlab . t)    ;MATLAB
          ;(mscgen . t)    ;Mscgen
          ;(ocaml . t)     ;Objective Caml
          ;(octave . t)    ;octave
          (org . t)       ;Org mode
          ;(oz . f)        ;Oz
          (perl . t)      ;Perl
          ;(plantuml . t)  ;Plantuml
          ;(processing . t) ;Processing.js
          (python . t)    ;Python
          ;(R . t)         ;R
          (ruby . t)      ;Ruby
          ;(sass . t)      ;Sass
          ;(scheme . t)    ;Scheme
          (screen . t)    ;GNU Screen
          (sed . t)       ;Sed
          (shell . t)     ;shell
          (sql . t)       ; SQL
          ;(sqlite .t)     ;SQLite
)))
#+END_SRC
* osx-trash
https://github.com/lunaryorn/osx-trash.el
Make Emacs' delete-by-moving-to-trash do what you expect it to do on OS X.

#+BEGIN_SRC emacs-lisp
(use-package osx-trash
   :ensure t
   :config
   (when (eq system-type 'darwin)
     (osx-trash-setup))
   (setq delete-by-moving-to-trash t)
)
#+END_SRC
* pdf-tools - disabled
#+BEGIN_SRC emacs-lisp
;;; Linux:
;;; sudo apt install libpoppler-glib-dev
;;;
;;; Mac:
;;; http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools/
;;; brew install poppular automake
;;;
;;; NOTE:  Had to disable pin manual for initial install
;;; or run M-x pdf-tools-install and ignore error about epdfinfo and restart
;(use-package pdf-tools
;  :pin manual ;; manually update?
;  ;:ensure t
;  :config
;  ;; speed up load times on systems with unicode symbols, set before init
;  (setq pdf-view-use-unicode-ligther nil)
;  ;; initialise
;  (pdf-tools-install)
;  ;; open pdfs scaled to fit page
;  (setq-default pdf-view-display-size 'fit-page)
;  ;; automatically annotate highlights
;  (setq pdf-annot-activate-created-annotations t)
;  ;; use normal isearch
;  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
;)
#+END_SRC
* projectile
https://github.com/bbatsov/projectile
http://batsov.com/projectile/
projectile - project managent (works with helm)
Project navigation and management library for Emacs
Keybindings: https://projectile.readthedocs.io/en/latest/usage/

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy) ; use ivy for completion
    (setq projectile-enable-caching t) ; enable caching
    (setq projectile-indexing-method 'alien) ; external cmd for indexing
    ;; put bookmark and cache in cache directory
    (setq projectile-known-projects-file (concat user-emacs-directory "cache/projectile-bookmarks.eld"))
    (setq projectile-cache-file (concat user-emacs-directory "cache/projectile.cache"))
)
#+END_SRC
* py-autopep8
https://github.com/paetzke/py-autopep8.el
py-autopep8.el integrates autopep8 into Emacs.
automaticly apply pep8 fixes on file save

#+begin_src emacs-lisp
(use-package py-autopep8
  :ensure t
  :config
     (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
     (setq py-autopep8-options '("--max-line-length=100"))
)
#+end_src
* pydoc-info
https://github.com/emacsmirror/pydoc-info
Search and browse the Python documentation in Info https://bitbucket.org/nil/pydoc-info

#+BEGIN_SRC emacs-lisp
(use-package pydoc-info
  :ensure t)
#+END_SRC
* recentf
https://www.emacswiki.org/emacs/RecentFiles
a minor mode that builds a list of recently opened files
http://www.masteringemacs.org/articles/2011/01/27/find-files-faster-recent-files-package/
(autoload 'recentf "recentf" "List recent files" t)

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :ensure nil
  :init (recentf-mode 1) ;; turn it on
  :custom
     (recentf-save-file "~/.emacs.d/cache/recentf")
     (recentf-auto-cleanup 200)
     (recentf-max-saved-items 200)      ;; max save file cache
     (recentf-max-menu-items 15)      ;; max 15 in menu
    ;(global-set-key "\C-x\ \C-r" 'recentf-open-files)
    ;(global-set-key (kbd "C-x C-r") 'helm-recentf)
)
#+END_SRC
* restclient
https://github.com/pashky/restclient.el
HTTP REST client tool for emacs

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :ensure t)
#+END_SRC
* s
https://github.com/magnars/s.el
The long lost Emacs string manipulation library

#+BEGIN_SRC emacs-lisp
(use-package s
  :ensure t)
#+END_SRC
* sane-term
https://github.com/adamrt/sane-term
Cycle through terms in emacs

#+begin_src emacs-lisp
(use-package sane-term
  :ensure t
  :bind (
    ("C-x t" . sane-term)
    ("C-x T" . sane-term-create))
)
#+end_src
* shell-pop - disabled
https://github.com/kyagi/shell-pop-el
shell-pop.el helps you to use shell easily on Emacs. Only one key action to work.

#+BEGIN_SRC emacs-lisp
;(require 'shell-pop)
;(use-package shell-pop
;  :ensure t
;  :bind ("C-c t" . shell-pop)
;  :config
;    (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
;    (setq shell-pop-term-shell "/bin/bash")
;    ;(setq shell-pop-universal-key "C-t")
;    ;; need to do this manually or not picked up by `shell-pop'
;    (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type)
;)
#+END_SRC
* smex
https://github.com/nonsequitur/smex
A smart M-x enhancement for Emacs.
counsel-M-x re-uses smex while offering extra features.

#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :defer t
  ;:bind (("M-x" . smex)
  ;       ("M-X" . smex-major-mode-commands))
  :config
  (progn
    (smex-initialize)))
#+END_SRC
* switch-window
https://github.com/dimitri/switch-window
Offer a *visual* way to choose a window to switch to http://tapoueh.org/projects.html#sec19

#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :ensure t
  :bind ("C-x o" . switch-window)
)
#+END_SRC
* tramp
https://www.gnu.org/software/tramp/
TRAMP is for transparently accessing remote files from within Emacs

#+BEGIN_SRC emacs-lisp
(use-package tramp
  :ensure nil
  :config
    ;(custom-set-variables '(tramp-verbose 10)) ;; debugging info
    ;(setq tramp-debug-buffer t)

    ;; we need a bit more funky pattern, as tramp will start $SHELL
    ;; (sudo -s), ie., zsh for root user
    (setq shell-prompt-pattern "^[^a-zA-Z].*[#$%>] *")
    ;(setq tramp-shell-prompt-pattern "^[^$>\n]*[#$%>] *\\(\[[0-9;]*[a-zA-Z] *\\)*")
    (setq
      tramp-default-method "sshx"  ;; inline method w/diff interactive shell
      ;tramp-default-method "scpx" ;; external method w/diff interactive shell
      tramp-persistency-file-name "~/.emacs.d/cache/tramp"
      tramp-auto-save-directory "~/.emacs.d/auto-save-list"
      tramp-terminal-type "dumb")  ;; fix remote shell hanging, change .bashrc to
                                   ;; for TERM=dumb and set PS1='$ '

    ;; fix "ls does not support --dired; see `dired-use-ls-dired' for more details."
    ;; it seems that only GNU ls supports --dired
    (setq ls-lisp-use-insert-directory-program nil)
    (require 'ls-lisp)

    ;; Speed up tramp by disabling version control on remote files
    ;; http://www.gnu.org/software/emacs/manual/html_node/tramp/Frequently-Asked-Questions.html
    (setq vc-ignore-dir-regexp
          (format "\\(%s\\)\\|\\(%s\\)"
                  vc-ignore-dir-regexp
                  tramp-file-name-regexp))

    ;; Set remote shell to be /bin/bash
    ;; http://superuser.com/questions/454288/how-to-specify-for-emacs-tramp-which-remote-shell-to-open
    (setq explicit-shell-file-name "/bin/bash")
)
#+END_SRC
* visual-regexp
https://github.com/benma/visual-regexp.el
A regexp/replace command for Emacs with interactive visual feedback

#+BEGIN_SRC emacs-lisp
(use-package visual-regexp
   :ensure t
   :config
   (define-key global-map (kbd "C-c r") 'vr/replace)
   (define-key global-map (kbd "C-c q") 'vr/query-replace)
   ;; if you use multiple-cursors, this is for you:
   (define-key global-map (kbd "C-c m") 'vr/mc-mark)
)
#+END_SRC
* which-key
https://github.com/justbur/emacs-which-key
Emacs package that displays available keybindings in popup

#+BEGIN_SRC emacs-lisp
(use-package which-key
   :ensure t
   :defer 10
   :config
   (progn
     (setq which-key-popup-type 'side-window) ;Default
      ;; (setq which-key-popup-type 'minibuffer)

      (setq which-key-compute-remaps t) ;Show correct descriptions for remapped keys

      (setq which-key-allow-multiple-replacements t) ;Default = nil
      (which-key-mode))
)
#+END_SRC
* yasnippet - disabled
https://github.com/joaotavora/yasnippet
A template system for Emacs http://joaotavora.github.com/yasnippet/

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure f
  :disabled
)
#+END_SRC
* zenburn-theme
https://github.com/bbatsov/zenburn-emacs
The Zenburn colour theme ported to Emacs

#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :ensure t
  :config
  (load-theme 'zenburn t))
#+END_SRC
