-*- mode: org; fill-column: 78; -*-
#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent
#+PROPERTY: header-args:emacs-lisp :tangle ./emacs-init.el :mkdirp yes

* Startup
** Initialization
Transfered from original ~/.emacs.d/init.el
Moved use-package and org-plus-contrib back to init.el to fix org-version issue

#+begin_src emacs-lisp
;;; init.el --- -*- lexical-binding: t -*-
;;  Author: Douglas Jackson
;;; Commentary:
;;  My Emacs configuration
;;; Code:

;;; Note: Some Performance Advantages of Lexical Scope:
;;; https://nullprogram.com/blog/2016/12/22/

;; whoami?
(setq
 user-full-name "Douglas Jackson"
 user-mail-address "hpotter@hogworts.edu")

;; more useful frame title that shows either a file or a
;; buffer name (if the buffer isn't visiting a file)
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))

;;;; Load Customizations if they exist
;; https://lupan.pl/dotemacs/
(setq custom-file "~/Sync/elisp/custom.el")
(if (file-exists-p custom-file)
    (load custom-file))

;;;; Add 'info' and 'elisp' to load-path (C-h v load-path RET)
(add-to-list 'Info-default-directory-list "~/.emacs.d/info")
(add-to-list 'load-path "~/.emacs.d/elisp/") ;; elisp packages not in pkg manager

;;; Reload .emacs file with: M-x reload-config
(defun reload-config () "Reloads .emacs interactively."
  (interactive)
  (load "~/.emacs.d/emacs-init.el"))

;;;; Only start server if it is not currently running
;(require 'server) ;; Note: (start-server) is now mostly deprecated
(load "server")
(setq server-socket-dir "~/.emacs.d/var/tmp")
(unless (server-running-p) (server-start))
#+end_src

** enable disabled functions
#+begin_src emacs-lisp
;; Upcase and downcase regions
(put 'upcase-region 'disabled nil)  ; C-x C-u
(put 'downcase-region 'disabled nil)  ; C-x C-l

;; Sets the current horizontal position for C-n and C-p
(put 'set-goal-column 'disabled nil)

;; Restrict buffer editing to a region
;; Text Narrowing commands:
;;   Region: C-x n n, Page: C-x n p
;;   Funct: C-x n p, Widen: C-x n w
;;   Subtree in Org-Mode:   C-x n s
(put 'narrow-to-region 'disabled nil)

;; Goal Column, enter C-x C-n, at point to set column that C-n should go to
;; to clear enter C-u C-x C-n
(put 'set-goal-column 'disabled nil)

;; https://www.emacswiki.org/emacs/ZapUpToChar
(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR.")
(global-set-key (kbd "M-z") 'zap-up-to-char)

;; disable electric-indent if active, added in Emacs 24.4
(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
#+end_src

** global key bindings
#+begin_src emacs-lisp

;;; test out electric buffer mode - disabled, nice, but navigation highlighted every line
;;; also, buffer management (deleting, etc) wasn't as polisihed as iBuffer
(global-set-key (kbd "C-x C-b") 'electric-buffer-list)

;;; https://stackoverflow.com/questions/93058/emacs-switching-to-another-frame-mac-os-x
; Re-enable swap frames with M-`
;(global-set-key "\M-`" 'other-frame)

;; Open an Emacs eshell, shell, term, or ansi-term
(global-set-key (kbd "C-c te") 'eshell)
(global-set-key (kbd "C-c ts") 'shell)
(global-set-key (kbd "C-c tt") 'term)
(global-set-key (kbd "C-c ta") 'ansi-term)
;(global-set-key (kbd "C-c tv") 'vterm) ; moved to vterm

;; Show a summery of all registers with content
(global-set-key (kbd "C-x r v") 'list-registers)

;; Move through windows in reverse order of (other-window), C-x o
(global-set-key (kbd "C-x O") 'previous-multiframe-window)

;; Invoke M-x without the Alt key (from Steve Yegge's blog)
(global-set-key (kbd "C-x C-m") 'execute-extended-command)
(global-set-key (kbd "C-c C-m") 'execute-extended-command)
#+end_src

** global settings
#+begin_src emacs-lisp

;; set default shell to zsh
(setq explicit-shell-file-name "/bin/zsh")
(setq shell-file-name "zsh")
(setq explicit-bash.exe-args '("--noediting" "--login" "-i"))
(setenv "SHELL" shell-file-name)

;; Remove trailing whitespace on save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; automatically follow symlinks to files under version control without prompting
(setq vc-follow-symlinks t)

;;; Kill line backwards
;;; http://emacsredux.com/blog/2013/04/08/kill-line-backward/
(global-set-key (kbd "C-<backspace>") (lambda ()
                                        (interactive)
                                        (kill-line 0)
                                        (indent-according-to-mode)))

;;; Ping settings (from net-util.el)
;;; http://www.masteringemacs.org/articles/2011/03/02/network-utilities-emacs/
(defvar ping-program-options)
(setq ping-program-options '("-c" "4"))

;;; Enable whitespace-mode for diff buffers
;;; http://stackoverflow.com/questions/11805584/automatically-enable-whitespace-mode-in-diff-mode
(add-hook 'diff-mode-hook
          '(lambda ()
            (whitespace-mode 1)))

;;; Mouse wheel and keyboard scroll settings
;;; scroll one line at a time (less "jumpy" than defaults)
;(setq mouse-wheel-follow-mouse 't)     ;scroll window under mouse
;(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil))) ;1 line
;(setq mouse-wheel-progressive-speed 'nil) ;'nil disables accelerated scrolling
;;(setq scroll-step 1                    ;keyboard scroll one line at a time
;;      scroll-preserve-screen-position t
;;      scroll-conservatively 10000)     ;smooth scrolling

;;; Enable holidays in Calendar
(setq mark-holidays-in-calendar t)

;; w/o-man mode (elisp man page formater for systems without 'man')
(defvar woman-show-log)
(defvar woman-cache-filename)
(setq woman-show-log nil)
(autoload 'woman "woman"
  "Decode and browse a Unix man page." t)
(setq woman-cache-filename "~/.emacs.d/var/woman_cache.el")

;;; Make tooltips appear in the echo area (checks if function exists)
(tooltip-mode nil)

;; Use CUA mode for rectangles (C-RET to select, normal emacs keys to copy)
;;; http://emacs-fu.blogspot.com/2010/01/rectangles-and-cua.html
(setq cua-enable-cua-keys nil)  ;; only for rectangles, keeps (C-c, C-v, C-x).
(cua-mode t)

;;; Don't show the startup screen
(setq inhibit-startup-message t)

;;; Disable startup message in scratch buffer
(setq-default initial-scratch-message nil)
;;; Set scratch buffer initial mode to text instead of lisp eval
;(setq-default initial-major-mode 'text-mode)
;;; Don't create new lines when pressing 'arrow-down key' at end of the buffer
(setq next-line-add-newlines nil)

;;; Fix delete key working as backspace and not forward deleting
;;; (This only worked in window mode, not terminal. C-d works in both)
(when window-system (normal-erase-is-backspace-mode 1))

;;; Alias to change apropos to ap
(defalias 'ap 'apropos)

;;; hl-line: highlight the current line
(when (fboundp 'global-hl-line-mode)
  (global-hl-line-mode t)) ;; turn it on for all modes by default

;;; Make text mode default major mode with auto-fill enabled
(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode) ;replaces longlines in 23

;;; Auto-scroll in *Compilation* buffer
(setq compilation-scroll-output t)

;;; make Emacs always indent using SPC characters and never TABs
;;; i.e. use spaces instead of tabs
;;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Just-Spaces.html
(setq-default indent-tabs-mode nil)

;;; "y or n" instead of "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)

;;; Highlight regions and add special behaviors to regions.
;;; "C-h d transient" for more info.  transient-mark-mode is a toggle.
;;; also in Emacs 22 and greater, C-SPC twice to temp enable transient mark
;(setq transient-mark-mode nil)
(setq transient-mark-mode t)

;;; Display line and column numbers in the mode line
(setq line-number-mode    t
      column-number-mode  t)

;;; Stop blinking cursor
(blink-cursor-mode 0)

;;; Explicitly show the end of a buffer (indicated on left fringe of window)
(set-default 'indicate-empty-lines t)

;;; Line-wrapping
(set-default 'fill-column 78)

;; Don't truncate lines
(setq truncate-lines t
      truncate-partial-width-windows nil)

;; Create new scratch buffer if needed
(run-with-idle-timer 1 t
    '(lambda () (get-buffer-create "*scratch*")))

;; allow scroll-down/up-command to move point to buffer end/beginning
;(setq scroll-error-top-bottom 'true)

;; New json-mode
(setq auto-mode-alist (cons '("\\.json\\'" . js-mode) auto-mode-alist))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bookmarks
;;    ‘C-x r m’ – set a bookmark at the current location (e.g. in a file)
;;    ‘C-x r b’ – jump to a bookmark
;;    ‘C-x r l’ – list your bookmarks
;;    ‘M-x bookmark-delete’ – delete a bookmark by name
(setq
  bookmark-default-file "~/.emacs.d/var/bookmarks" ;; bookmark file location
  bookmark-save-flag 1)                   ;; autosave each change)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

** functions
#+begin_src emacs-lisp
;;; ---------------------------------------------------------------------------
;;; https://stackoverflow.com/questions/8881649/how-to-force-org-mode-to-open-a-link-in-another-frame
;;; Open link at point in new frame
(defun zin/org-open-other-frame ()
  "Jump to bookmark in another frame. See `bookmark-jump' for more."
  (interactive)
  (let ((org-link-frame-setup (acons 'file 'find-file-other-frame org-link-frame-setup)))
    (org-open-at-point)))
(global-set-key (kbd "C-c 5 C-o") 'zin/org-open-other-frame)

;;; ---------------------------------------------------------------------------
;;; https://gist.github.com/mwfogleman/95cc60c87a9323876c6c
;;; http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
(defun narrow-or-widen-dwim ()
  "If the buffer is narrowed, it widens. Otherwise, it narrows to region, or Org subtree."
  (interactive)
  (cond ((buffer-narrowed-p) (widen))
        ((region-active-p) (narrow-to-region (region-beginning) (region-end)))
        ((equal major-mode 'org-mode) (org-narrow-to-subtree))
        (t (error "Please select a region to narrow to"))))
(global-set-key (kbd "C-c x") 'narrow-or-widen-dwim)  ; was: C-c n

;; I bind this key to C-c n, using the bind-key function that comes with use-package.
;(bind-key "C-c n" 'narrow-or-widen-dwim)
;; I also bind it to C-x t n, using Artur Malabarba's toggle map idea:
;; http:://www.endlessparentheses.com/the-toggle-map-and-wizardry.html

;;; ---------------------------------------------------------------------------
;;; Move lines up or down (can't easily use C-S on MacOS)
;;; http://whattheemacsd.com//editing-defuns.el-02.html
(defun move-line-down ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines 1))
    (forward-line)
    (move-to-column col)))

(defun move-line-up ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines -1))
    (move-to-column col)))

;(global-set-key (kbd "<C-S-down>") 'move-line-down)
;(global-set-key (kbd "<C-S-up>") 'move-line-up)
(global-set-key (kbd "<M-S-down>") 'move-line-down)
(global-set-key (kbd "<M-S-up>") 'move-line-up)

;;; ---------------------------------------------------------------------------
;;; Match Paren / based on the vim command using %
;;; emacs for vi users: http://grok2.tripod.com
(defun match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
        (t (self-insert-command (or arg 1)))))
(global-set-key "%" 'match-paren)

;;; ---------------------------------------------------------------------------
(defun intelligent-close ()
  "quit a frame the same way no matter what kind of frame you are on.

This method, when bound to C-x C-c, allows you to close an emacs frame the
same way, whether it's the sole window you have open, or whether it's
a \"child\" frame of a \"parent\" frame.  If you're like me, and use emacs in
a windowing environment, you probably have lots of frames open at any given
time.  Well, it's a pain to remember to do Ctrl-x 5 0 to dispose of a child
frame, and to remember to do C-x C-x to close the main frame (and if you're
not careful, doing so will take all the child frames away with it).  This
is my solution to that: an intelligent close-frame operation that works in
all cases (even in an emacs -nw session).

Stolen from http://www.dotemacs.de/dotfiles/BenjaminRutt.emacs.html."
  (interactive)
  (if (eq (car (visible-frame-list)) (selected-frame))
      ;;for parent/master frame...
      (if (> (length (visible-frame-list)) 1)
          ;;close a parent with children present
          (delete-frame (selected-frame))
        ;;close a parent with no children present
        (save-buffers-kill-emacs))
    ;;close a child frame
    (delete-frame (selected-frame))))
(global-set-key "\C-x\C-c" 'intelligent-close) ;forward reference
#+end_src

* Utilities
** Helpful
Helpful is an alternative to the built-in Emacs help that provides much more contextual information.
https://github.com/Wilfred/helpful

#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :bind
  (("C-h f" . helpful-callable)
   ("C-h v" . helpful-variable)
   ("C-h k" . helpful-key)
  ;;
  ;; Lookup the current symbol at point. C-c C-d is a common keybinding
  ;; for this in lisp modes.
  ;("C-c C-d" . helpful-at-point)  # keys already bound to Cal Deadline

  ;; Look up *F*unctions (excludes macros).
  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
  ;; already links to the manual, if a function is referenced there.
  ("C-h F" . helpful-function)

  ;; Look up *C*ommands.
  ;;
  ;; By default, C-h C is bound to describe `describe-coding-system'. I
  ;; don't find this very useful, but it's frequently useful to only
  ;; look at interactive functions.
  ("C-h C" . helpful-command)
))
#+end_src

** Su/Sudo
read-only files will be writable but if you attempt to save your modifications, emacs will ask root user’s password if needed. Can save pw to ~/.authinfo.
https://github.com/PythonNut/su.el

NOTE: Installed in elisp, no package

#+begin_src emacs-lisp
(use-package su
  :ensure nil
  ;:straight (:host github :repo "PythonNut/su.el")
  :config (su-mode +1))
#+end_src

** recentf
a minor mode that builds a list of recently opened files
https://www.emacswiki.org/emacs/RecentFiles

#+begin_src emacs-lisp
(use-package recentf
  :ensure nil
  :config
  (setq recentf-save-file "~/.emacs.d/var/cache/recentf"
        recentf-max-saved-items 500
        recentf-max-menu-items 15
        ;; disable recentf-cleanup on Emacs start, because it can cause
        ;; problems with remote files
        recentf-auto-cleanup 'never)
  (recentf-mode +1))
#+end_src

** ace-window
The [[https://github.com/abo-abo/ace-window][ace-window]] package provides functions to quickly switch between
windows. The main =ace-window= command will either switch to the one
other open window or let you select another window by typing the first
letters of the its label. Additionally, this package can swap and
delete windows.

#+begin_src emacs-lisp
(use-package ace-window
  :ensure nil
  :init (setq aw-scope 'frame)
  :bind (("M-o" . ace-window)))
#+end_src
* OS Settings
** MacOS
#+begin_src emacs-lisp
(cond ((eq system-type 'darwin)
;	(setq mac-command-modifier 'meta
;	      mac-option-modifier 'alt
;	      mac-right-option-modifier 'super)

;; set keys for Apple keyboard, for emacs in OS X
(setq mac-command-modifier 'meta) ; make cmd key do Meta
(setq mac-option-modifier 'super) ; make opt key do Super
(setq mac-control-modifier 'control) ; make Control key do Control
;(setq ns-function-modifier 'hyper)  ; make Fn key do Hyper

;; Use meta +/- to change text size
(bind-key "M-+" 'text-scale-increase)
(bind-key "M-=" 'text-scale-increase)
(bind-key "M--" 'text-scale-decrease)

;; This is copied from
;; https://zzamboni.org/post/my-emacs-configuration-with-commentary/
(defun my/text-scale-reset ()
  "Reset text-scale to 0."
  (interactive)
  (text-scale-set 0))
(bind-key "M-g 0" 'my/text-scale-reset)

;;; set font size to 15, overriding default 12
; M-x describe-font:
; Monaco:pixelsize=12:weight=normal:slant=normal:width=normal:spacing=100:scalable=true
;(set-face-attribute 'default (selected-frame) :height 150)
(set-face-attribute 'default nil :height 150)

;; Osx-trash
;; Make Emacs' delete-by-moving-to-trash do what you expect it to do on OS X.
;; https://github.com/lunaryorn/osx-trash.el
;(use-package osx-trash
;   :ensure t
;   :config
;   (setq delete-by-moving-to-trash t)
;   (osx-trash-setup)
;)

;A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell
;https://github.com/purcell/exec-path-from-shell
;
;Needed to find aspell and probably others
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
     (setq exec-path-from-shell-check-startup-files nil ;; don't warn about env
           exec-path-from-shell-variables '("PATH" "MANPATH")
           exec-path-from-shell-arguments nil  ; was '("-l")
           ;exec-path-from-shell-debug 1   ; enable debugging
           ;exec-path-from-shell--debug 1  ; print msg if debug enabled
     )
     (exec-path-from-shell-initialize)
  )
)

;; Disable railwaycat's tab bar
;; https://github.com/railwaycat/homebrew-emacsmacport/issues/123
(defvar mac-frame-tabbing)
(setq mac-frame-tabbing nil)

;; Don't open up new frames for files dropped on icon, use active frame
(defvar ns-pop-up-frames)
(setq ns-pop-up-frames nil)

;; Drag and drop on the emacs window opens the file in a new buffer instead of
;; appending it to the current buffer
;; http://stackoverflow.com/questions/3805658/how-to-configure-emacs-drag-and-drop-to-open-instead-of-append-on-osx
(if (fboundp 'ns-find-file)
    (global-set-key [ns-drag-file] 'ns-find-file))

;; Move deleted files to the System's trash can
;; set trash-directory otherwise uses freedesktop.org-style
(setq trash-directory "~/.Trash")
(setq delete-by-moving-to-trash t)

;; Macbook Pro has no insert key.
;; http://lists.gnu.org/archive/html/help-gnu-emacs/2006-07/msg00220.html
(global-set-key (kbd "C-c I") (function overwrite-mode))

;;; Open up URLs in mac browser
(setq browse-url-browser-function 'browse-url-default-macosx-browser)
; (setq browse-url-browser-function 'browse-url-default-windows-browser)

;;; Copy and paste into Emacs Terminal
;;; stack overflow, pasting text into emacs on Macintosh
;;; Copy - C-x M-w
;;; Paste - C-x C-y
(defun pt-pbpaste ()
  "Paste data from pasteboard."
  (interactive)
  (shell-command-on-region
    (point)
    (if mark-active (mark) (point))
    "pbpaste" nil t))

(defun pt-pbcopy ()
  "Copy region to pasteboard."
  (interactive)
  (print (mark))
  (when mark-active
    (shell-command-on-region
      (point) (mark) "pbcopy")
    (kill-buffer "*Shell Command Output*")))
(global-set-key [C-x C-y] 'pt-pbpaste)
(global-set-key [C-x M-w] 'pt-pbcopy)

;; add the missing man page path for woman
;; https://www.reddit.com/r/emacs/comments/ig7zzo/weekly_tipstricketc_thread/
;(add-to-list 'woman-manpath
;             "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/share/man")
;(add-to-list 'woman-manpath
;             "/Applications/Xcode.app/Contents/Developer/usr/share/man")
;(add-to-list 'woman-manpath
;             "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/share/man")

;; On a Mac: make Emacs detect if you have light or dark mode enabled system wide.
;;If you have two themes, a light one and a dark one, and you want the dark theme by default unless you have light mode enabled, add this to your init.el:

;; If we're on a Mac and the file "~/bin/get_dark.osascript" exists
;; and it outputs "false", activate light mode. Otherwise activate
;; dark mode.
;(cond ((and (file-exists-p "~/bin/get_dark.osascript")
;	     (string> (shell-command-to-string "command -v osascript") "")
;	     (equal "false\n"
;		    (shell-command-to-string "osascript ~/bin/get_dark.osascript")))
;	(mcj/theme-set-light))
;      (t (mcj/theme-set-dark)))

;; (mcj/theme-set-light and mcj/theme-set-light are functions that enable the light and the dark theme, respectively).

;;~/bin/get_dark.osascript contains the following:
;;
;;tell application "System Events"
;;	  tell appearance preferences
;;		get dark mode
;;	  end tell
;;end tell
))
#+end_src

** Linux
#+begin_src emacs-lisp
;; -=Linux specific settings
(cond ((eq system-type 'gnu/linux)
(defvar browse-url-browser-function)
(defvar browse-url-browser-program)
;;; http://stackoverflow.com/questions/15277172/how-to-make-emacs-open-all-buffers-in-one-window-debian-linux-gnome
;(setq pop-up-frames 'graphic-only)
(setq pop-up-frames nil)

;;; http://stackoverflow.com/questions/4506249/how-to-make-emacs-org-mode-open-links-to-sites-in-google-chrome
;;; Open up URLs in browser using gnome-open (errors on bytecompile)
;(setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "gnome-open")
(setq browse-url-browser-function 'browse-url-firefox)

;;; Problems with minibuffer font size display in KDE/Crunchbang/Unity(?), explictily set font
;;; List fonts with M-x descript-font
;(set-default-font "Monospace-10")
))
#+end_src
* Look and feel
** Better defaults
A small number of better defaults for Emacs
Some taken from:
  https://github.com/technomancy/better-defaults
  https://git.sr.ht/~technomancy/better-defaults

#+begin_src emacs-lisp
(require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

;; When you visit a file, point goes to the last place where it was when you previously visited the same file.
;; https://www.emacswiki.org/emacs/SavePlace
(save-place-mode 1)
;(setq save-place-file (locate-user-emacs-file "places" ".emacs-places"))
(setq save-place-file (concat user-emacs-directory "var/places"))
(setq save-place-forget-unreadable-files nil)

(global-set-key (kbd "M-/") 'hippie-expand)

(show-paren-mode 1)
(setq-default indent-tabs-mode nil)
(savehist-mode 1)

(setq save-interprogram-paste-before-kill t
      apropos-do-all t
      ;mouse-yank-at-point t
      require-final-newline t
      visible-bell t
      load-prefer-newer t
      ediff-window-setup-function 'ediff-setup-windows-plain
      backup-directory-alist `(("." . ,(concat user-emacs-directory
                                               "var/backups"))))
#+end_src

** First disable all themes
Disable all themes before loading a theme
#+begin_src emacs-lisp
(defadvice load-theme (before disable-themes-first activate)
  (fk/disable-all-themes))

(defun fk/disable-all-themes ()
  "Disable all active themes."
  (interactive)
  (dolist (theme custom-enabled-themes)
    (disable-theme theme)))
#+end_src

load-theme without annoying confirmation
#+begin_src emacs-lisp
(advice-add 'load-theme
            :around
            (lambda (fn theme &optional no-confirm no-enable)
              (funcall fn theme t)))
#+end_src

** Dracula theme
dracula-theme with telephone line status bar
https://github.com/dracula/emacs
https://www.reddit.com/r/emacs/comments/he55jl/whats_the_funky_character_on_the_mode_line/
#+begin_src emacs-lisp
(use-package dracula-theme
  :ensure t
  :init
  (setq dracula-enlarge-headings nil)
  (setq dracula-alternate-mode-line-and-minibuffer t)
  :config
  (if (display-graphic-p)
      (load-theme 'dracula :no-confirm)	 ; Emacs in own window (zenburn)
    (load-theme 'wheatgrass :no-confirm)  ; Emacs in tty
  )
)
#+end_src

** all-the-icons
All-the-icons
https://github.com/domtronn/all-the-icons.el
NOTE: Install the fonts as well: M-x all-the-icons-install-fonts

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t)
#+end_src

** doom-modeline
A fancy and fast mode-line inspired by minimalism design.
https://seagle0128.github.io/doom-modeline/

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  ;; Fix? for Height below 25 not working anymore #187
  ;; https://github.com/seagle0128/doom-modeline/issues/187
  (defun my-doom-modeline--font-height ()
    "Calculate the actual char height of the mode-line."
    (+ (frame-char-height) 1))
  (advice-add #'doom-modeline--font-height :override #'my-doom-modeline--font-height)
)
#+end_src

* Productivity
** Daily log
#+begin_src emacs-lisp
;;; -- daily log -

(defun daily-log ()
  "Automatically opens my daily log file and positions cursor at end of
last sentence."
  (interactive)
  ;(diary)
  (find-file "~/org/DailyLogs/+current") ;symlink to current log
  (goto-char (point-max))  ;go to the maximum accessible value of point
  (search-backward "* Notes") ;search to Notes section first to bypass notes
  (if (re-search-backward "[.!?]") ;search for punctuation from end of file
      (forward-char 1))
  )
(global-set-key (kbd "<f9>") 'daily-log)

;;; ---------------------------------------------------------------------------
;(diary)

;; Email 1
;; I have been using a simple system for writing notes day by day.  Kind of
;; like a diary.  It's really very unsophisticated but helpful.  It will allow
;; you to make notes into a template file.  Weeks, Months (etc...) later, you
;; can refer to them.
;;
;; For those who have never seen it
;; http://aonws01/unix-admin/Daily_Logs/Jerry_Sievers/
;;
;; Many of you new guys' questions to me have been answered from these notes
;; (eg, license keys info, who's who and so forth).
;;
;; John Sconiers asked about this and I set him up with it.  Whole procedure
;; takes only a few minutes to install and probably about fifteen minutes per
;; day to keep up to date.  An investment in time that pays off later.  Other
;; admins who have left Aon used this and liked it too.
;;
;; It also comes with a CGI program which, if your home directory is
;; accessible to aonws01, can allow others to browse your diary (I hear
;; cheering and booing...)
;;
;; Please let me know.  It would be nice to have everyone using this thing at
;; least minimally.

;; Email 2
;; Chris, I have installed the package in your home directory.  Files are in
;; Aon/DailyLogs.  The current log has a symbolic link named +Current.  You
;; also have an alias 'diary' which you can type at the shell.  Doing so will
;; invoke vi on the +Current file and position the cursor on the very last '.'
;; character in the file.  I have added the $HOME/bin directory to your path
;; and created one cron job to stamp the 'monday' file weekly.
;;
;; You should run the command 'new-daily-log' once per week to start a new
;; file.  Optionally, the previous file can be emailed to the destination of
;; your choice.  See the Aon/DailyLogs/.config file for details.
;;
;; Please call if you have any questions.
#+end_src

** Which Key (Keybinding Completion)
Emacs package that displays available keybindings in popup
https://github.com/justbur/emacs-which-key

Paging: C-h
    Cycle through the pages forward with n (or C-n)
    Cycle backwards with p (or C-p)
    Undo the last entered key (!) with u (or C-u)
    Call the default command bound to C-h, usually describe-prefix-bindings, with h (or C-h)

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :defer 10
  :init (which-key-mode)
  :config
  (setq which-key-idle-delay 1)
  (setq which-key-setup-side-window-bottom t) ; Default
  (setq which-key-popup-type 'side-window) ;Default
)
#+end_src
