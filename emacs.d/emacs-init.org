#-*- mode: org; fill-column: 78 -*-
#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent

# To look into:  hydra, swiper, counsel, org, ripgrep, fasd, expand-region
* Init
Transfered from ~/.emacs.d/init.el

#+begin_src emacs-lisp
;; whoami?
(setq
 user-full-name "Douglas Jackson"
 user-mail-address "hpotter@hogworts.edu")

;; set elpa directory name based on emacs major version
;(setq package-user-dir (format "~/.emacs.d/elpa-%d" emacs-major-version)) ;elpa-27
(setq package-user-dir (concat "~/.emacs.d/elpa-" emacs-version)) ;elpa-27.1

;; To refresh package list, run:  M-x package-refresh-contents
;; To manually update installed packages:  M-x package-list-packages U x
(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives
      '(
        ;("elpy"  . "http://jorgenschaefer.github.io/packages/") ; elpy package archive
        ("gnu"   . "https://elpa.gnu.org/packages/") ; default package archive
        ("org"   . "https://orgmode.org/elpa/") ; provides org-plus-contrib
        ("melpa" . "https://melpa.org/packages/") ; milkypostman's pkg archive
))
(package-initialize)

;; install use-package - https://github.com/jwiegley/use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Disable ad-redefinition-action messages on startup
;; Caused by third party functions redefining defadvice
;; https://andrewjamesjohnson.com/suppressing-ad-handle-definition-warnings-in-emacs/
(setq ad-redefinition-action 'accept)

;;; Ignore byte-compile warning
;; ex. for Emacs 27: Warning: cl package required at runtime
(setq byte-compile-warnings '(not nresolved
                                  free-vars
                                  callargs
                                  redefine
                                  obsolete
                                  noruntime
                                  cl-functions
                                  interactive-only
                                  ))

;; more useful frame title, that show either a file or a
;; buffer name (if the buffer isn't visiting a file)
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))

;;; set font size to 15, overriding default 12
; M-x describe-font:
; Monaco:pixelsize=12:weight=normal:slant=normal:width=normal:spacing=100:scalable=true
;(set-face-attribute 'default (selected-frame) :height 150)
(set-face-attribute 'default nil :height 150)

;;; Load Customizations if they exist
(setq custom-file "~/Sync/elisp/custom.el")
(load custom-file 'noerror)

;; keep customize settings in their own file
;(setq custom-file "~/.emacs.d/custom.el")
;(when (file-exists-p custom-file)
;  (load custom-file))

;;; Add 'info' and 'elisp' to load-path (C-h v load-path RET)
(add-to-list 'Info-default-directory-list "~/.emacs.d/info")
(add-to-list 'load-path "~/.emacs.d/elisp/") ;; elisp packages not in pkg manager

;;; Reload .emacs file by typing: M-x reload-config
(defun reload-config () "Reloads .emacs interactively."
  (interactive)
  (load "~/.emacs.d/init.el"))

;;; Only start server if it is not currently running
;(require 'server) ;; Note: (start-server) is now mostly deprecated
(load "server")
(setq server-socket-dir "~/.emacs.d/tmp")
(unless (server-running-p) (server-start))

;;; Define booleans based on system type
(defconst *is-darwin*
  (eq system-type 'darwin)
  "Is this running on OS X?")
(defconst *is-linux*
  (eq system-type 'gnu/linux)
  "Is this running on Linux?")
#+end_src

* Performance Optimization
** Garbage Collection
Make startup faster by reducing the frequency of garbage collection. Set gc-cons-threshold (the default is 800 kilobytes) to maximum value available, to prevent any garbage collection from happening during load time.

Note: tangle to early-init.el to make startup even faster?
#+Begin_src emacs-lisp
(setq gc-cons-threshold most-positive-fixnum)
#+end_src

Restore it to reasonable value after init.
#+begin_src emacs-lisp
;; (defun fk/increase-gc-threshold ()
;;   "Increase garbage collection threshold to speed-up emacs by reducing the
;; frequency of garbage collection stops."
;;   (setq gc-cons-threshold (* 1024 1024 20))
;;   (setq gc-cons-percentage 0.3))

;; (add-hook 'after-init-hook 'fk/increase-gc-threshold)

(add-hook 'emacs-startup-hook (lambda () (setq gc-cons-threshold 20971520)))  ; 20mb
#+end_src

** Emacs Start Up Profiler
Benchmark Emacs startup time.

#+begin_src emacs-lisp
;(use-package esup
;  :ensure t
;  :commands esup)
#+end_src

* Better Defaults
** Better Defaults Package
https://github.com/technomancy/better-defaults
A small number of better defaults for Emacs

#+BEGIN_SRC emacs-lisp
;(menu-bar-mode -1) ; was making tabbar tabs on 2nd frame
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(when (fboundp 'horizontal-scroll-bar-mode)
  (horizontal-scroll-bar-mode -1))

(require 'uniquify)
 (setq uniquify-buffer-name-style 'forward)

(require 'saveplace)
  (setq-default save-place t)

(global-set-key (kbd "M-/") 'hippie-expand)
;(global-set-key (kbd "C-x C-b") 'ibuffer) ; set elsewhere in file
;(global-set-key (kbd "M-z") 'zap-up-to-char) ; doesn't exist?

(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

(show-paren-mode 1)
(setq save-interprogram-paste-before-kill t
      apropos-do-all t
      mouse-yank-at-point t
      require-final-newline t
      visible-bell t
      load-prefer-newer t
      ediff-window-setup-function 'ediff-setup-windows-plain
      save-place-file (concat user-emacs-directory "places")
      backup-directory-alist `(("." . ,(concat user-emacs-directory
                                               "backups"))))
#+END_SRC
** Helpful
A better, more detailed help buffer.

#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  ;; TODO: setup shackle
  ;; :init
  ;; (defalias 'describe-function 'helpful-callable)
  ;; (defalias 'describe-variable 'helpful-variable)
  ;; (defalias 'describe-key 'helpful-key)
  :bind
  (([remap describe-function] . helpful-callable)
   ([remap describe-variable] . helpful-variable)
   ([remap describe-key] . helpful-key)
   :map emacs-lisp-mode-map
   ("C-c C-d" . helpful-at-point)))
#+end_src
** Su/Sudo
read-only files will be writable but if you attempt to save your modifications, emacs will ask root user’s password if needed. Can save pw to ~/.authinfo.
https://github.com/PythonNut/su.el

#+begin_src emacs-lisp
(use-package su
  ;:straight (:host github :repo "PythonNut/su.el")
  :config (su-mode +1))
#+end_src

* Themes
** Disable all themes before loading a theme

#+begin_src emacs-lisp
(defadvice load-theme (before disable-themes-first activate)
  (fk/disable-all-themes))

(defun fk/disable-all-themes ()
  "Disable all active themes."
  (interactive)
  (dolist (theme custom-enabled-themes)
    (disable-theme theme)))
#+end_src

** load-theme without annoying confirmation
#+begin_src emacs-lisp
(advice-add 'load-theme
            :around
            (lambda (fn theme &optional no-confirm no-enable)
              (funcall fn theme t)))
#+end_src

** all-the-icons
Prerequisite for a few packages (e.g. treemacs, all-the-icons-dired)
"M-x all-the-icons-install-fonts" to install fonts at the first time.
https://github.com/domtronn/all-the-icons.el

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t)
#+end_src

** Dracula Theme
dracula-theme with telephone line status bar
https://github.com/dracula/emacs
https://www.reddit.com/r/emacs/comments/he55jl/whats_the_funky_character_on_the_mode_line/
#+begin_src emacs-lisp
(use-package dracula-theme
  :ensure t
  :init
  (setq dracula-enlarge-headings nil)
  (setq dracula-alternate-mode-line-and-minibuffer t)
  :config
  (if (display-graphic-p)
      (load-theme 'dracula :no-confirm)  ; Emacs in own window (zenburn)
    (load-theme 'wheatgrass :no-confirm)  ; Emacs in tty
  )

 ;; too small
 ;(set-face-attribute 'default nil
 ;        	      :family "JetBrains Mono"
 ;        	      :foundry "outline"
 ;        	      :slant 'normal
 ;        	      :weight 'normal
 ;        	      :height 120
 ;        	      :width 'semi-condensed)

 ;; need to investigate
 ;(add-hook 'display-line-numbers-mode-hook
 ;            (lambda ()
 ;              (set-face-attribute 'line-number nil
 ;        			  :weight 'normal)
 ;              (set-face-attribute 'line-number-current-line nil
 ;        			  :foreground (face-attribute 'cursor :background)
 ;        			  :weight 'bold
 ;        			  :slant 'normal))
 ;)
)
#+end_src

** Telephone line modeline
https://www.reddit.com/r/emacs/comments/3g75kf/introducing_telephoneline_a_new_implementation_of/
https://github.com/dbordak/telephone-line

#+begin_src emacs-lisp
(use-package telephone-line
  :ensure t
  :init
  (telephone-line-mode 1)
)
#+end_src

* Hightlight TODOs (move to org?)
#+begin_src emacs-lisp
(use-package hl-todo
  :ensure t
  :custom
  ;; Better hl-todo colors, taken from spacemacs
  (hl-todo-keyword-faces '(("TODO" . "#dc752f")
                           ("NEXT" . "#dc752f")
                           ("THEM" . "#2d9574")
                           ("PROG" . "#4f97d7")
                           ("OKAY" . "#4f97d7")
                           ("DONT" . "#f2241f")
                           ("FAIL" . "#f2241f")
                           ("DONE" . "#86dc2f")
                           ("NOTE" . "#b1951d")
                           ("KLUDGE" . "#b1951d")
                           ("HACK" . "#b1951d")
                           ("TEMP" . "#b1951d")
                           ("QUESTION" . "#b1951d")
                           ("HOLD" . "#dc752f")
                           ("FIXME" . "#dc752f")
                           ("XXX+" . "#dc752f")))
  :config
  (global-hl-todo-mode))
#+end_src

* Which Key (Keybinding Completion)
Emacs package that displays available keybindings in popup
https://github.com/justbur/emacs-which-key

#+begin_src emacs-lisp
(use-package which-key
   :ensure t
   :defer 10
   :config
   (progn
     ;(setq which-key-popup-type 'side-window) ;Default
     ;(setq which-key-popup-type 'minibuffer)
     ;(setq which-key-compute-remaps t) ;Show correct descriptions for remapped keys
     ;(setq which-key-allow-multiple-replacements t) ;Default = nil
     (which-key-setup-side-window-bottom) ; Default
     (which-key-mode))
)
#+end_src
* enable disabled functions
#+BEGIN_SRC emacs-lisp
;; Upcase and downcase regions
;(put 'upcase-region 'disabled nil)  ;C-x C-u
;(put 'downcase-region 'disabled nil)  ;C-x C-l

;; Sets the current horizontal position for C-n and C-p
(put 'set-goal-column 'disabled nil)

;; Restrict buffer editing to a region
;; Text Narrowing commands:
;;   Region: C-x n n, Page: C-x n p
;;   Funct: C-x n p, Widen: C-x n w
;;   Subtree in Org-Mode:   C-x n s
(put 'narrow-to-region 'disabled nil)

;; Dired functions (find-alternate 'a' reuses dired buffer)
(put 'dired-find-alternate-file 'disabled nil)

;; Goal Column, enter C-x C-n, at point to set column that C-n should go to
;; to clear enter C-u C-x C-n
(put 'set-goal-column 'disabled nil)

;; Enable mini-buffer history save feature
(setq savehist-additional-variables    ;; also save...
  '(search-ring regexp-search-ring)    ;; ... my search entries
  savehist-file "~/.emacs.d/cache/history") ;; keep my .emacs.d clean
(savehist-mode t)                      ;; do customization before activate

;; https://www.emacswiki.org/emacs/ZapUpToChar
(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR.")
(global-set-key (kbd "M-z") 'zap-up-to-char)

;; And disable electric-indent if active, added in Emacs 24.4
(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
#+END_SRC

* global key bindings
#+BEGIN_SRC emacs-lisp
;;; test out electric buffer mode - disabled, nice, but navigation highlighted every line
;;; also, buffer management (deleting, etc) wasn't as polisihed as iBuffer
;(global-set-key (kbd "C-x C-b") 'electric-buffer-list)

;;; https://stackoverflow.com/questions/93058/emacs-switching-to-another-frame-mac-os-x
; Re-enable swap frames with M-`
(global-set-key "\M-`" 'other-frame)

;; Open an Emacs eshell, shell, or term
(global-set-key (kbd "C-c e") 'eshell)
(global-set-key (kbd "C-c s") 'shell)
;(global-set-key (kbd "C-c t") 'term)
(global-set-key (kbd "C-c t") 'ansi-term)

;; Show a summery of all registers with content
(global-set-key (kbd "C-x r v") 'list-registers)

;; Move through windows in reverse order of (other-window), C-x o
(global-set-key (kbd "C-x O") 'previous-multiframe-window)

;; Invoke M-x without the Alt key (from Steve Yegge's blog)
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)
#+END_SRC

* global settings
#+begin_src emacs-lisp

;; disable company-mode completions in shells
(add-hook 'shell-mode-hook (lambda () (company-mode -1)) 'append)
(add-hook 'eshell-mode-hook (lambda () (company-mode -1)) 'append)

;; set default shell to zsh
(setq explicit-shell-file-name "/bin/zsh")
(setq shell-file-name "zsh")
(setq explicit-bash.exe-args '("--noediting" "--login" "-i"))
(setenv "SHELL" shell-file-name)

;; Remove trailing whitespace on save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; automatically follow symlinks to files under version control without prompting
(setq vc-follow-symlinks t)

;; Garbage-collect on focus-out, Emacs /should/ feel snappier.
;; Warning (bytecomp): ‘focus-out-hook’ is an obsolete variable (as of 27.1); after-focus-change-function
;(add-hook 'focus-out-hook #'garbage-collect)
;(add-hook 'after-focus-change-function #'garbage-collect)

;;; Kill line backwards
;;; http://emacsredux.com/blog/2013/04/08/kill-line-backward/
(global-set-key (kbd "C-<backspace>") (lambda ()
                                        (interactive)
                                        (kill-line 0)
                                        (indent-according-to-mode)))

;;; Ping settings (from net-util.el)
;;; http://www.masteringemacs.org/articles/2011/03/02/network-utilities-emacs/
(defvar ping-program-options)
(setq ping-program-options '("-c" "4"))

;;; Enable whitespace-mode for diff buffers
;;; http://stackoverflow.com/questions/11805584/automatically-enable-whitespace-mode-in-diff-mode
(add-hook 'diff-mode-hook
          '(lambda ()
            (whitespace-mode 1)))

;;; Mouse wheel and keyboard scroll settings
;;; scroll one line at a time (less "jumpy" than defaults)
(setq mouse-wheel-follow-mouse 't)     ;scroll window under mouse
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil))) ;1 line
(setq mouse-wheel-progressive-speed 'nil) ;'nil disables accelerated scrolling
(setq scroll-step 1                    ;keyboard scroll one line at a time
      scroll-preserve-screen-position t
      scroll-conservatively 10000)     ;smooth scrolling

;;; Enable holidays in Calendar
(setq mark-holidays-in-calendar t)

;;; Address the issue of Emacs's lack of a vi-like "O" command
;;; http://stackoverflow.com/questions/2173324/emacs-equivalents-of-vims-dd-o-o
;;; Open line above: C-o  Open line below: C-n C-o  Kill whole line: C-S-Bcksp

;(defadvice open-line (around vi-style-open-line activate)
;  "Make open-line behave more like vi."
;  (beginning-of-line)
;  ad-do-it
;  (indent-according-to-mode))

;; w/o-man mode (elisp man page formater for systems without 'man')
(defvar woman-show-log)
(defvar woman-cache-filename)
(setq woman-show-log nil)
(autoload 'woman "woman"
  "Decode and browse a Unix man page." t)
(setq woman-cache-filename "~/.emacs.d/cache/woman_cache.el")

;;; Make tooltips appear in the echo area (checks if function exists)
(tooltip-mode nil)

;; Use CUA mode for rectangles (C-RET to select, normal emacs keys to copy)
;;; http://emacs-fu.blogspot.com/2010/01/rectangles-and-cua.html
(setq cua-enable-cua-keys nil)  ;; only for rectangles, keeps (C-c, C-v, C-x).
(cua-mode t)
;; Emacs 24.4 introduces rectangle-mark-mode, C-x SPC, but not quite as useful
;(cua-mode t)
;(setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
;(transient-mark-mode 1) ;; No region when it is not highlighted
;(setq cua-keep-region-after-copy t) ;; Standard Windows behaviour

;;; Don't show the startup screen
(setq inhibit-startup-message t)

;;; Disable startup message in scratch buffer
(setq-default initial-scratch-message nil)
;;; And set scratch buffer initial mode to text instead of lisp eval
;(setq-default initial-major-mode 'text-mode)
;;; Don't create new lines when pressing 'arrow-down key' at end of the buffer
(setq next-line-add-newlines nil)

;;; Fix delete key working as backspace and not forward deleting
;;; (This only worked in window mode, not terminal. C-d works in both)
(when window-system (normal-erase-is-backspace-mode 1))

;;; Alias to change apropos to ap
(defalias 'ap 'apropos)

;;; hl-line: highlight the current line
(when (fboundp 'global-hl-line-mode)
  (global-hl-line-mode t)) ;; turn it on for all modes by default

;;; Make text mode default major mode with auto-fill enabled
(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode) ;replaces longlines in 23

;;; Auto-scroll in *Compilation* buffer
(setq compilation-scroll-output t)

;;; make Emacs always indent using SPC characters and never TABs
;;; i.e. use spaces instead of tabs
;;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Just-Spaces.html
(setq-default indent-tabs-mode nil)

;;; "y or n" instead of "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)

;;; Highlight regions and add special behaviors to regions.
;;; "C-h d transient" for more info.  transient-mark-mode is a toggle.
;;; also in Emacs 22 and greater, C-SPC twice to temp enable transient mark
;(setq transient-mark-mode nil)
(setq transient-mark-mode t)

;;; Display line and column numbers in the mode line
(setq line-number-mode    t
      column-number-mode  t)

;;; Stop blinking cursor
(blink-cursor-mode 0)

;;; Explicitly show the end of a buffer (indicated on left fringe of window)
(set-default 'indicate-empty-lines t)

;;; Line-wrapping
(set-default 'fill-column 78)

;; Don't truncate lines
(setq truncate-lines t
      truncate-partial-width-windows nil)

;; Create new scratch buffer if needed
(run-with-idle-timer 1 t
    '(lambda () (get-buffer-create "*scratch*")))

;; allow scroll-down/up-command to move point to buffer end/beginning
(setq scroll-error-top-bottom 'true)

;; New json-mode
(setq auto-mode-alist (cons '("\\.json\\'" . js-mode) auto-mode-alist))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bookmarks
;;    ‘C-x r m’ – set a bookmark at the current location (e.g. in a file)
;;    ‘C-x r b’ – jump to a bookmark
;;    ‘C-x r l’ – list your bookmarks
;;    ‘M-x bookmark-delete’ – delete a bookmark by name
(setq
  bookmark-default-file "~/.bookmarks"    ;; .emacs.d/bookmarks by default
  bookmark-save-flag 1)                   ;; autosave each change)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

* os specific settings
** Darwin settings
#+BEGIN_SRC emacs-lisp
(if *is-darwin*
   (progn

;; Disable railwaycat's tab bar
;; https://github.com/railwaycat/homebrew-emacsmacport/issues/123
(defvar mac-frame-tabbing)
(setq mac-frame-tabbing nil)

;; Don't open up new frames for files dropped on icon, use active frame
(defvar ns-pop-up-frames)
(setq ns-pop-up-frames nil)

;;; Drag and drop on the emacs window opens the file in a new buffer instead of appending it to the current buffer
;;; http://stackoverflow.com/questions/3805658/how-to-configure-emacs-drag-and-drop-to-open-instead-of-append-on-osx
(if (fboundp 'ns-find-file)
    (global-set-key [ns-drag-file] 'ns-find-file))

;;; Move deleted files to the System's trash can
;;; set trash-directory otherwise uses freedesktop.org-style
(setq trash-directory "~/.Trash")
(setq delete-by-moving-to-trash t)

;; For Macbook Pro, which has no insert key.
;; http://lists.gnu.org/archive/html/help-gnu-emacs/2006-07/msg00220.html
(global-set-key (kbd "C-c I") (function overwrite-mode))

;;; Open up URLs in mac browser
(setq browse-url-browser-function 'browse-url-default-macosx-browser)
; (setq browse-url-browser-function 'browse-url-default-windows-browser)

;;; Copy and paste into Emacs Terminal
;;; stack overflow, pasting text into emacs on Macintosh
;;; Copy - C-x M-w
;;; Paste - C-x C-y
(defun pt-pbpaste ()
  "Paste data from pasteboard."
  (interactive)
  (shell-command-on-region
    (point)
    (if mark-active (mark) (point))
    "pbpaste" nil t))

(defun pt-pbcopy ()
  "Copy region to pasteboard."
  (interactive)
  (print (mark))
  (when mark-active
    (shell-command-on-region
      (point) (mark) "pbcopy")
    (kill-buffer "*Shell Command Output*")))

(global-set-key [?\C-x ?\C-y] 'pt-pbpaste)
(global-set-key [?\C-x ?\M-w] 'pt-pbcopy)


;; On a Mac: make Emacs detect if you have light or dark mode enabled system wide.
;;If you have two themes, a light one and a dark one, and you want the dark theme by default unless you have light mode enabled, add this to your init.el:

;; If we're on a Mac and the file "~/bin/get_dark.osascript" exists
;; and it outputs "false", activate light mode. Otherwise activate
;; dark mode.
;(cond ((and (file-exists-p "~/bin/get_dark.osascript")
;            (string> (shell-command-to-string "command -v osascript") "")
;            (equal "false\n"
;                   (shell-command-to-string "osascript ~/bin/get_dark.osascript")))
;       (mcj/theme-set-light))
;      (t (mcj/theme-set-dark)))

;; (mcj/theme-set-light and mcj/theme-set-light are functions that enable the light and the dark theme, respectively).

;;~/bin/get_dark.osascript contains the following:
;;
;;tell application "System Events"
;;        tell appearance preferences
;;        	get dark mode
;;        end tell
;;end tell
))
#+END_SRC

** Linux settings
#+BEGIN_SRC emacs-lisp
;;; -=Linux specific settings
(if *is-linux*
   (progn

(defvar browse-url-browser-function)
(defvar browse-url-browser-program)
;;; http://stackoverflow.com/questions/15277172/how-to-make-emacs-open-all-buffers-in-one-window-debian-linux-gnome
;(setq pop-up-frames 'graphic-only)
(setq pop-up-frames nil)

;;; http://stackoverflow.com/questions/4506249/how-to-make-emacs-org-mode-open-links-to-sites-in-google-chrome
;;; Open up URLs in browser using gnome-open (errors on bytecompile)
;(setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "gnome-open")
(setq browse-url-browser-function 'browse-url-firefox)

;;; Problems with minibuffer font size display in KDE/Crunchbang/Unity(?), explictily set font
;;; List fonts with M-x descript-font
;(set-default-font "Monospace-10")
))
#+END_SRC

* functions
#+begin_src emacs-lisp
;;; ---------------------------------------------------------------------------
;;; https://stackoverflow.com/questions/8881649/how-to-force-org-mode-to-open-a-link-in-another-frame
;;; Open link at point in new frame
(defun zin/org-open-other-frame ()
  "Jump to bookmark in another frame. See `bookmark-jump' for more."
  (interactive)
  (let ((org-link-frame-setup (acons 'file 'find-file-other-frame org-link-frame-setup)))
    (org-open-at-point)))
(global-set-key (kbd "C-c 5 C-o") 'zin/org-open-other-frame)

;;; ---------------------------------------------------------------------------
;;; https://gist.github.com/mwfogleman/95cc60c87a9323876c6c
;;; http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
(defun narrow-or-widen-dwim ()
  "If the buffer is narrowed, it widens. Otherwise, it narrows to region, or Org subtree."
  (interactive)
  (cond ((buffer-narrowed-p) (widen))
        ((region-active-p) (narrow-to-region (region-beginning) (region-end)))
        ((equal major-mode 'org-mode) (org-narrow-to-subtree))
        (t (error "Please select a region to narrow to"))))
(global-set-key (kbd "C-c x") 'narrow-or-widen-dwim)  ; was: C-c n

;; I bind this key to C-c n, using the bind-key function that comes with use-package.
;(bind-key "C-c n" 'narrow-or-widen-dwim)

;; I also bind it to C-x t n, using Artur Malabarba's toggle map idea:
;; http:://www.endlessparentheses.com/the-toggle-map-and-wizardry.html

;;; ---------------------------------------------------------------------------
;;; Move lines up or down (can't easily use C-S on MacOS)
;;; http://whattheemacsd.com//editing-defuns.el-02.html
(defun move-line-down ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines 1))
    (forward-line)
    (move-to-column col)))

(defun move-line-up ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines -1))
    (move-to-column col)))

;(global-set-key (kbd "<C-S-down>") 'move-line-down)
;(global-set-key (kbd "<C-S-up>") 'move-line-up)
(global-set-key (kbd "<M-S-down>") 'move-line-down)
(global-set-key (kbd "<M-S-up>") 'move-line-up)

;;; ---------------------------------------------------------------------------
;;; Match Paren / based on the vim command using %
;;; http://grok2.tripod.com/
(defun match-paren (arg)
      "Go to the matching paren if on a paren; otherwise insert %."
      (interactive "p")
      (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
            ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
            (t (self-insert-command (or arg 1)))))
(global-set-key "%" 'match-paren)

;;; ---------------------------------------------------------------------------
(defun intelligent-close ()
  "quit a frame the same way no matter what kind of frame you are on.

This method, when bound to C-x C-c, allows you to close an emacs frame the
same way, whether it's the sole window you have open, or whether it's
a \"child\" frame of a \"parent\" frame.  If you're like me, and use emacs in
a windowing environment, you probably have lots of frames open at any given
time.  Well, it's a pain to remember to do Ctrl-x 5 0 to dispose of a child
frame, and to remember to do C-x C-x to close the main frame (and if you're
not careful, doing so will take all the child frames away with it).  This
is my solution to that: an intelligent close-frame operation that works in
all cases (even in an emacs -nw session).

Stolen from http://www.dotemacs.de/dotfiles/BenjaminRutt.emacs.html."
  (interactive)
  (if (eq (car (visible-frame-list)) (selected-frame))
      ;;for parent/master frame...
      (if (> (length (visible-frame-list)) 1)
          ;;close a parent with children present
          (delete-frame (selected-frame))
        ;;close a parent with no children present
        (save-buffers-kill-emacs))
    ;;close a child frame
    (delete-frame (selected-frame))))
(global-set-key "\C-x\C-c" 'intelligent-close) ;forward reference
#+end_src

* daily log
#+BEGIN_SRC emacs-lisp
;;; -- daily log -

(defun daily-log ()
  "Automatically opens my daily log file and positions cursor at end of
last sentence."
  (interactive)
  ;(diary)
  (find-file "~/org/DailyLogs/+current") ;symlink to current log
  (goto-char (point-max))  ;go to the maximum accessible value of point
  (search-backward "* Notes") ;search to Notes section first to bypass notes
  (if (re-search-backward "[.!?]") ;search for punctuation from end of file
      (forward-char 1))
  )
(global-set-key (kbd "<f9>") 'daily-log)

;;; ---------------------------------------------------------------------------
;(diary)

;; Email 1
;; I have been using a simple system for writing notes day by day.  Kind of
;; like a diary.  It's really very unsophisticated but helpful.  It will allow
;; you to make notes into a template file.  Weeks, Months (etc...) later, you
;; can refer to them.
;;
;; For those who have never seen it
;; http://aonws01/unix-admin/Daily_Logs/Jerry_Sievers/
;;
;; Many of you new guys' questions to me have been answered from these notes
;; (eg, license keys info, who's who and so forth).
;;
;; John Sconiers asked about this and I set him up with it.  Whole procedure
;; takes only a few minutes to install and probably about fifteen minutes per
;; day to keep up to date.  An investment in time that pays off later.  Other
;; admins who have left Aon used this and liked it too.
;;
;; It also comes with a CGI program which, if your home directory is
;; accessible to aonws01, can allow others to browse your diary (I hear
;; cheering and booing...)
;;
;; Please let me know.  It would be nice to have everyone using this thing at
;; least minimally.

;; Email 2
;; Chris, I have installed the package in your home directory.  Files are in
;; Aon/DailyLogs.  The current log has a symbolic link named +Current.  You
;; also have an alias 'diary' which you can type at the shell.  Doing so will
;; invoke vi on the +Current file and position the cursor on the very last '.'
;; character in the file.  I have added the $HOME/bin directory to your path
;; and created one cron job to stamp the 'monday' file weekly.
;;
;; You should run the command 'new-daily-log' once per week to start a new
;; file.  Optionally, the previous file can be emailed to the destination of
;; your choice.  See the Aon/DailyLogs/.config file for details.
;;
;; Please call if you have any questions.
#+END_SRC

* ibuffer
https://www.emacswiki.org/emacs/IbufferMode
ibuffer - *Nice* buffer switching

Search all marked buffers
  ‘M-s a C-s’ - Do incremental search in the marked buffers.
  ‘M-s a C-M-s’ - Isearch for regexp in the marked buffers.
  ‘U’ - Replace by regexp in each of the marked buffers.
  ‘Q’ - Query replace in each of the marked buffers.
  ‘I’ - As above, with a regular expression.

#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure nil
  :bind ("C-x C-b" . ibuffer)
  :config
    ;; Don't show empty buffer groups
    (setq ibuffer-show-empty-filter-groups nil)

    ;; work groups for ibuffer
    (setq ibuffer-saved-filter-groups
          '(("default"
             ("version control" (or (mode . svn-status-mode)
                       (mode . svn-log-edit-mode)
                       (name . "^\\*svn-")
                       (name . "^\\*vc\\*$")
                       (name . "^\\*Annotate")
                       (name . "^\\*vc-")
                       (name . "^\\*git-")
                       (name . "^\\*magit")))
             ("emacs" (or (name . "^\\*scratch\\*$")
                          (name . "^\\*Messages\\*$")
                          (name . "^TAGS\\(<[0-9]+>\\)?$")
                          (name . "^\\*info\\*$")
                          (name . "^\\*Occur\\*$")
                          (name . "^\\*grep\\*$")
                          (name . "^\\*Compile-Log\\*$")
                          (name . "^\\*Backtrace\\*$")
                          (name . "^\\*Process List\\*$")
                          (name . "^\\*gud\\*$")
                          (name . "^\\*Man")
                          (name . "^\\*WoMan")
                          (name . "^\\*Kill Ring\\*$")
                          (name . "^\\*Completions\\*$")
                          (name . "^\\*tramp")
                          (name . "^\\*shell\\*$")
                          (name . "^\\*compilation\\*$")))
             ("Helm" (or (name . "\*helm\*")))
             ("Help" (or (name . "\*Help\*")
                         (name . "\*Apropos\*")
                         (name . "\*info\*")))
             ("emacs-source" (or (mode . emacs-lisp-mode)
                                 (filename . "/Applications/Emacs.app")
                                 (filename . "/bin/emacs")))
             ("emacs-config" (or (filename . ".emacs.d")
                                 (filename . "emacs-config")))
            ("org" (or (name . "^\\*org-")
                        (name . "^\\*Org")
                        (mode . org-mode)
                        (mode . muse-mode)
                        (name . "^\\*Calendar\\*$")
                        (name . "^+current$")
                        (name . "^diary$")
                        (name . "^\\*Agenda")))
             ("latex" (or (mode . latex-mode)
                          (mode . LaTeX-mode)
                          (mode . bibtex-mode)
                          (mode . reftex-mode)))
             ("dired" (or (mode . dired-mode)))
             ("perl" (mode . cperl-mode))
             ("erc" (mode . erc-mode))
             ("shell" (or (mode . shell-mode)
                            (name . "^\\*terminal\\*$")
                            (name . "^\\*ansi-term\\*$")
                            (name . "^\\*shell\\*$")
                            (name . "^\\*eshell\\*$")))
             ("gnus" (or (name . "^\\*gnus trace\\*$")
                            (mode . message-mode)
                            (mode . bbdb-mode)
                            (mode . mail-mode)
                            (mode . gnus-group-mode)
                            (mode . gnus-summary-mode)
                            (mode . gnus-article-mode)
                            (name . "^\\.bbdb$")
                            (name . "^\\.newsrc-dribble"))))))

    ;; Order the groups so the order is : [Default], [agenda], [emacs]
    (defadvice ibuffer-generate-filter-groups (after reverse-ibuffer-groups ()
                                                     activate)
      (setq ad-return-value (nreverse ad-return-value)))

    ;; Hide the following buffers
    ;;(setq ibuffer-never-show-predicates
    ;;      (list "\\*Completions\\*"
    ;;            "\\*vc\\*"))

    ;; Enable ibuffer expert mode, don't prompt on buffer deletes
    (setq ibuffer-expert t)

    ;; Load the 'work' group, can set to load groups by location
    ;; ibuffer-auto-mode is a minor mode that automatically keeps the buffer
    ;; list up to date. I turn it on in my ibuffer-mode-hook:
    (add-hook 'ibuffer-mode-hook
              '(lambda ()
                 (ibuffer-auto-mode 1)
                 (ibuffer-switch-to-saved-filter-groups "default")))
)
#+END_SRC

* ivy and friends
https://github.com/abo-abo/swiper
http://cestlaz.github.io/posts/using-emacs-6-swiper/
https://www.reddit.com/r/emacs/comments/910pga/tip_how_to_use_ivy_and_its_utilities_in_your/
https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html

** flx
https://github.com/lewang/flx
Fuzzy matching for Emacs ... a la Sublime Text.
can be used by ivy - https://oremacs.com/2016/01/06/ivy-flx/

#+BEGIN_SRC emacs-lisp
(use-package flx
  :ensure t
)
#+END_SRC

** ivy
ivy-mode - a generic completion mechanism for Emacs
swiper - an alternative to isearch uses ivy to show overview of all matches
https://github.com/abo-abo/swiper
changed from ("C-s"     . swiper) ;; Ivy-based interface to standard commands
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :defer 0.5
  :init (ivy-mode 1)
  :commands ivy
  :bind (("C-s"     . counsel-grep-or-swiper) ;; swiper for small files, counsel-grep for larger
         ;("C-x C-r" . counsel-recentf)
         ("<f6>"    . ivy-resume)
         ("M-x"     . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("<f1> f"  . counsel-describe-function)
         ("<f1> v"  . counsel-describe-variable)
         ("<f1> l"  . counsel-find-library)
         ("<f1> i"  . counsel-info-lookup-symbol)
         ("<f1> u"  . counsel-unicode-char)
         ("C-c G"   . counsel-git) ;;; Ivy-based interface to shell and system tools
         ("C-c j"   . counsel-git-grep)
         ("C-c k"   . counsel-ag)
         ("C-x l"   . counsel-locate)
         ("C-S-o"   . counsel-rhythmbox)
         ("C-r"     . counsel-minibuffer-history)) ;; disable M-x filter
  :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-display-style 'fancy)
    (ivy-use-virtual-buffers t)
    (enable-recursive-minibuffers t)
    (ivy-virtual-abbreviate 'full)
    (ivy-dynamic-exhibit-delay-ms 250)
    (ivy-re-builders-alist
      '((swiper . ivy--regex-plus)    ;disable fuzzy matching for swiper
        (t      . ivy--regex-fuzzy))) ;but enable for ivy
    (ivy-initial-inputs-alist nil)
)
#+END_SRC

** swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :after ivy)

; https://emacs.stackexchange.com/questions/40556/swiper-get-last-search-term
; https://emacs.stackexchange.com/questions/55775/how-can-i-resume-swiper-isearch-with-the-next-line-selected
;(defun my-swiper-isearch-again ()
;  "Start swiper-isearch with the last thing searched for."
;  (interactive)
;  (swiper-isearch (car swiper-history)))
;(global-set-key (kbd "s-g") 'my-swiper-isearch-again)
#+END_SRC

** counsel
NOTE: if smex is installed, counsel will use it to sort by most recently used

#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :config
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c a") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
#+end_src

* org
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  ;; to be sure we have the latest Org version
  :ensure org-plus-contrib
  :hook
  ;(org-mode . variable-pitch-mode)
  (org-mode . visual-line-mode)
  ;(org-mode . org-num-mode)
  :custom
  (org-src-tab-acts-natively t))

(use-package calendar
  :ensure nil
  :custom
  (calendar-week-start-day 0))

;(use-package org-passwords
;  :ensure org-plus-contrib
;  :bind
;  (:map org-mode-map
;        ("C-c C-p p" . org-passwords-copy-password)
;        ("C-c C-p u" . org-passwords-copy-username)
;        ("C-c C-p o" . org-passwords-open-url)))

;;; https://github.com/sabof/org-bullets
(use-package org-bullets
  :ensure t
  :custom
  ;; org-bullets-bullet-list
  ;; default: "◉ ○ ✸ ✿"
  ;; large: ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
  ;; Small: ► • ★ ▸
  (org-bullets-bullet-list '("•"))
  ;; others: ▼, ↴, ⬎, ⤷,…, and ⋱.
  ;; (org-ellipsis "⤵")
  (org-ellipsis "…")
  :hook
  (org-mode . org-bullets-mode))

;; Enable easy templates (separated out in org-mode 9.2?), menu of template choices:  C-c C-,
;; https://orgmode.org/manual/Easy-templates.html
;; https://code.orgmode.org/bzg/org-mode/src/master/etc/ORG-NEWS#L65
(use-package org-tempo)

;; Prevent inadvertently edits an the invisible part of the buffer
(setq-default org-catch-invisible-edits 'smart)

;; Load additional exporters, or limit them with:  (setq org-export-backends '(ascii html latex odt))
;(eval-after-load 'org
;      (lambda()
;        (require 'ox-texinfo) ; texi and info
;        (require 'ox-md)      ; markdown
;        (require 'ox-odt)     ; opendoc text
;        (require 'ox-opml)
;        (require 'ox-confluence)))

;; Bind C-h o to org-info
(define-key global-map (kbd "C-h o") 'org-info)

;; The following lines are always needed.  Choose your own keys.
;(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cc" 'org-capture)

;; Set to the location of your Org files on your local system
(setq org-directory "~/org")

;; Open all txt files in org-mode
(add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))


;;; Agenda
;; Agenda window setup
(setq org-agenda-window-setup 'current-window) ;; don't kill my window setup

;; Include emacs diary, not needed if using org-anniversary
;(setq org-agenda-include-diary t)

;; Custom agenda commands
;; http://members.optusnet.com.au/~charles57/GTD/mydotemacs.txt
(setq org-agenda-custom-commands
'(
("P" "Projects"
              ((tags "PROJECT")))

("H" "Office and Home Lists"
     ((agenda)
          (tags-todo "OFFICE")
          (tags-todo "HOME")
          (tags-todo "COMPUTER")
          (tags-todo "DVD")
          (tags-todo "READING")))

("D" "Daily Action List"
     ((agenda "" ((org-agenda-ndays 1)
                     (org-agenda-sorting-strategy
                        (quote ((agenda time-up priority-down tag-up))))
                     (org-deadline-warning-days 0)
                     ))))))


;;; Capture
;; NOTE:  Fibonacci format: 0, 0.5, 1, 2, 3, 5, 8, 13, 20, 40, 100
;; Setup default target for notes and a global hotkey for new ones
;; NOTE:  Need org-mode version 6.3.6 or later for this to work
;; http://stackoverflow.com/questions/3622603/org-mode-setup-problem-when-trying-to-use-capture
(setq org-default-notes-file (expand-file-name "~/org/notes.org"))

;; Capture templates - C-c c t
;; Based on Sacha Chua's org-capture-tempaltes
;; http://pages.sachachua.com/.emacs.d/Sacha.html
(defvar dbj/org-basic-task-template "* TODO %^{Task}
SCHEDULED: %^t

:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(defvar dbj/org-basic-jira-template "* TODO %^{Task}
SCHEDULED: %^t

:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:URL: %^{URL}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(defvar dbj/org-basic-someday-template "* %^{Task}
:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(setq org-capture-templates
      `(("t" "Tasks" entry
          (file "~/org/inbox.org"), dbj/org-basic-task-template)
          ;(file+headline "~/org/inbox.org" "Tasks"), dbj/org-basic-task-template)

        ("j" "Jira" entry
          (file "~/org/inbox.org"), dbj/org-basic-jira-template)

        ("s" "Someday task" entry
          (file "~/org/someday.org"), dbj/org-basic-someday-template)

        ("r" "Reference information" entry
          (file+headline "~/org/reference.org" "Inbox"))

        ("n" "Notes" entry
          (file+headline "~/org/notes.org"))

        ("o" "Journal" entry
          (file+olp+datetree "~/org/journal.org")
          "* %?\nEntered on %U\n  %i\n  %a")
))


;;; Other
;; When adding new heading below the current heading, the new heading is
;; placed after the body instead of before it.  C-<RET>
(setq org-insert-heading-respect-content t)

;; Set Todo keywords, same as:
;; Shortcut key:  C-c C-t
;; #+TODO: TODO(t) INPROGRESS(p) WAITING(w) | DONE(d) CANCELED(c)
(setq org-todo-keywords
      '((sequence "TODO(t)" "INPROGRESS(p)" "WAITING(w@/!)")
        (sequence "|" "DONE(d!)" "CANCELED(c@)")))

;; Set Tags, same as:
;; #+TAGS: home(h) work(w) @computer(c) @phone(p) errants(e)
(setq org-tag-alist '(("@office" . ?o) ("@home" . ?h) ("computer" . ?c)
                      ("phone" . ?p) ("reading" . ?r)))

;; Prevent C-k from killing whole subtrees and losing work
(setq org-special-ctrl-k t)

;; Fontify code buffers in org, instead of grey text
;; This is especially nice when you open an editing buffer with [Ctrl+c ']
;; to insert code into the #+begin_src ... #+end_src area.
(setq org-src-fontify-natively t)

;; org-refile (C-c C-w) settings from:
;; http://www.mail-archive.com/emacs-orgmode@gnu.org/msg34415.html
;; http://doc.norang.ca/org-mode.html#RefileSetup
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets '((org-agenda-files :maxlevel . 2)
                           (nil :maxlevel . 3)))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)
;(setq org-refile-use-outline-path 'file)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))


;; MobileOrg config
;; M-x org-mobile-push - copy org files to ~/Dropbox/MobileOrg
;; M-x org-mobile-pull - integrate remove changes into local org files
;;
;; Set to the location of your Org files on your local system
;(setq org-directory "~/org")
;; Set to the name of the file where new notes will be stored
;(setq org-mobile-inbox-for-pull "~/org/flagged.org")
;; Set to <your Dropbox root directory>/MobileOrg.
;(setq org-mobile-directory "~/Dropbox/Home/MobileOrg")

;;; Strike-through finished todos
;; sachachua.com/blog/2012/12/emacs-strike-through-headlines-for-done-tasks-in-org/
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (:foreground "PaleGreen"
                 :weight normal
                 :strike-through t))))
 '(org-headline-done
            ((((class color) (min-colors 16) (background dark))
               (:foreground "LightSalmon" :strike-through t)))))

;;; Make sure to hightlight mysql sql keywords: - errors on compile
;;; ex. #+BEGIN_SRC sql
;;;        SELECT foo FROM bar
;;;     #+END_SRC
;(add-hook 'sql-mode-hook
;          (lambda ()
;            (sql-highlight-mysql-keywords)))

;;; Enable other org-babel langauges
(org-babel-do-load-languages
  (quote org-babel-load-languages)
  (quote ((emacs-lisp . t)
          ;(asymptote . t) ;Asymptote
          (awk . t)       ;Awk
          (C . t)         ;C
          ;(C++ . t)       ;C++
          ;(clojure . t)   ;Clojure
          ;(css . t)       ;CSS
          ;(d . f)        ;D
          ;(ditaa . f)     ;ditaa
          ;(dot . t)       ;Graphviz
          ;(calc . t)      ; Emacs Calc
          ;(fortran . t)   ;Fortran
          (gnuplot . t)   ;requires gnuplot installed
          ;(haskell . t)   ;Haskell
          (java . t)      ;Java
          (js . t)        ;Javascript
          ;(latex . t)     ;LaTeX
          (ledger . f)    ;Ledger
          (lisp . t)      ;Lisp
          ;(lilypond . t)  ;Lilypond
          ;(lua . t)       ;Lua
          ;(matlab . t)    ;MATLAB
          ;(mscgen . t)    ;Mscgen
          ;(ocaml . t)     ;Objective Caml
          ;(octave . t)    ;octave
          (org . t)       ;Org mode
          ;(oz . f)        ;Oz
          (perl . t)      ;Perl
          ;(plantuml . t)  ;Plantuml
          ;(processing . t) ;Processing.js
          (python . t)    ;Python
          ;(R . t)         ;R
          (ruby . t)      ;Ruby
          ;(sass . t)      ;Sass
          ;(scheme . t)    ;Scheme
          (screen . t)    ;GNU Screen
          (sed . t)       ;Sed
          (shell . t)     ;shell
          (sql . t)       ; SQL
          ;(sqlite .t)     ;SQLite
)))
#+END_SRC

* org-roam
# deft
deft - an Emacs mode for quickly browsing, filtering, and editing
directories of plain text notes.  http://jblevins.org/projects/deft/
http://jblevins.org/git/deft.git

Modified for org-roam 20200601

#+begin_src emacs-lisp
;; Set org-roam directory in one place to prevent madness
(setq org-roam-directory-location "~/org-roam/")

(use-package deft
  :ensure t
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  ;(deft-directory "~/org-roam/")
  (deft-directory org-roam-directory-location)
  (deft-recursive t)
  (deft-use-filename-as-title nil)
  (deft-use-filter-string-for-filename t)
  ;(deft-org-mode-title-prefix t)
  (deft-file-naming-rules '((noslash . "-")
                            (nospace . "-")
                            (case-fn . downcase)))
  (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg"))
  (deft-default-extension "org")
  (deft-text-mode 'org-mode)
)
#+end_src

# org-journal
#+begin_src emacs-lisp
(use-package org-journal
  :ensure t
  :after org
  :bind
  ("C-c n n" . org-journal-new-entry)
  :custom
  (org-journal-date-prefix "#+TITLE: ")
  (org-journal-file-format "%Y-%m-%d.org")
  ;(org-journal-dir "~/org-roam/")
  (org-journal-dir org-roam-directory-location)
  (org-journal-date-format "%A, %d %B %Y")
)
#+end_src

# org-roam
Rudimentary Roam replica with Org-mode
https://github.com/org-roam/org-roam
https://org-roam.readthedocs.io/en/master/

#+begin_src emacs-lisp
(use-package company-org-roam
  :ensure t
  :after (company org-roam))

(use-package org-roam
  :ensure t
  :after org
  :hook
  (after-init . org-roam-mode)
  ;((org-mode . org-roam-mode)
  ; (after-init . org-roam--build-cache-async))
  :custom
  (org-roam-link-title-format "R:%s")
  ;(make-directory "~/org-roam")
  ;(org-roam-directory "~/org-roam/")
  (org-roam-directory org-roam-directory-location)
  (org-roam-db-location "~/.emacs.d/cache/org-roam.db")
  (org-roam-index-file "index.org")
  (org-roam-completion-system 'ivy)
  :bind (:map org-roam-mode-map
          (("C-c n l" . org-roam)
           ("C-c n t" . org-roam-dailies-today)
           ("C-c n f" . org-roam-find-file)
           ("C-c n j" . org-roam-jump-to-index)
           ("C-c n b" . org-roam-switch-to-buffer)
           ;("C-c n g" . org-roam-show-graph))
           ("C-c n g" . org-roam-graph)
           ("C-c n c" . org-roam-db-build-cache))
          :map org-mode-map
          (("C-c n i" . org-roam-insert)))
  :config
  (setq org-roam-capture-templates
    '(("d" "default" plain (function org-roam-capture--get-point)
       "%?"
       :file-name "%<%Y%m%d%H%M%S>-${slug}"
       :head "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+ROAM_ALIAS: \n\n- tags :: \n\n"
       :unnarrowed t)

;; https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321
;      ("a" "daily" plain (function org-roam-capture--get-point)
;        ""
;       :immediate-finish t
;       :file-name "dailies/%<%Y-%m-%d>"
;       :head "#+TITLE: %<%Y-%m-%d>")
  ))

)

; --

;; how to modify last_modified tag in file
;;https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321/9
;(require 'time-stamp)
;(add-hook 'write-file-functions 'time-stamp)

;--

;; where no roam has gone before - oldfxiny
;; https://www.reddit.com/r/emacs/comments/h9zoy9/weekly_tipstricketc_thread/

;(setq my/roam-dir-list '(
;  "~/org-roam/"
;  "~/org-roam-wip/"))
;
;(defun my/pick-roam-dir ()
;  "Select directories from a list"
;  (interactive)
;  (setq org-roam-directory
;  (completing-read "Select directory: " my/roam-dir-list))
;  ;;(deft)
;  ;;(deft-refresh)
;)

#+end_src
* osx-trash
https://github.com/lunaryorn/osx-trash.el
Make Emacs' delete-by-moving-to-trash do what you expect it to do on OS X.

#+BEGIN_SRC emacs-lisp
(use-package osx-trash
   :ensure t
   :config
   (when (eq system-type 'darwin)
     (osx-trash-setup))
   (setq delete-by-moving-to-trash t)
)
#+END_SRC

* savehist
https://www.reddit.com/r/emacs/comments/gqsz8u/weekly_tipstricketc_thread/
prawnandcocktail

I was trying to make a nice setup for recentf but then I realized I could just enable savehist-mode and search the minibuffer history, by doing C-x C-f C-r. So what it the benefit of recentf-mode? Is it just for people who open files outside of find-file?

#+begin_src emacs-lisp
(setq savehist-file "~/.emacs.d/cache/savehist")
; persistent commit message history
;(add-to-list 'savehist-additional-variables 'log-edit-comment-ring)
(setq savehist-additional-variables    ;; also save...
  '(kill-ring search-ring regexp-search-ring log-edit-comment-ring))

(savehist-mode 1)
#+end_src
* Company (Code & Text Completion)
** Company
Company is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates.
https://github.com/company-mode/company-mode
http://company-mode.github.io/

#+begin_src emacs-lisp
(use-package company
  :ensure t
)
#+end_src

** Company Box
A company front-end with icons.

https://github.com/sebastiencs/company-box

#+begin_src emacs-lisp
(use-package company-box
  :ensure t
  ;:straight (:host github :repo "gcentauri/company-box")
  :custom
  (company-box-show-single-candidate t)
  (company-box-backends-colors nil) ;; Same colors for all backends
  :custom-face
  (company-box-selection ((t (:inherit company-tooltip-selection :extend t))))
  :hook (company-mode . company-box-mode))
#+end_src

** Company Statistics
Company-statistics is a global minor mode built on top of the in-buffer completion system company-mode. The idea is to keep a log of a certain number of completions you choose, along with some context information, and use that to rank candidates the next time you have to choose — hopefully showing you likelier candidates at the top of the list.
https://github.com/company-mode/company-statistics

#+begin_src emacs-lisp
(use-package company-statistics
  :ensure t
  :hook (company-mode . company-statistics-mode))
#+end_src

* YASnippet (Snippet Completion)
YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is inspired from TextMate's syntax, you can even import most TextMate templates to YASnippet. Watch a demo on YouTube.
https://github.com/joaotavora/yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  ;; Expand snippets with `C-j', not with `TAB'. Use `TAB' to always
  ;; jump to next field, even when company window is active. If there
  ;; is need to complete company's selection, use `C-s'
  ;; (`company-complete-selection').
  :ensure t
  :defer nil
  :custom
  (yas-indent-line nil)
  :custom-face
  (yas-field-highlight-face ((t (:inherit region))))
  :bind*
  (("C-j" . yas-expand)
   :map yas-minor-mode-map
   ("TAB" . nil)
   ("<tab>" . nil)
   :map yas-keymap
   ("TAB" . (lambda () (interactive) (company-abort) (yas-next-field)))
   ("<tab>" . (lambda () (interactive) (company-abort) (yas-next-field))))
  :hook
  (snippet-mode . (lambda () (setq-local require-final-newline nil)))
  :config
  (yas-global-mode))
#+end_src
* Navigation and Search
** Winum
Window numbers for Emacs: Navigate your windows and frames using numbers
https://github.com/deb0ch/emacs-winum

#+begin_src emacs-lisp
(use-package winum
  :ensure t
  :bind*
  (
   ("C-`" . winum-select-window-by-number)
   ;("M-0" . winum-select-window-0-or-10)
   ("M-1" . winum-select-window-1)
   ("M-2" . winum-select-window-2)
   ("M-3" . winum-select-window-3)
   ("M-4" . winum-select-window-4)
   ("M-5" . winum-select-window-5)
   ("M-6" . winum-select-window-6)
   ("M-7" . winum-select-window-7)
   ("M-8" . winum-select-window-8)
   ("M-9" . winum-select-window-9))
  :config
  (winum-mode))
#+end_src
** Mwim (Move Where I Mean)
This Emacs package provides several commands to switch between various line positions, like moving to the beginning/end of code, line or comment. It is inspired by this EmacsWiki page (some code from this page is used). mwim stands for Move Where I Mean.
https://github.com/alezost/mwim.el

#+begin_src emacs-lisp
(use-package mwim
  :ensure t
  :bind
  (("C-a" . mwim-beginning-of-code-or-line)
   ("C-e" . mwim-end-of-code-or-line)))
#+end_src
** Deadgrep
Deadgrep is the fast, beautiful text search that your Emacs deserves.
https://github.com/Wilfred/deadgrep
NOTE: Install ripgrep. You need version 0.8 or later.

Keybindings
|-------------+----------------------------------------------------------------|
| Key         | Action                                                         |
|-------------+----------------------------------------------------------------|
| RET         | Visit the result, file or push button at point                 |
| o           | Visit the result in another window                             |
| n and p     | Move between results or buttons                                |
| N and P     | Move between search hits                                       |
| M-n and M-p | Move between file headers                                      |
| g           | Re-run the search                                              |
| TAB         | Expand/collapse results for a file                             |
| C-c C-k     | Stop a running search                                          |
| C-u         | prefix argument prevents searches from starting automatically. |
|-------------+----------------------------------------------------------------|
You can also use M-x imenu to move between files in a results buffer.

#+begin_src emacs-lisp
(use-package deadgrep
  :ensure t
  :commands deadgrep
  :bind
  (
   :map deadgrep-mode-map
   ("C-c C-e" . deadgrep-edit-mode)))
#+end_src

** Avy
avy is a GNU Emacs package for jumping to visible text using a char-based decision tree. See also ace-jump-mode and vim-easymotion - avy uses the same idea.
https://github.com/Wilfred/deadgrep

#+begin_src emacs-lisp
(use-package avy
  :ensure t
  :config
  (avy-setup-default)
  :bind
  (("M-g w" . avy-goto-word-or-subword-1)
   ("M-g b" . avy-pop-mark))
)
#+end_src
* Treemacs
** Tremacs
a tree layout file explorer for Emacs
https://github.com/Alexander-Miller/treemacs

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :custom
  (treemacs-width 20)
  :bind
  ("M-0" . treemacs-select-window)
)
#+end_src

** Treemacs Projectile
Projectile integration, the treemacs-projectile package lets you quickly add your projectile projects to the treemacs workspace.

#+begin_src emacs-lisp
(use-package treemacs-projectile
  :ensure t
  :after treemacs projectile
)
#+end_src
