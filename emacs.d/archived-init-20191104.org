* dired-git-info
Show git info in Emacs dired
https://github.com/clemera/dired-git-info
http://xenodium.com/showhide-emacs-dired-details-in-style/

#+begin_src emacs-lisp
(use-package dired-git-info
  :ensure t
  :defer 0.3
  :bind (:map dired-mode-map
        (")" . dired-git-info-mode))
)
#+end_src
* yasnippet
https://github.com/joaotavora/yasnippet
A template system for Emacs http://joaotavora.github.com/yasnippet/

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
)
#+END_SRC
* yaml-mode
https://github.com/yoshiki/yaml-mode
The emacs major mode for editing files in the YAML data serialization format.

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode
    ("\\.yml$" . yaml-mode)
    ("\\.yaml$" . yaml-mode)
  :config
    (add-hook 'yaml-mode-hook
      '(lambda ()
        (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
)
#+END_SRC

* wttrin weather
#+begin_src emacs-lisp
(use-package wttrin
  :ensure t
  :config
  (setq wttrin-default-cities '("Chicago" "moon"))
)
#+end_src
* which-key - disabled to try hydra
https://github.com/justbur/emacs-which-key
Emacs package that displays available keybindings in popup

#+BEGIN_SRC emacs-lisp
;(use-package which-key
;   :ensure t
;   :defer 10
;   :config
;   (progn
;     (setq which-key-popup-type 'side-window) ;Default
;      ;; (setq which-key-popup-type 'minibuffer)
;
;      (setq which-key-compute-remaps t) ;Show correct descriptions for remapped keys
;
;      (setq which-key-allow-multiple-replacements t) ;Default = nil
;      (which-key-mode))
;)
#+END_SRC
* visual-regexp
https://github.com/benma/visual-regexp.el
A regexp/replace command for Emacs with interactive visual feedback

#+BEGIN_SRC emacs-lisp
(use-package visual-regexp
   :ensure t
   :config
   (define-key global-map (kbd "C-c r") 'vr/replace)
   (define-key global-map (kbd "C-c q") 'vr/query-replace)
   ;; if you use multiple-cursors, this is for you:
   (define-key global-map (kbd "C-c m") 'vr/mc-mark)
)
#+END_SRC
* switch-window
https://github.com/dimitri/switch-window
Offer a *visual* way to choose a window to switch to http://tapoueh.org/projects.html#sec19

#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :ensure t
  :bind ("C-x o" . switch-window)
)
#+END_SRC
* python - elpy
-- py-autopep8
https://github.com/paetzke/py-autopep8.el
py-autopep8.el integrates autopep8 into Emacs.
automaticly apply pep8 fixes on file save

#+begin_src emacs-lisp
(use-package py-autopep8
  :ensure t
  :config
     (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
     (setq py-autopep8-options '("--max-line-length=100"))
)
#+end_src

-- elpy - Emacs Python IDE
Repo: https://github.com/jorgenschaefer/elpy
User manual:  http://elpy.readthedocs.io/en/latest/
Info and setup
https://realpython.com/blog/python/emacs-the-best-python-editor/
https://emacs.stackexchange.com/questions/10065/how-can-i-defer-loading-elpy-using-use-package

Setup python env first:
  pip install ipython jedi flake8 autopep8 yapf

Useful keybinds
C-c C-c  evaluates the current script (or region if something is selected) in an interactive python shell. The python shell is automatically displayed aside of your script (if not already there).
C-RET    evaluates the current statement (current line plus the following nested lines).
C-c C-z  switches between your script and the interactive shell.
C-c C-d  displays documentation for the thing under cursor (function or module). The

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable)
  :config
    ;; Explicitly choose backend
    (setq elpy-rpc-backend "jedi")

    ;; replace flymake with flycheck for on-the-fly checking
    ;(when (require 'flycheck nil t)
    ;  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    ;  (add-hook 'elpy-mode-hook 'flycheck-mode))

    ;; Emable pep8 auto correct erros on save - moved to py-autopep8 config
    ;(require 'py-autopep8)
    ;(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

    ;; Use ipython as interpeter instead of just python
    ;; https://elpy.readthedocs.io/en/latest/ide.html#interpreter-setup
    ;; commented out for now, running gives a bunch of ^Gs
    ;(setq python-shell-interpreter "ipython"
    ;      python-shell-interpreter-args "-i --simple-prompt")

    ;; use pdb with Elpy
    (setq gud-pdb-command-name "python -m pdb")
)
#+END_SRC
* neotree
A emacs tree plugin like NerdTree for Vim.
https://github.com/jaypei/emacs-neotree
#  :bind ("C-;" . neotree-toggle)
#  :config
#  (setq neo-theme (if window-system 'icons 'arrows)))

#+begin_src emacs-lisp
(use-package neotree
  :ensure t
  :bind ("<f5>" . neotree-toggle)
)
#+end_src
* markdown-mode
https://jblevins.org/projects/markdown-mode/
markdown-mode is a major mode for editing Markdown-formatted text.

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands markdown-mode)
#+END_SRC
* tramp
https://www.gnu.org/software/tramp/
TRAMP is for transparently accessing remote files from within Emacs

#+BEGIN_SRC emacs-lisp
(use-package tramp
  :ensure nil
  :config
    ;(custom-set-variables '(tramp-verbose 10)) ;; debugging info
    ;(setq tramp-debug-buffer t)

    ;; we need a bit more funky pattern, as tramp will start $SHELL
    ;; (sudo -s), ie., zsh for root user
    (setq shell-prompt-pattern "^[^a-zA-Z].*[#$%>] *")
    ;(setq tramp-shell-prompt-pattern "^[^$>\n]*[#$%>] *\\(\[[0-9;]*[a-zA-Z] *\\)*")
    (setq
      tramp-default-method "sshx"  ;; inline method w/diff interactive shell
      ;tramp-default-method "scpx" ;; external method w/diff interactive shell
      tramp-persistency-file-name "~/.emacs.d/cache/tramp"
      tramp-auto-save-directory "~/.emacs.d/auto-save-list"
      tramp-terminal-type "dumb")  ;; fix remote shell hanging, change .bashrc to
                                   ;; for TERM=dumb and set PS1='$ '

    ;; fix "ls does not support --dired; see `dired-use-ls-dired' for more details."
    ;; it seems that only GNU ls supports --dired
    (setq ls-lisp-use-insert-directory-program nil)
    (require 'ls-lisp)

    ;; Speed up tramp by disabling version control on remote files
    ;; http://www.gnu.org/software/emacs/manual/html_node/tramp/Frequently-Asked-Questions.html
    (setq vc-ignore-dir-regexp
          (format "\\(%s\\)\\|\\(%s\\)"
                  vc-ignore-dir-regexp
                  tramp-file-name-regexp))

    ;; Set remote shell to be /bin/bash
    ;; http://superuser.com/questions/454288/how-to-specify-for-emacs-tramp-which-remote-shell-to-open
    (setq explicit-shell-file-name "/bin/bash")
)
#+END_SRC
* json-mode
https://github.com/joshwnj/json-mode
Major mode for editing JSON files with emacs

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t
  :commands json-mode)
#+END_SRC
* linum-mode
https://www.emacswiki.org/emacs/LineNumbers

#+BEGIN_SRC emacs-lisp
(use-package linum-mode
  :ensure nil
  :defer 0.6
  :bind ("C-<f6>" . linum-mode)
  ;:config
  ;  (setq linum-format "%d ") ;put space between linenumber and text
)
#+END_SRC
* magit
https://github.com/magit/magit
It's Magit! A Git porcelain inside Emacs. https://magit.vc

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer 5
  :commands magit
  :bind
    (("C-x g" . magit-status)
     ("C-x G" . magit-status-with-prefix)
     ("C-x M-g" . magit-dispatch-popup)
     ("C-c M-g" . global-magit-file-mode))
  :config
    (setq magit-completing-read-function 'ivy-completing-read)
)
#+END_SRC
* hydra

https://github.com/abo-abo/hydra
make Emacs bindings that stick around
#+begin_src emacs-lisp
(use-package hydra
  :ensure t)
#+end_src

## from dired
#(defhydra hydra-dired (:hint nil :color pink)
#"
#_+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
#_C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
#_D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
#_R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
#_Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
#_S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
#_r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
#_z_ compress-file  _A_ find regexp
#_Z_ compress       _Q_ repl regexp
#
#T - tag prefix
#"
#  ("\\" dired-do-ispell)
#  ("(" dired-hide-details-mode)
#  (")" dired-omit-mode)
#  ("+" dired-create-directory)
#  ("=" diredp-ediff)         ;; smart diff
#  ("?" dired-summary)
#  ("$" diredp-hide-subdir-nomove)
#  ("A" dired-do-find-regexp)
#  ("C" dired-do-copy)        ;; Copy all marked files
#  ("D" dired-do-delete)
#  ("E" dired-mark-extension)
#  ("e" dired-ediff-files)
#  ("F" dired-do-find-marked-files)
#  ("G" dired-do-chgrp)
#  ("g" revert-buffer)        ;; read all directories again (refresh)
#  ("i" dired-maybe-insert-subdir)
#  ("l" dired-do-redisplay)   ;; relist the marked or singel directory
#  ("M" dired-do-chmod)
#  ("m" dired-mark)
#  ("O" dired-display-file)
#  ("o" dired-find-file-other-window)
#  ("Q" dired-do-find-regexp-and-replace)
#  ("R" dired-do-rename)
#  ("r" dired-do-rsynch)
#  ("S" dired-do-symlink)
#  ("s" dired-sort-toggle-or-edit)
#  ("t" dired-toggle-marks)
#  ("U" dired-unmark-all-marks)
#  ("u" dired-unmark)
#  ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
#  ("w" dired-kill-subdir)
#  ("Y" dired-do-relsymlink)
#  ("z" diredp-compress-this-file)
#  ("Z" dired-do-compress)
#  ("q" nil)
#  ("." nil :color blue))
#
#(define-key dired-mode-map "." 'hydra-dired/body)
#)

## from org-mode
#;;https://github.com/abo-abo/hydra/wiki/Org-mode-block-templates
#(defhydra hydra-org-template (:color blue :hint nil)
#    "
# _c_enter  _q_uote     _e_macs-lisp    _L_aTeX:
# _l_atex   _E_xample   _p_erl          _i_ndex:
# _a_scii   _v_erse     _P_erl tangled  _I_NCLUDE:
# _s_rc     _n_ote      plant_u_ml      _H_TML:
# _h_tml    ^ ^         ^ ^             _A_SCII:
#"
#    ("s" (hot-expand "<s"))
#    ("E" (hot-expand "<e"))
#    ("q" (hot-expand "<q"))
#    ("v" (hot-expand "<v"))
#    ("n" (hot-expand "<not"))
#    ("c" (hot-expand "<c"))
#    ("l" (hot-expand "<l"))
#    ("h" (hot-expand "<h"))
#    ("a" (hot-expand "<a"))
#    ("L" (hot-expand "<L"))
#    ("i" (hot-expand "<i"))
#    ("e" (hot-expand "<s" "emacs-lisp"))
#    ("p" (hot-expand "<s" "perl"))
#    ("u" (hot-expand "<s" "plantuml :file CHANGE.png"))
#    ("P" (hot-expand "<s" "perl" ":results output :exports both :shebang \"#!/usr/bin/env perl\"\n"))
#    ("I" (hot-expand "<I"))
#    ("H" (hot-expand "<H"))
#    ("A" (hot-expand "<A"))
#    ("<" self-insert-command "ins")
#    ("o" nil "quit"))
#
#  ;(require 'org-tempo) ; Required from org 9 onwards for old template expansion
#  (setq org-structure-template-alist (eval (car (get 'org-structure-template-alist 'standard-value))))
#  (defun hot-expand (str &optional mod header)
#    "Expand org template.
#
#STR is a structure template string recognised by org like <s. MOD is a
#string with additional parameters to add the begin line of the
#structure element. HEADER string includes more parameters that are
#prepended to the element after the #+HEADER: tag."
#    (let (text)
#      (when (region-active-p)
#        (setq text (buffer-substring (region-beginning) (region-end)))
#        (delete-region (region-beginning) (region-end))
#        (deactivate-mark))
#      (when header (insert "#+HEADER: " header) (forward-line))
#      (insert str)
#      (org-tempo-complete-tag)
#      (when mod (insert mod) (forward-line))
#      (when text (insert text))))
#
#  (define-key org-mode-map "<"
#    (lambda () (interactive)
#      (if (or (region-active-p) (looking-back "^"))
#          (hydra-org-template/body)
#        (self-insert-command 1))))
#
#  (eval-after-load "org"
#    '(cl-pushnew
#    '("not" . "note")
#      org-structure-template-alist))
#
#; -- hydra --


#https://writepermission.com/emacs-package-use-package-hydra.html
#use-package-hydra not working for me currently
##+begin_src emacs-lisp
#;(use-package use-package-hydra
##+end_src
#  :after hydra
#  :ensure t)
* groovy-mode
https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes
A groovy major mode, grails minor mode, and a groovy inferior mode.

#+BEGIN_SRC emacs-lisp
(use-package groovy-mode
  :ensure t
  :mode "\\.groovy\\'\\|\\.gradle\\'"
)
#+END_SRC
* gnus
#+BEGIN_SRC emacs-lisp
;;; -- gnus - Mail and News reader
(use-package gnus
  :ensure nil
  :custom
    ;;; Define how Gnus is to fetch news
    ;(setq gnus-select-method '(nntp "nntp.aioe.org"))
    (gnus-select-method '(nntp "news.eternal-september.org"))
    ;(setq nntp-authinfo-file "~/.authinfo.gpg") ;use gpg encrypted authfile
    (nntp-authinfo-function 'nntp-send-authinfo)

    ;; setup summary buffer
    (gnus-summary-line-format "%U%R%z%(%[%4L: %-20,20f%]%)%B %s\n")
    (gnus-summary-same-subject "")
    (gnus-sum-thread-tree-root " >")
    (gnus-sum-thread-tree-single-indent "  ")
    (gnus-sum-thread-tree-vertical "|")
    (gnus-sum-thread-tree-indent " ")
    (gnus-sum-thread-tree-leaf-with-other "+-> ")
    (gnus-sum-thread-tree-single-leaf "`-> ")

    ;; show even if there are no articles
    (gnus-permanently-visible-groups ".*"))
#+END_SRC
* exec-path-from-shell
https://github.com/purcell/exec-path-from-shell
A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell.
This sets $MANPATH, $PATH and exec-path from your shell, but only on OS X and Linux.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :custom
    (exec-path-from-shell-check-startup-files nil)
  :if (memq window-system '(mac ns x))
  :config
    (setq exec-path-from-shell-variables '("HISTFILE" "PATH"))
    (exec-path-from-shell-initialize))
#+END_SRC
* esup - disabled
Emacs startup profiler

#+begin_src emacs-lisp
;(use-package esup
;  :ensure t
;  :disabled)
#+end_src
* electric help
https://www.emacswiki.org/emacs/ElectricHelp
Provides a pre-packaged 'Electric Help Mode' for on-line help screens.
Provides: SPC to scroll, DEL to scroll back, q to exit, r to retain
Instead of: Type C-x 1 to delete the help window, C-M-v to scroll help

#+BEGIN_SRC emacs-lisp
(use-package ehelp
  :ensure t
  :bind ("\C-h" . ehelp-command)
)
#+END_SRC
* dockerfile-mode
https://github.com/spotify/dockerfile-mode
An emacs mode for handling Dockerfiles

#+begin_src emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile\\'"
  :ensure t)
#+end_src
* dired
#+BEGIN_SRC emacs-lisp
;;; -- dired - directory listing buffer
;;; http://www.emacswiki.org/emacs/DiredPlus

;;; Toggle Unix hidden file display (M-o)
;;(require 'dired+ nil 'noerror) ;; uber enhanced dired, very large?
;(require 'dired-x nil 'noerror) ;included with emacs
(use-package dired-x
  :after hydra
  :ensure nil
  :demand t
  :bind ("C-x C-j"   . dired-jump)
        ("C-x 4 C-j" . dired-jump-other-window)
        ("C-x d"     . diredp-dired-files)
        ("C-x 4 d"   . diredp-dired-files-other-window)
  :config
    ;; hide hidden files by default, use (M-o) to show
    (setq dired-omit-files "^\\...+$")
    (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1)))

    ;;; New dired+ option is to hide file details, can be togged with '('
    ;(setq diredp-hide-details-initially-flag -1) ;doesn't seem to work
    ;(setq global-dired-hide-details-mode -1)
    ;(setq dired-recursive-deletes 'top)
    ;; disable line wrapping in dired mode
    (add-hook 'dired-mode-hook (lambda () (setq truncate-lines t)))

    ;;; Auto-refresh dired on file change
    (add-hook 'dired-mode-hook 'auto-revert-mode)

    ;; Handle zip compression
    (defvar dired-compress-file-suffixes)
    (eval-after-load "dired-aux"
      '(add-to-list 'dired-compress-file-suffixes
                    '("\\.zip\\'" ".zip" "unzip")))

    ;; Configure direx jump
    (autoload 'dired-jump "dired-x"
      "Jump to Dired buffer corresponding to current buffer." t)

    (autoload 'dired-jump-other-window "dired-x"
      "Like \\[dired-jump] (dired-jump) but in other window." t)

    ;; enable side-by-side dired buffer targets
    ;; Split your window, split-window-vertically & go to another dired directory.
    ;; When you will press C to copy, the other dir in the split pane will be
    ;; default destination.
    (setq dired-dwim-target t) ;; suggest copying/moving to other dired buffer in split view

;; https://github.com/abo-abo/hydra/wiki/Dired
;; note, requires :demand t to load properly
#+END_SRC
* async
https://github.com/jwiegley/emacs-async
async.el is a module for doing asynchronous processing in Emacs. Some async applications are provided as well with this package:
- Dired-async
- smtp-mail-async
- async-bytecomp

#+BEGIN_SRC emacs-lisp
(use-package async
  :ensure t
  :init (async-bytecomp-package-mode 1)
)
#+END_SRC
* themes
zenburn-theme
https://github.com/bbatsov/zenburn-emacs
The Zenburn colour theme ported to Emacs

#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :ensure t
  :load-path "themes"
  :config
  (load-theme 'zenburn t)
)
#+END_SRC
* sublimity
[emacs] smooth-scrolling and minimap like sublime editor
https://github.com/zk-phi/sublimity

#+BEGIN_SRC emacs-lisp
(use-package sublimity
  :config (sublimity-mode 1)
)
#+END_SRC
* Keymappings
| Key                 | Function                  | Notes                                 |
|---------------------+---------------------------+---------------------------------------|
| C-x C-u             | upcase region             |                                       |
| C-x C-l             | downcase region           |                                       |
|                     |                           |                                       |
| C-x r m             | set a bookmark            |                                       |
| C-x r b             | jump to a bookmark        |                                       |
| C-x r l             | list your bookmarks       |                                       |
| M-x bookmark-delete | delete a bookmark by name |                                       |
|                     |                           |                                       |
| M-`                 | other-frame               |                                       |
| C-c e               | ehsell                    |                                       |
| C-c s               | shell                     |                                       |
| C-c r               | rgrep                     |                                       |
| C-c C-r             | rgrep                     |                                       |
| C-f12               | list-matching-lines       |                                       |
| C-f10               | query-replace             |                                       |
| S-f10               | ispell-buffer             |                                       |
| C-S-f10             | flyspell-buffer           |                                       |
| C-x r v             | list-registers            | summary of all registers with content |
| C-M-z               | zap-back-to-char          | Reverse of M-z zap to char            |
| f12                 | toggle-truncate-lines     |                                       |
| C-x O               | rev-other-window          |                                       |
| C-x C-m             | M-x without Alt key       |                                       |
| C-c C-m             | M-x without Alt key       |                                       |
|                     |                           |                                       |
| C-c I               | overwrite-mode            | Mac                                   |
|                     |                           |                                       |
| C-c C-j             | term-toggle-mode          |                                       |
| C-c C-k             | term-toggle-mode          |                                       |
| C-c n               | narrow-or-widen           | Toggle between modes                  |
| C-c C-l             | locked-buffer-mode        | Lock buffer to window                 |
| M-S-down            | move-line-down            |                                       |
| M-S-up              | move-line-up              |                                       |
| C-x c               | clear-shell               |                                       |
| f9                  | daily-log                 | Jerry Sievers daily log               |
| C-x C-b             | ibuffer                   | Nice buffer switching                 |
| C-s                 | swiper                    | Ivy-mode search (f6 to resume         |
| C-c g               | magit-status              | Start magit                           |
| f2                  | neotree                   |                                       |
|                     |                           |                                       |
| C-c l               | org-store-link            |                                       |
| C-c a               | org-agenda                |                                       |
| C-c b               | org-iswitchb              |                                       |
| C-c c               | org-capture               |                                       |
|                     |                           |                                       |
| C-c t               | shell-pop                 | pop up shell                          |
| C-c o               | switch-window             |                                       |
|---------------------+---------------------------+---------------------------------------|
| C-x * q             | quick-calc                |                                       |
| C-x * *             | calc                      |                                       |
|---------------------+---------------------------+---------------------------------------|

* Themes and housekeeping
;;; Only use Themes in GUI. Set color theme (load-theme) for >= Emacs 24
(if (fboundp 'load-theme)
    (if (display-graphic-p)
        (load-theme 'zenburn :no-confirm)  ; Emacs in own window (zenburn)
      (load-theme 'wheatgrass :no-confirm)  ; Emacs in tty
))

;;; Run multiple async commands at once without the output buffers colliding:
;; Allow running multiple async commands simultaneously
(defadvice shell-command (after shell-in-new-buffer (command &optional output-buffer error-buffer))
  (when (get-buffer "*Async Shell Command*")
    (with-current-buffer "*Async Shell Command*"
      (rename-uniquely))))
(ad-activate 'shell-command)
* Global key bindings
;; Bind rgrep to C-c r / C-c C-r
(global-set-key (kbd "C-c r") 'rgrep)
(global-set-key (kbd "C-c C-r") 'rgrep)

;; remap these
(global-set-key [C-f12]      'list-matching-lines)
(global-set-key [C-f10]      'query-replace)
(global-set-key [S-f10]      'ispell-buffer)
(global-set-key [C-S-f10]    'flyspell-buffer)

;; Zap-back-to-char C-M-z (deletes back to the and including character)
;; a counterpoint to zap-to-char M-z
(global-set-key "\C-\M-z" #'(lambda (arg char)
  (interactive "p\ncZap to char: ")
  (zap-to-char (- arg) char)))

;;; Disable line wrap
;;(setq default-truncate-lines t) ; deprecated in 23.2, use truncate-lines
(setq truncate-lines t)
;;; Make side by side buffers function the same as the main window
(setq truncate-partial-width-windows nil)
;;; Add F12 to toggle line wrap
(global-set-key [f12] 'toggle-truncate-lines)
* Global settings
;;; Turn on automatic bracket insertion by pairs. New in emacs 24
;;; http://ergoemacs.org/emacs/emacs_insert_brackets_by_pair.html
;;; Works great with new text, editing existing text is very annoying
;(electric-pair-mode 1)

;;; backups - commented out for better-defaults
;(setq make-backup-files t ;; do make backups
;  backup-by-copying t     ;; and copy them here
;  backup-directory-alist '(("." . "~/.emacs.d/cache/backups"))
;  version-control t
;  kept-new-versions 2
;  kept-old-versions 5
;  delete-old-versions t)

;; Create the autosave dir if necessary, since emacs won't.
;(make-directory "~/.emacs.d/cache/autosaves/" t)
;; Put all auto-save files in a single directory
;(defvar autosave-dir (expand-file-name "~/.emacs.d/cache/autosaves/"))
;(setq auto-save-list-file-prefix
;  "~/.emacs.d/cache/autosaves/saves-")

* Functions
;;; ---------------------------------------------------------------------------
;;; Toggles term between line mode and char mode
;;; http://emacs.stackexchange.com/questions/5585/how-to-copy-command-output-in-ansi-term-mode
;;; https://joelmccracken.github.io/entries/switching-between-term-mode-and-line-mode-in-emacs-term/
(require 'term)
(defun jnm/term-toggle-mode ()
  "Toggles term between line mode and char mode"
  (interactive)
  (if (term-in-line-mode)
      (term-char-mode)
    (term-line-mode)))
;; active when the buffer is in line mode
(define-key term-mode-map (kbd "C-c C-j") 'jnm/term-toggle-mode)
(define-key term-mode-map (kbd "C-c C-k") 'jnm/term-toggle-mode)
;; active when the buffer is in character mode
(define-key term-raw-map (kbd "C-c C-j") 'jnm/term-toggle-mode)
(define-key term-raw-map (kbd "C-c C-k") 'jnm/term-toggle-mode)


;;; ---------------------------------------------------------------------------
;;; Create parent directory when visiting file in non-existent directory
;;; http://iqbalansari.github.io/blog/2014/12/07/automatically-create-parent-directories-on-visiting-a-new-file-in-emacs/
(defun my-create-non-existent-directory ()
      (let ((parent-directory (file-name-directory buffer-file-name)))
        (when (and (not (file-exists-p parent-directory))
                   (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
          (make-directory parent-directory t))))

(add-to-list 'find-file-not-found-functions #'my-create-non-existent-directory)


;;; ---------------------------------------------------------------------------
;;; http://www.reddit.com/r/emacs/comments/1zkj2d/advanced_usage_of_eshell
(defun ha-eshell-here ()
  "Opens up a new shell in the directory associated with the current buffer's file."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (name (car (last (split-string parent "/" t)))))
    (split-window-vertically)
    (other-window 1)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))

    (insert (concat "ls"))
    (eshell-send-input)))

(defun af-eshell-here ()
  "Go to eshell and set current directory to the buffer's directory"
  (interactive)
  (let ((dir (file-name-directory (or (buffer-file-name)
                                      default-directory))))
    (eshell)
    (eshell/pushd ".")
    (cd dir)
    (goto-char (point-max))
    (eshell-kill-input)
    (eshell-send-input)))


;;; ---------------------------------------------------------------------------
;;; Locked mode - lock a window in place
(define-minor-mode locked-buffer-mode
  "Make the current window always display this buffer."
  nil " locked" nil
  (set-window-dedicated-p (selected-window) locked-buffer-mode))
(global-set-key (kbd "C-c C-l") 'locked-buffer-mode)


;;; --------------------------------------------------------------------------
;;; Narrow-to-region-indirect (Allow narrowing of different regions in windows)
;;; http://demonastery.org/2013/04/emacs-narrow-to-region-indirect/
(defun narrow-to-region-indirect (start end)
  "Restrict editing in this buffer to the current region, indirectly."
  (interactive "r")
  (when (boundp 'evil-mode) ; There's probably a nicer way to do this
    (evil-exit-visual-state))
  (let ((buf (clone-indirect-buffer nil nil)))
    (with-current-buffer buf
      (narrow-to-region start end))
      (switch-to-buffer buf)))


;;; ---------------------------------------------------------------------------
;;; Kill all other open files, other then the current one.  NO Notification!
;;; http://emacsredux.com/blog/2013/03/30/kill-other-buffers/
;(defun kill-other-buffers ()
;  "Kill all buffers but the current one.
;   Don't mess with special buffers."
;  (interactive)
;  (dolist (buffer (buffer-list))
;    (unless (or (eql buffer (current-buffer)) (not (buffer-file-name buffer)))
;      (kill-buffer buffer))))
;(global-set-key (kbd "C-c k") 'kill-other-buffers)


;;; ---------------------------------------------------------------------------
;;; change a marked region of text to all low-cased words concatenated by underscores
;;; A fox caught a bird => a_fox_caught_a_bird
(defun lower-and-concat (b e)
  (interactive "r")
  (save-restriction
    (narrow-to-region b e)
    (goto-char (point-min))
    (downcase-region b e)
    (while (re-search-forward "[ \t]+" nil t)
      (replace-match "_"))))


;;; ---------------------------------------------------------------------------
;;; Open a full screen eshell, save current layout
;;; http://irreal.org/blog/?p=1742
(global-set-key (kbd "C-c E")
                (lambda ()
                  "Bring up a full-screen eshell or restore previous config."
                  (interactive)
                  (if (string= "eshell-mode" major-mode)
                      (jump-to-register :eshell-fullscreen)
                    (progn
                      (window-configuration-to-register :eshell-fullscreen)
                      (eshell)
                      (delete-other-windows)))))


;;; ---------------------------------------------------------------------------
;;; Re-open a file with sudo access
;;; http://www.reddit.com/r/emacs/comments/192n52/how_do_i_save_ediffmerged_changes_for/
(defun sudo-file()
  (interactive)
  (let ((p (point)))
    (find-alternate-file
     (concat "/sudo::" (buffer-file-name)))
    (goto-char p)))



;;; ---------------------------------------------------------------------------
;;; Jump to next character - Similar to Vim's semicolon command
;;; http://www.reddit.com/r/emacs/comments/nfj0e/emacs_wizards_how_do_you_move_about_in_source_code/
;(defun jump-to-next-char (c &optional count)
;  "Jump forward or backward to a specific character.  With a
;count, move that many copies of the character."
;  (interactive "cchar: \np")
;  (when (string= (string c) (buffer-substring (point) (+ 1 (point))))
;    (setq count (+ 1 count)))
;  (and
;   (search-forward (string c) nil t count)
;   (> count 0)
;   (backward-char)))
;(global-set-key (kbd "C-;") 'jump-to-next-char)

;;; ---------------------------------------------------------------------------
;;; Remove duplicate lines in a region
;;; http://stackoverflow.com/questions/13046791/how-to-delete-the-repeat-lines-in-emacs
;(defun uniq-lines (beg end)
;  "Unique lines in region.
;Called from a program, there are two arguments:
;BEG and END (region to sort)."
;  (interactive "r")
;  (save-excursion
;    (save-restriction
;      (narrow-to-region beg end)
;      (goto-char (point-min))
;      (while (not (eobp))
;        (kill-line 1)
;        (yank)
;        (let ((next-line (point)))
;          (while
;              (re-search-forward
;               (format "^%s" (regexp-quote (car kill-ring))) nil t)
;            (replace-match "" nil nil))
;          (goto-char next-line))))))


;;; ---------------------------------------------------------------------------
;;; Unfill paragraph / Unfill region
;;; http://stackoverflow.com/questions/6707758/inverse-of-m-q-an-unfill-paragraph-function
(defun unfill-paragraph ()
  "Replace newline chars in current paragraph by single spaces.
This command does the reverse of `fill-paragraph'."
  (interactive)
  (let ((fill-column 90002000))
    (fill-paragraph nil)))

(defun unfill-region (start end)
  "Replace newline chars in region by single spaces.
This command does the reverse of `fill-region'."
  (interactive "r")
  (let ((fill-column 90002000))
    (fill-region start end)))


;;; ---------------------------------------------------------------------------
;;; Remove all space indentation
;;; http://stackoverflow.com/questions/10854776/emacs-function-which-eliminates-all-indentation
(defun my-delete-indentation (start end)
  "Delete all leading whitespace within the current region."
  (interactive "*r")
  (replace-regexp "^[[:space:]]+" "" nil start end))


;;; ---------------------------------------------------------------------------
;;; Remote ssh connection from within Emacs
;;; http://stackoverflow.com/questions/10495432/remote-ssh-connection-from-within-emacs
(defun my-ssh (args)
  "Connect to a remote host by SSH."
  (interactive "sssh ")
  (let ((switches (split-string-and-unquote args)))
    (set-buffer (apply 'make-term "ssh" "ssh" nil switches))
    (term-mode)
    (term-char-mode)
    (switch-to-buffer "*ssh*")))


;;; ---------------------------------------------------------------------------
;;; Save list of open files to kill-ring (by Trey Jackson)
;;; http://stackoverflow.com/questions/10537265/emacs-save-current-buffer-list-to-a-text-file
(defun copy-open-files ()
  "Add paths to all open files to kill ring"
  (interactive)
  (kill-new (mapconcat 'identity
                       (delq nil (mapcar 'buffer-file-name (buffer-list)))
                       "\n"))
  (message "List of files copied to kill ring"))


;;; ---------------------------------------------------------------------------
;;; Use a bar cursor when mark is active and a region exists.
;;; http://www.reddit.com/r/emacs/comments/stkb1/im_really_liking_the_bar_cursor/
(defun th-activate-mark-init ()
  (setq cursor-type 'bar))
(add-hook 'activate-mark-hook 'th-activate-mark-init)

(defun th-deactivate-mark-init ()
  (setq cursor-type 'box))
(add-hook 'deactivate-mark-hook 'th-deactivate-mark-init)

;; Use a red cursor in overwrite-mode
(defvar th--default-cursor-color "black")
(defadvice overwrite-mode (after th-overwrite-mode-change-cursor activate)
  "Change cursor color in override-mode."
  (if overwrite-mode
      (progn
        (setq th--default-cursor-color
              (let ((f (face-attribute 'cursor :background)))
                (if (stringp f)
                    f
                  th--default-cursor-color)))
        (set-cursor-color "red"))
    (set-cursor-color th--default-cursor-color)))


;;; ---------------------------------------------------------------------------
;;; I want a key to open the current buffer all over the screen.
;;; http://stackoverflow.com/questions/970292/emacs-multiple-columns-one-buffer
(defun all-over-the-screen ()
  (interactive)
  (delete-other-windows)
  (split-window-horizontally)
  (split-window-horizontally)
  (balance-windows)
  (follow-mode t))


;;; ---------------------------------------------------------------------------
;;; Clear shell (m-x shell) screen like bash's clear command
(defun clear-shell ()
   (interactive)
  (let ((old-max comint-buffer-maximum-size))
    (setq comint-buffer-maximum-size 0)
    (comint-truncate-buffer)
    (setq comint-buffer-maximum-size old-max)))
(global-set-key "\C-xc" 'clear-shell)


;;; ---------------------------------------------------------------------------
;;; Save rectangle instead of killing it
;;; http://emacsblog.org/2007/03/17/quick-tip-set-goal-column
(defun kill-save-rectangle (start end &optional fill)
  "Save the rectangle as if killed, but don't kill it.  See
`kill-rectangle' for more information."
  (interactive "r\nP")
  (kill-rectangle start end fill)
  (goto-char start)
  (yank-rectangle))
(global-set-key (kbd "C-x r M-k") 'kill-save-rectangle)


;;; ---------------------------------------------------------------------------
;;; Steve Yegge's function rename a file that you're editing along
;;; with its corresponding buffer
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
 (filename (buffer-file-name)))
    (if (not filename)
 (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
   (message "A buffer named '%s' already exists!" new-name)
 (progn
   (rename-file name new-name 1)
   (rename-buffer new-name)
   (set-visited-file-name new-name)
   (set-buffer-modified-p nil))))))


;;; ---------------------------------------------------------------------------
;;; http://www.reddit.com/r/emacs/comments/gjqki/is_there_any_way_to_tell_emacs_to_not/c1o26uk
;(defun toggle-sticky-buffer-window ()
; "Toggle whether this window is dedicated to this buffer."
; (interactive)
; (set-window-dedicated-p
;  (selected-window)
;  (not (window-dedicated-p (selected-window))))
; (if (window-dedicated-p (selected-window))
;     (message "Window is now dedicated.")
;   (message "Window is no longer dedicated.")))
;
;(global-set-key [(super d)] 'toggle-sticky-buffer-window) ;; cmd-d
